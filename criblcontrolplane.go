// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package criblcontrolplanesdkgo

// Generated from OpenAPI doc version 4.15.0-alpha.1761420802292-a60a4283 and generator version 2.723.11

import (
	"context"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/config"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/hooks"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/retry"
	"net/http"
	"time"
)

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// CriblControlPlane - Cribl API Reference: This API Reference lists available REST endpoints, along with their supported operations for accessing, creating, updating, or deleting resources. See our complementary product documentation at [docs.cribl.io](http://docs.cribl.io).
type CriblControlPlane struct {
	SDKVersion   string
	LakeDatasets *LakeDatasets
	// Actions related to Sources
	Sources *Sources
	// Actions related to Destinations
	Destinations *Destinations
	// Actions related to Pipelines
	Pipelines *Pipelines
	// Actions related to Routes
	Routes *Routes
	Auth   *Auth
	Nodes  *Nodes
	// Actions related to REST server health
	Health *Health
	// Actions related to Packs
	Packs    *Packs
	Versions *Versions
	// Actions related to Groups
	Groups *Groups

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*CriblControlPlane)

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *CriblControlPlane) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *CriblControlPlane) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *CriblControlPlane) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *CriblControlPlane) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *CriblControlPlane) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided serverURL and options
func New(serverURL string, opts ...SDKOption) *CriblControlPlane {
	sdk := &CriblControlPlane{
		SDKVersion: "0.2.0-rc.2",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent: "speakeasy-sdk/go 0.2.0-rc.2 2.723.11 4.15.0-alpha.1761420802292-a60a4283 github.com/criblio/cribl-control-plane-sdk-go",
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	sdk.sdkConfiguration.ServerURL = serverURL

	sdk.sdkConfiguration = sdk.hooks.SDKInit(sdk.sdkConfiguration)

	sdk.LakeDatasets = newLakeDatasets(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Sources = newSources(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Destinations = newDestinations(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Pipelines = newPipelines(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Routes = newRoutes(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Auth = newAuth(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Nodes = newNodes(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Health = newHealth(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Packs = newPacks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Versions = newVersions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Groups = newGroups(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}

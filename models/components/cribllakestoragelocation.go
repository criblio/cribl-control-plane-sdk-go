// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type Provider string

const (
	ProviderAwsS3 Provider = "aws-s3"
)

func (e Provider) ToPointer() *Provider {
	return &e
}
func (e *Provider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws-s3":
		*e = Provider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Provider: %v", v)
	}
}

type StatusBlocked string

const (
	StatusBlockedBlocked StatusBlocked = "blocked"
)

func (e StatusBlocked) ToPointer() *StatusBlocked {
	return &e
}
func (e *StatusBlocked) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blocked":
		*e = StatusBlocked(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusBlocked: %v", v)
	}
}

type CriblLakeStorageLocationStatusEnum string

const (
	CriblLakeStorageLocationStatusEnumProvisioning CriblLakeStorageLocationStatusEnum = "provisioning"
	CriblLakeStorageLocationStatusEnumReady        CriblLakeStorageLocationStatusEnum = "ready"
	CriblLakeStorageLocationStatusEnumFailed       CriblLakeStorageLocationStatusEnum = "failed"
	CriblLakeStorageLocationStatusEnumTerminated   CriblLakeStorageLocationStatusEnum = "terminated"
	CriblLakeStorageLocationStatusEnumDelayed      CriblLakeStorageLocationStatusEnum = "delayed"
)

func (e CriblLakeStorageLocationStatusEnum) ToPointer() *CriblLakeStorageLocationStatusEnum {
	return &e
}
func (e *CriblLakeStorageLocationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "provisioning":
		fallthrough
	case "ready":
		fallthrough
	case "failed":
		fallthrough
	case "terminated":
		fallthrough
	case "delayed":
		*e = CriblLakeStorageLocationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CriblLakeStorageLocationStatusEnum: %v", v)
	}
}

type StatusType string

const (
	StatusTypeCriblLakeStorageLocationStatusEnum StatusType = "CriblLakeStorageLocation_status_enum"
	StatusTypeStatusBlocked                      StatusType = "status_Blocked"
)

type Status struct {
	CriblLakeStorageLocationStatusEnum *CriblLakeStorageLocationStatusEnum `queryParam:"inline"`
	StatusBlocked                      *StatusBlocked                      `queryParam:"inline"`

	Type StatusType
}

func CreateStatusCriblLakeStorageLocationStatusEnum(criblLakeStorageLocationStatusEnum CriblLakeStorageLocationStatusEnum) Status {
	typ := StatusTypeCriblLakeStorageLocationStatusEnum

	return Status{
		CriblLakeStorageLocationStatusEnum: &criblLakeStorageLocationStatusEnum,
		Type:                               typ,
	}
}

func CreateStatusStatusBlocked(statusBlocked StatusBlocked) Status {
	typ := StatusTypeStatusBlocked

	return Status{
		StatusBlocked: &statusBlocked,
		Type:          typ,
	}
}

func (u *Status) UnmarshalJSON(data []byte) error {

	var criblLakeStorageLocationStatusEnum CriblLakeStorageLocationStatusEnum = CriblLakeStorageLocationStatusEnum("")
	if err := utils.UnmarshalJSON(data, &criblLakeStorageLocationStatusEnum, "", true, true); err == nil {
		u.CriblLakeStorageLocationStatusEnum = &criblLakeStorageLocationStatusEnum
		u.Type = StatusTypeCriblLakeStorageLocationStatusEnum
		return nil
	}

	var statusBlocked StatusBlocked = StatusBlocked("")
	if err := utils.UnmarshalJSON(data, &statusBlocked, "", true, true); err == nil {
		u.StatusBlocked = &statusBlocked
		u.Type = StatusTypeStatusBlocked
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Status", string(data))
}

func (u Status) MarshalJSON() ([]byte, error) {
	if u.CriblLakeStorageLocationStatusEnum != nil {
		return utils.MarshalJSON(u.CriblLakeStorageLocationStatusEnum, "", true)
	}

	if u.StatusBlocked != nil {
		return utils.MarshalJSON(u.StatusBlocked, "", true)
	}

	return nil, errors.New("could not marshal union type Status: all fields are null")
}

type CriblLakeStorageLocation struct {
	Config      CriblLakeStorageLocationConfig `json:"config"`
	Credentials Credentials                    `json:"credentials"`
	Description *string                        `json:"description,omitempty"`
	ID          string                         `json:"id"`
	Provider    Provider                       `json:"provider"`
	Status      Status                         `json:"status"`
}

func (o *CriblLakeStorageLocation) GetConfig() CriblLakeStorageLocationConfig {
	if o == nil {
		return CriblLakeStorageLocationConfig{}
	}
	return o.Config
}

func (o *CriblLakeStorageLocation) GetCredentials() Credentials {
	if o == nil {
		return Credentials{}
	}
	return o.Credentials
}

func (o *CriblLakeStorageLocation) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CriblLakeStorageLocation) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CriblLakeStorageLocation) GetProvider() Provider {
	if o == nil {
		return Provider("")
	}
	return o.Provider
}

func (o *CriblLakeStorageLocation) GetStatus() Status {
	if o == nil {
		return Status{}
	}
	return o.Status
}

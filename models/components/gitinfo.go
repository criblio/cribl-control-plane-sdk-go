// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type RemoteEnum string

const (
	RemoteEnumFalse RemoteEnum = "false"
)

func (e RemoteEnum) ToPointer() *RemoteEnum {
	return &e
}

type RemoteType string

const (
	RemoteTypeStr        RemoteType = "str"
	RemoteTypeRemoteEnum RemoteType = "remote_enum"
)

type Remote struct {
	Str        *string     `queryParam:"inline,name=remote"`
	RemoteEnum *RemoteEnum `queryParam:"inline,name=remote"`

	Type RemoteType
}

func CreateRemoteStr(str string) Remote {
	typ := RemoteTypeStr

	return Remote{
		Str:  &str,
		Type: typ,
	}
}

func CreateRemoteRemoteEnum(remoteEnum RemoteEnum) Remote {
	typ := RemoteTypeRemoteEnum

	return Remote{
		RemoteEnum: &remoteEnum,
		Type:       typ,
	}
}

func (u *Remote) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = RemoteTypeStr
		return nil
	}

	var remoteEnum RemoteEnum = RemoteEnum("")
	if err := utils.UnmarshalJSON(data, &remoteEnum, "", true, nil); err == nil {
		u.RemoteEnum = &remoteEnum
		u.Type = RemoteTypeRemoteEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Remote", string(data))
}

func (u Remote) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.RemoteEnum != nil {
		return utils.MarshalJSON(u.RemoteEnum, "", true)
	}

	return nil, errors.New("could not marshal union type Remote: all fields are null")
}

type GitInfo struct {
	Remote     Remote `json:"remote"`
	Versioning bool   `json:"versioning"`
}

func (g *GitInfo) GetRemote() Remote {
	if g == nil {
		return Remote{}
	}
	return g.Remote
}

func (g *GitInfo) GetVersioning() bool {
	if g == nil {
		return false
	}
	return g.Versioning
}

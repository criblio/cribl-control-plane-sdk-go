// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type OutputType string

const (
	OutputTypeDefault                OutputType = "default"
	OutputTypeWebhook                OutputType = "webhook"
	OutputTypeSentinel               OutputType = "sentinel"
	OutputTypeDevnull                OutputType = "devnull"
	OutputTypeSyslog                 OutputType = "syslog"
	OutputTypeSplunk                 OutputType = "splunk"
	OutputTypeSplunkLb               OutputType = "splunk_lb"
	OutputTypeSplunkHec              OutputType = "splunk_hec"
	OutputTypeTcpjson                OutputType = "tcpjson"
	OutputTypeWavefront              OutputType = "wavefront"
	OutputTypeSignalfx               OutputType = "signalfx"
	OutputTypeFilesystem             OutputType = "filesystem"
	OutputTypeS3                     OutputType = "s3"
	OutputTypeAzureBlob              OutputType = "azure_blob"
	OutputTypeAzureDataExplorer      OutputType = "azure_data_explorer"
	OutputTypeAzureLogs              OutputType = "azure_logs"
	OutputTypeKinesis                OutputType = "kinesis"
	OutputTypeHoneycomb              OutputType = "honeycomb"
	OutputTypeAzureEventhub          OutputType = "azure_eventhub"
	OutputTypeGoogleChronicle        OutputType = "google_chronicle"
	OutputTypeGoogleCloudStorage     OutputType = "google_cloud_storage"
	OutputTypeGoogleCloudLogging     OutputType = "google_cloud_logging"
	OutputTypeGooglePubsub           OutputType = "google_pubsub"
	OutputTypeExabeam                OutputType = "exabeam"
	OutputTypeKafka                  OutputType = "kafka"
	OutputTypeConfluentCloud         OutputType = "confluent_cloud"
	OutputTypeMsk                    OutputType = "msk"
	OutputTypeElastic                OutputType = "elastic"
	OutputTypeElasticCloud           OutputType = "elastic_cloud"
	OutputTypeNewrelic               OutputType = "newrelic"
	OutputTypeNewrelicEvents         OutputType = "newrelic_events"
	OutputTypeInfluxdb               OutputType = "influxdb"
	OutputTypeCloudwatch             OutputType = "cloudwatch"
	OutputTypeMinio                  OutputType = "minio"
	OutputTypeStatsd                 OutputType = "statsd"
	OutputTypeStatsdExt              OutputType = "statsd_ext"
	OutputTypeGraphite               OutputType = "graphite"
	OutputTypeRouter                 OutputType = "router"
	OutputTypeSns                    OutputType = "sns"
	OutputTypeSqs                    OutputType = "sqs"
	OutputTypeSnmp                   OutputType = "snmp"
	OutputTypeSumoLogic              OutputType = "sumo_logic"
	OutputTypeDatadog                OutputType = "datadog"
	OutputTypeGrafanaCloud           OutputType = "grafana_cloud"
	OutputTypeLoki                   OutputType = "loki"
	OutputTypePrometheus             OutputType = "prometheus"
	OutputTypeRing                   OutputType = "ring"
	OutputTypeOpenTelemetry          OutputType = "open_telemetry"
	OutputTypeServiceNow             OutputType = "service_now"
	OutputTypeDataset                OutputType = "dataset"
	OutputTypeCriblTCP               OutputType = "cribl_tcp"
	OutputTypeCriblHTTP              OutputType = "cribl_http"
	OutputTypeHumioHec               OutputType = "humio_hec"
	OutputTypeCrowdstrikeNextGenSiem OutputType = "crowdstrike_next_gen_siem"
	OutputTypeDlS3                   OutputType = "dl_s3"
	OutputTypeSecurityLake           OutputType = "security_lake"
	OutputTypeCriblLake              OutputType = "cribl_lake"
	OutputTypeDiskSpool              OutputType = "disk_spool"
	OutputTypeClickHouse             OutputType = "click_house"
	OutputTypeXsiam                  OutputType = "xsiam"
	OutputTypeNetflow                OutputType = "netflow"
	OutputTypeDynatraceHTTP          OutputType = "dynatrace_http"
	OutputTypeDynatraceOtlp          OutputType = "dynatrace_otlp"
	OutputTypeSentinelOneAiSiem      OutputType = "sentinel_one_ai_siem"
	OutputTypeDatabricks             OutputType = "databricks"
)

type Output struct {
	OutputDefault                *OutputDefault                `queryParam:"inline,name=Output"`
	OutputWebhook                *OutputWebhook                `queryParam:"inline,name=Output"`
	OutputSentinel               *OutputSentinel               `queryParam:"inline,name=Output"`
	OutputDevnull                *OutputDevnull                `queryParam:"inline,name=Output"`
	OutputSyslog                 *OutputSyslog                 `queryParam:"inline,name=Output"`
	OutputSplunk                 *OutputSplunk                 `queryParam:"inline,name=Output"`
	OutputSplunkLb               *OutputSplunkLb               `queryParam:"inline,name=Output"`
	OutputSplunkHec              *OutputSplunkHec              `queryParam:"inline,name=Output"`
	OutputTcpjson                *OutputTcpjson                `queryParam:"inline,name=Output"`
	OutputWavefront              *OutputWavefront              `queryParam:"inline,name=Output"`
	OutputSignalfx               *OutputSignalfx               `queryParam:"inline,name=Output"`
	OutputFilesystem             *OutputFilesystem             `queryParam:"inline,name=Output"`
	OutputS3                     *OutputS3                     `queryParam:"inline,name=Output"`
	OutputAzureBlob              *OutputAzureBlob              `queryParam:"inline,name=Output"`
	OutputAzureDataExplorer      *OutputAzureDataExplorer      `queryParam:"inline,name=Output"`
	OutputAzureLogs              *OutputAzureLogs              `queryParam:"inline,name=Output"`
	OutputKinesis                *OutputKinesis                `queryParam:"inline,name=Output"`
	OutputHoneycomb              *OutputHoneycomb              `queryParam:"inline,name=Output"`
	OutputAzureEventhub          *OutputAzureEventhub          `queryParam:"inline,name=Output"`
	OutputGoogleChronicle        *OutputGoogleChronicle        `queryParam:"inline,name=Output"`
	OutputGoogleCloudStorage     *OutputGoogleCloudStorage     `queryParam:"inline,name=Output"`
	OutputGoogleCloudLogging     *OutputGoogleCloudLogging     `queryParam:"inline,name=Output"`
	OutputGooglePubsub           *OutputGooglePubsub           `queryParam:"inline,name=Output"`
	OutputExabeam                *OutputExabeam                `queryParam:"inline,name=Output"`
	OutputKafka                  *OutputKafka                  `queryParam:"inline,name=Output"`
	OutputConfluentCloud         *OutputConfluentCloud         `queryParam:"inline,name=Output"`
	OutputMsk                    *OutputMsk                    `queryParam:"inline,name=Output"`
	OutputElastic                *OutputElastic                `queryParam:"inline,name=Output"`
	OutputElasticCloud           *OutputElasticCloud           `queryParam:"inline,name=Output"`
	OutputNewrelic               *OutputNewrelic               `queryParam:"inline,name=Output"`
	OutputNewrelicEvents         *OutputNewrelicEvents         `queryParam:"inline,name=Output"`
	OutputInfluxdb               *OutputInfluxdb               `queryParam:"inline,name=Output"`
	OutputCloudwatch             *OutputCloudwatch             `queryParam:"inline,name=Output"`
	OutputMinio                  *OutputMinio                  `queryParam:"inline,name=Output"`
	OutputStatsd                 *OutputStatsd                 `queryParam:"inline,name=Output"`
	OutputStatsdExt              *OutputStatsdExt              `queryParam:"inline,name=Output"`
	OutputGraphite               *OutputGraphite               `queryParam:"inline,name=Output"`
	OutputRouter                 *OutputRouter                 `queryParam:"inline,name=Output"`
	OutputSns                    *OutputSns                    `queryParam:"inline,name=Output"`
	OutputSqs                    *OutputSqs                    `queryParam:"inline,name=Output"`
	OutputSnmp                   *OutputSnmp                   `queryParam:"inline,name=Output"`
	OutputSumoLogic              *OutputSumoLogic              `queryParam:"inline,name=Output"`
	OutputDatadog                *OutputDatadog                `queryParam:"inline,name=Output"`
	OutputGrafanaCloud           *OutputGrafanaCloud           `queryParam:"inline,name=Output"`
	OutputLoki                   *OutputLoki                   `queryParam:"inline,name=Output"`
	OutputPrometheus             *OutputPrometheus             `queryParam:"inline,name=Output"`
	OutputRing                   *OutputRing                   `queryParam:"inline,name=Output"`
	OutputOpenTelemetry          *OutputOpenTelemetry          `queryParam:"inline,name=Output"`
	OutputServiceNow             *OutputServiceNow             `queryParam:"inline,name=Output"`
	OutputDataset                *OutputDataset                `queryParam:"inline,name=Output"`
	OutputCriblTCP               *OutputCriblTCP               `queryParam:"inline,name=Output"`
	OutputCriblHTTP              *OutputCriblHTTP              `queryParam:"inline,name=Output"`
	OutputHumioHec               *OutputHumioHec               `queryParam:"inline,name=Output"`
	OutputCrowdstrikeNextGenSiem *OutputCrowdstrikeNextGenSiem `queryParam:"inline,name=Output"`
	OutputDlS3                   *OutputDlS3                   `queryParam:"inline,name=Output"`
	OutputSecurityLake           *OutputSecurityLake           `queryParam:"inline,name=Output"`
	OutputCriblLake              *OutputCriblLake              `queryParam:"inline,name=Output"`
	OutputDiskSpool              *OutputDiskSpool              `queryParam:"inline,name=Output"`
	OutputClickHouse             *OutputClickHouse             `queryParam:"inline,name=Output"`
	OutputXsiam                  *OutputXsiam                  `queryParam:"inline,name=Output"`
	OutputNetflow                *OutputNetflow                `queryParam:"inline,name=Output"`
	OutputDynatraceHTTP          *OutputDynatraceHTTP          `queryParam:"inline,name=Output"`
	OutputDynatraceOtlp          *OutputDynatraceOtlp          `queryParam:"inline,name=Output"`
	OutputSentinelOneAiSiem      *OutputSentinelOneAiSiem      `queryParam:"inline,name=Output"`
	OutputDatabricks             *OutputDatabricks             `queryParam:"inline,name=Output"`

	Type OutputType
}

func CreateOutputDefault(defaultT OutputDefault) Output {
	typ := OutputTypeDefault

	typStr := OutputDefaultType(typ)
	defaultT.Type = typStr

	return Output{
		OutputDefault: &defaultT,
		Type:          typ,
	}
}

func CreateOutputWebhook(webhook OutputWebhook) Output {
	typ := OutputTypeWebhook

	typStr := OutputWebhookType(typ)
	webhook.Type = typStr

	return Output{
		OutputWebhook: &webhook,
		Type:          typ,
	}
}

func CreateOutputSentinel(sentinel OutputSentinel) Output {
	typ := OutputTypeSentinel

	typStr := OutputSentinelType(typ)
	sentinel.Type = typStr

	return Output{
		OutputSentinel: &sentinel,
		Type:           typ,
	}
}

func CreateOutputDevnull(devnull OutputDevnull) Output {
	typ := OutputTypeDevnull

	typStr := OutputDevnullType(typ)
	devnull.Type = typStr

	return Output{
		OutputDevnull: &devnull,
		Type:          typ,
	}
}

func CreateOutputSyslog(syslog OutputSyslog) Output {
	typ := OutputTypeSyslog

	typStr := OutputSyslogType(typ)
	syslog.Type = typStr

	return Output{
		OutputSyslog: &syslog,
		Type:         typ,
	}
}

func CreateOutputSplunk(splunk OutputSplunk) Output {
	typ := OutputTypeSplunk

	typStr := OutputSplunkType(typ)
	splunk.Type = typStr

	return Output{
		OutputSplunk: &splunk,
		Type:         typ,
	}
}

func CreateOutputSplunkLb(splunkLb OutputSplunkLb) Output {
	typ := OutputTypeSplunkLb

	typStr := OutputSplunkLbType(typ)
	splunkLb.Type = typStr

	return Output{
		OutputSplunkLb: &splunkLb,
		Type:           typ,
	}
}

func CreateOutputSplunkHec(splunkHec OutputSplunkHec) Output {
	typ := OutputTypeSplunkHec

	typStr := OutputSplunkHecType(typ)
	splunkHec.Type = typStr

	return Output{
		OutputSplunkHec: &splunkHec,
		Type:            typ,
	}
}

func CreateOutputTcpjson(tcpjson OutputTcpjson) Output {
	typ := OutputTypeTcpjson

	typStr := OutputTcpjsonType(typ)
	tcpjson.Type = typStr

	return Output{
		OutputTcpjson: &tcpjson,
		Type:          typ,
	}
}

func CreateOutputWavefront(wavefront OutputWavefront) Output {
	typ := OutputTypeWavefront

	typStr := OutputWavefrontType(typ)
	wavefront.Type = typStr

	return Output{
		OutputWavefront: &wavefront,
		Type:            typ,
	}
}

func CreateOutputSignalfx(signalfx OutputSignalfx) Output {
	typ := OutputTypeSignalfx

	typStr := OutputSignalfxType(typ)
	signalfx.Type = typStr

	return Output{
		OutputSignalfx: &signalfx,
		Type:           typ,
	}
}

func CreateOutputFilesystem(filesystem OutputFilesystem) Output {
	typ := OutputTypeFilesystem

	typStr := OutputFilesystemType(typ)
	filesystem.Type = typStr

	return Output{
		OutputFilesystem: &filesystem,
		Type:             typ,
	}
}

func CreateOutputS3(s3 OutputS3) Output {
	typ := OutputTypeS3

	typStr := OutputS3Type(typ)
	s3.Type = typStr

	return Output{
		OutputS3: &s3,
		Type:     typ,
	}
}

func CreateOutputAzureBlob(azureBlob OutputAzureBlob) Output {
	typ := OutputTypeAzureBlob

	typStr := OutputAzureBlobType(typ)
	azureBlob.Type = typStr

	return Output{
		OutputAzureBlob: &azureBlob,
		Type:            typ,
	}
}

func CreateOutputAzureDataExplorer(azureDataExplorer OutputAzureDataExplorer) Output {
	typ := OutputTypeAzureDataExplorer

	typStr := OutputAzureDataExplorerType(typ)
	azureDataExplorer.Type = typStr

	return Output{
		OutputAzureDataExplorer: &azureDataExplorer,
		Type:                    typ,
	}
}

func CreateOutputAzureLogs(azureLogs OutputAzureLogs) Output {
	typ := OutputTypeAzureLogs

	typStr := OutputAzureLogsType(typ)
	azureLogs.Type = typStr

	return Output{
		OutputAzureLogs: &azureLogs,
		Type:            typ,
	}
}

func CreateOutputKinesis(kinesis OutputKinesis) Output {
	typ := OutputTypeKinesis

	typStr := OutputKinesisType(typ)
	kinesis.Type = typStr

	return Output{
		OutputKinesis: &kinesis,
		Type:          typ,
	}
}

func CreateOutputHoneycomb(honeycomb OutputHoneycomb) Output {
	typ := OutputTypeHoneycomb

	typStr := OutputHoneycombType(typ)
	honeycomb.Type = typStr

	return Output{
		OutputHoneycomb: &honeycomb,
		Type:            typ,
	}
}

func CreateOutputAzureEventhub(azureEventhub OutputAzureEventhub) Output {
	typ := OutputTypeAzureEventhub

	typStr := OutputAzureEventhubType(typ)
	azureEventhub.Type = typStr

	return Output{
		OutputAzureEventhub: &azureEventhub,
		Type:                typ,
	}
}

func CreateOutputGoogleChronicle(googleChronicle OutputGoogleChronicle) Output {
	typ := OutputTypeGoogleChronicle

	typStr := OutputGoogleChronicleType(typ)
	googleChronicle.Type = typStr

	return Output{
		OutputGoogleChronicle: &googleChronicle,
		Type:                  typ,
	}
}

func CreateOutputGoogleCloudStorage(googleCloudStorage OutputGoogleCloudStorage) Output {
	typ := OutputTypeGoogleCloudStorage

	typStr := OutputGoogleCloudStorageType(typ)
	googleCloudStorage.Type = typStr

	return Output{
		OutputGoogleCloudStorage: &googleCloudStorage,
		Type:                     typ,
	}
}

func CreateOutputGoogleCloudLogging(googleCloudLogging OutputGoogleCloudLogging) Output {
	typ := OutputTypeGoogleCloudLogging

	typStr := OutputGoogleCloudLoggingType(typ)
	googleCloudLogging.Type = typStr

	return Output{
		OutputGoogleCloudLogging: &googleCloudLogging,
		Type:                     typ,
	}
}

func CreateOutputGooglePubsub(googlePubsub OutputGooglePubsub) Output {
	typ := OutputTypeGooglePubsub

	typStr := OutputGooglePubsubType(typ)
	googlePubsub.Type = typStr

	return Output{
		OutputGooglePubsub: &googlePubsub,
		Type:               typ,
	}
}

func CreateOutputExabeam(exabeam OutputExabeam) Output {
	typ := OutputTypeExabeam

	typStr := OutputExabeamType(typ)
	exabeam.Type = typStr

	return Output{
		OutputExabeam: &exabeam,
		Type:          typ,
	}
}

func CreateOutputKafka(kafka OutputKafka) Output {
	typ := OutputTypeKafka

	typStr := OutputKafkaType(typ)
	kafka.Type = typStr

	return Output{
		OutputKafka: &kafka,
		Type:        typ,
	}
}

func CreateOutputConfluentCloud(confluentCloud OutputConfluentCloud) Output {
	typ := OutputTypeConfluentCloud

	typStr := OutputConfluentCloudType(typ)
	confluentCloud.Type = typStr

	return Output{
		OutputConfluentCloud: &confluentCloud,
		Type:                 typ,
	}
}

func CreateOutputMsk(msk OutputMsk) Output {
	typ := OutputTypeMsk

	typStr := OutputMskType(typ)
	msk.Type = typStr

	return Output{
		OutputMsk: &msk,
		Type:      typ,
	}
}

func CreateOutputElastic(elastic OutputElastic) Output {
	typ := OutputTypeElastic

	typStr := OutputElasticType(typ)
	elastic.Type = typStr

	return Output{
		OutputElastic: &elastic,
		Type:          typ,
	}
}

func CreateOutputElasticCloud(elasticCloud OutputElasticCloud) Output {
	typ := OutputTypeElasticCloud

	typStr := OutputElasticCloudType(typ)
	elasticCloud.Type = typStr

	return Output{
		OutputElasticCloud: &elasticCloud,
		Type:               typ,
	}
}

func CreateOutputNewrelic(newrelic OutputNewrelic) Output {
	typ := OutputTypeNewrelic

	typStr := OutputNewrelicType(typ)
	newrelic.Type = typStr

	return Output{
		OutputNewrelic: &newrelic,
		Type:           typ,
	}
}

func CreateOutputNewrelicEvents(newrelicEvents OutputNewrelicEvents) Output {
	typ := OutputTypeNewrelicEvents

	typStr := OutputNewrelicEventsType(typ)
	newrelicEvents.Type = typStr

	return Output{
		OutputNewrelicEvents: &newrelicEvents,
		Type:                 typ,
	}
}

func CreateOutputInfluxdb(influxdb OutputInfluxdb) Output {
	typ := OutputTypeInfluxdb

	typStr := OutputInfluxdbType(typ)
	influxdb.Type = typStr

	return Output{
		OutputInfluxdb: &influxdb,
		Type:           typ,
	}
}

func CreateOutputCloudwatch(cloudwatch OutputCloudwatch) Output {
	typ := OutputTypeCloudwatch

	typStr := OutputCloudwatchType(typ)
	cloudwatch.Type = typStr

	return Output{
		OutputCloudwatch: &cloudwatch,
		Type:             typ,
	}
}

func CreateOutputMinio(minio OutputMinio) Output {
	typ := OutputTypeMinio

	typStr := OutputMinioType(typ)
	minio.Type = typStr

	return Output{
		OutputMinio: &minio,
		Type:        typ,
	}
}

func CreateOutputStatsd(statsd OutputStatsd) Output {
	typ := OutputTypeStatsd

	typStr := OutputStatsdType(typ)
	statsd.Type = typStr

	return Output{
		OutputStatsd: &statsd,
		Type:         typ,
	}
}

func CreateOutputStatsdExt(statsdExt OutputStatsdExt) Output {
	typ := OutputTypeStatsdExt

	typStr := OutputStatsdExtType(typ)
	statsdExt.Type = typStr

	return Output{
		OutputStatsdExt: &statsdExt,
		Type:            typ,
	}
}

func CreateOutputGraphite(graphite OutputGraphite) Output {
	typ := OutputTypeGraphite

	typStr := OutputGraphiteType(typ)
	graphite.Type = typStr

	return Output{
		OutputGraphite: &graphite,
		Type:           typ,
	}
}

func CreateOutputRouter(router OutputRouter) Output {
	typ := OutputTypeRouter

	typStr := OutputRouterType(typ)
	router.Type = typStr

	return Output{
		OutputRouter: &router,
		Type:         typ,
	}
}

func CreateOutputSns(sns OutputSns) Output {
	typ := OutputTypeSns

	typStr := OutputSnsType(typ)
	sns.Type = typStr

	return Output{
		OutputSns: &sns,
		Type:      typ,
	}
}

func CreateOutputSqs(sqs OutputSqs) Output {
	typ := OutputTypeSqs

	typStr := OutputSqsType(typ)
	sqs.Type = typStr

	return Output{
		OutputSqs: &sqs,
		Type:      typ,
	}
}

func CreateOutputSnmp(snmp OutputSnmp) Output {
	typ := OutputTypeSnmp

	typStr := OutputSnmpType(typ)
	snmp.Type = typStr

	return Output{
		OutputSnmp: &snmp,
		Type:       typ,
	}
}

func CreateOutputSumoLogic(sumoLogic OutputSumoLogic) Output {
	typ := OutputTypeSumoLogic

	typStr := OutputSumoLogicType(typ)
	sumoLogic.Type = typStr

	return Output{
		OutputSumoLogic: &sumoLogic,
		Type:            typ,
	}
}

func CreateOutputDatadog(datadog OutputDatadog) Output {
	typ := OutputTypeDatadog

	typStr := OutputDatadogType(typ)
	datadog.Type = typStr

	return Output{
		OutputDatadog: &datadog,
		Type:          typ,
	}
}

func CreateOutputGrafanaCloud(grafanaCloud OutputGrafanaCloud) Output {
	typ := OutputTypeGrafanaCloud

	return Output{
		OutputGrafanaCloud: &grafanaCloud,
		Type:               typ,
	}
}

func CreateOutputLoki(loki OutputLoki) Output {
	typ := OutputTypeLoki

	typStr := OutputLokiType(typ)
	loki.Type = typStr

	return Output{
		OutputLoki: &loki,
		Type:       typ,
	}
}

func CreateOutputPrometheus(prometheus OutputPrometheus) Output {
	typ := OutputTypePrometheus

	typStr := OutputPrometheusType(typ)
	prometheus.Type = typStr

	return Output{
		OutputPrometheus: &prometheus,
		Type:             typ,
	}
}

func CreateOutputRing(ring OutputRing) Output {
	typ := OutputTypeRing

	typStr := OutputRingType(typ)
	ring.Type = typStr

	return Output{
		OutputRing: &ring,
		Type:       typ,
	}
}

func CreateOutputOpenTelemetry(openTelemetry OutputOpenTelemetry) Output {
	typ := OutputTypeOpenTelemetry

	typStr := OutputOpenTelemetryType(typ)
	openTelemetry.Type = typStr

	return Output{
		OutputOpenTelemetry: &openTelemetry,
		Type:                typ,
	}
}

func CreateOutputServiceNow(serviceNow OutputServiceNow) Output {
	typ := OutputTypeServiceNow

	typStr := OutputServiceNowType(typ)
	serviceNow.Type = typStr

	return Output{
		OutputServiceNow: &serviceNow,
		Type:             typ,
	}
}

func CreateOutputDataset(dataset OutputDataset) Output {
	typ := OutputTypeDataset

	typStr := OutputDatasetType(typ)
	dataset.Type = typStr

	return Output{
		OutputDataset: &dataset,
		Type:          typ,
	}
}

func CreateOutputCriblTCP(criblTCP OutputCriblTCP) Output {
	typ := OutputTypeCriblTCP

	typStr := OutputCriblTCPType(typ)
	criblTCP.Type = typStr

	return Output{
		OutputCriblTCP: &criblTCP,
		Type:           typ,
	}
}

func CreateOutputCriblHTTP(criblHTTP OutputCriblHTTP) Output {
	typ := OutputTypeCriblHTTP

	typStr := OutputCriblHTTPType(typ)
	criblHTTP.Type = typStr

	return Output{
		OutputCriblHTTP: &criblHTTP,
		Type:            typ,
	}
}

func CreateOutputHumioHec(humioHec OutputHumioHec) Output {
	typ := OutputTypeHumioHec

	typStr := OutputHumioHecType(typ)
	humioHec.Type = typStr

	return Output{
		OutputHumioHec: &humioHec,
		Type:           typ,
	}
}

func CreateOutputCrowdstrikeNextGenSiem(crowdstrikeNextGenSiem OutputCrowdstrikeNextGenSiem) Output {
	typ := OutputTypeCrowdstrikeNextGenSiem

	typStr := OutputCrowdstrikeNextGenSiemType(typ)
	crowdstrikeNextGenSiem.Type = typStr

	return Output{
		OutputCrowdstrikeNextGenSiem: &crowdstrikeNextGenSiem,
		Type:                         typ,
	}
}

func CreateOutputDlS3(dlS3 OutputDlS3) Output {
	typ := OutputTypeDlS3

	typStr := OutputDlS3Type(typ)
	dlS3.Type = typStr

	return Output{
		OutputDlS3: &dlS3,
		Type:       typ,
	}
}

func CreateOutputSecurityLake(securityLake OutputSecurityLake) Output {
	typ := OutputTypeSecurityLake

	typStr := OutputSecurityLakeType(typ)
	securityLake.Type = typStr

	return Output{
		OutputSecurityLake: &securityLake,
		Type:               typ,
	}
}

func CreateOutputCriblLake(criblLake OutputCriblLake) Output {
	typ := OutputTypeCriblLake

	typStr := OutputCriblLakeType(typ)
	criblLake.Type = typStr

	return Output{
		OutputCriblLake: &criblLake,
		Type:            typ,
	}
}

func CreateOutputDiskSpool(diskSpool OutputDiskSpool) Output {
	typ := OutputTypeDiskSpool

	typStr := OutputDiskSpoolType(typ)
	diskSpool.Type = typStr

	return Output{
		OutputDiskSpool: &diskSpool,
		Type:            typ,
	}
}

func CreateOutputClickHouse(clickHouse OutputClickHouse) Output {
	typ := OutputTypeClickHouse

	typStr := OutputClickHouseType(typ)
	clickHouse.Type = typStr

	return Output{
		OutputClickHouse: &clickHouse,
		Type:             typ,
	}
}

func CreateOutputXsiam(xsiam OutputXsiam) Output {
	typ := OutputTypeXsiam

	typStr := OutputXsiamType(typ)
	xsiam.Type = typStr

	return Output{
		OutputXsiam: &xsiam,
		Type:        typ,
	}
}

func CreateOutputNetflow(netflow OutputNetflow) Output {
	typ := OutputTypeNetflow

	typStr := OutputNetflowType(typ)
	netflow.Type = typStr

	return Output{
		OutputNetflow: &netflow,
		Type:          typ,
	}
}

func CreateOutputDynatraceHTTP(dynatraceHTTP OutputDynatraceHTTP) Output {
	typ := OutputTypeDynatraceHTTP

	typStr := OutputDynatraceHTTPType(typ)
	dynatraceHTTP.Type = typStr

	return Output{
		OutputDynatraceHTTP: &dynatraceHTTP,
		Type:                typ,
	}
}

func CreateOutputDynatraceOtlp(dynatraceOtlp OutputDynatraceOtlp) Output {
	typ := OutputTypeDynatraceOtlp

	typStr := OutputDynatraceOtlpType(typ)
	dynatraceOtlp.Type = typStr

	return Output{
		OutputDynatraceOtlp: &dynatraceOtlp,
		Type:                typ,
	}
}

func CreateOutputSentinelOneAiSiem(sentinelOneAiSiem OutputSentinelOneAiSiem) Output {
	typ := OutputTypeSentinelOneAiSiem

	typStr := OutputSentinelOneAiSiemType(typ)
	sentinelOneAiSiem.Type = typStr

	return Output{
		OutputSentinelOneAiSiem: &sentinelOneAiSiem,
		Type:                    typ,
	}
}

func CreateOutputDatabricks(databricks OutputDatabricks) Output {
	typ := OutputTypeDatabricks

	typStr := OutputDatabricksType(typ)
	databricks.Type = typStr

	return Output{
		OutputDatabricks: &databricks,
		Type:             typ,
	}
}

func (u *Output) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Type string `json:"type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "default":
		outputDefault := new(OutputDefault)
		if err := utils.UnmarshalJSON(data, &outputDefault, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == default) type OutputDefault within Output: %w", string(data), err)
		}

		u.OutputDefault = outputDefault
		u.Type = OutputTypeDefault
		return nil
	case "webhook":
		outputWebhook := new(OutputWebhook)
		if err := utils.UnmarshalJSON(data, &outputWebhook, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == webhook) type OutputWebhook within Output: %w", string(data), err)
		}

		u.OutputWebhook = outputWebhook
		u.Type = OutputTypeWebhook
		return nil
	case "sentinel":
		outputSentinel := new(OutputSentinel)
		if err := utils.UnmarshalJSON(data, &outputSentinel, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sentinel) type OutputSentinel within Output: %w", string(data), err)
		}

		u.OutputSentinel = outputSentinel
		u.Type = OutputTypeSentinel
		return nil
	case "devnull":
		outputDevnull := new(OutputDevnull)
		if err := utils.UnmarshalJSON(data, &outputDevnull, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == devnull) type OutputDevnull within Output: %w", string(data), err)
		}

		u.OutputDevnull = outputDevnull
		u.Type = OutputTypeDevnull
		return nil
	case "syslog":
		outputSyslog := new(OutputSyslog)
		if err := utils.UnmarshalJSON(data, &outputSyslog, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == syslog) type OutputSyslog within Output: %w", string(data), err)
		}

		u.OutputSyslog = outputSyslog
		u.Type = OutputTypeSyslog
		return nil
	case "splunk":
		outputSplunk := new(OutputSplunk)
		if err := utils.UnmarshalJSON(data, &outputSplunk, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == splunk) type OutputSplunk within Output: %w", string(data), err)
		}

		u.OutputSplunk = outputSplunk
		u.Type = OutputTypeSplunk
		return nil
	case "splunk_lb":
		outputSplunkLb := new(OutputSplunkLb)
		if err := utils.UnmarshalJSON(data, &outputSplunkLb, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == splunk_lb) type OutputSplunkLb within Output: %w", string(data), err)
		}

		u.OutputSplunkLb = outputSplunkLb
		u.Type = OutputTypeSplunkLb
		return nil
	case "splunk_hec":
		outputSplunkHec := new(OutputSplunkHec)
		if err := utils.UnmarshalJSON(data, &outputSplunkHec, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == splunk_hec) type OutputSplunkHec within Output: %w", string(data), err)
		}

		u.OutputSplunkHec = outputSplunkHec
		u.Type = OutputTypeSplunkHec
		return nil
	case "tcpjson":
		outputTcpjson := new(OutputTcpjson)
		if err := utils.UnmarshalJSON(data, &outputTcpjson, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == tcpjson) type OutputTcpjson within Output: %w", string(data), err)
		}

		u.OutputTcpjson = outputTcpjson
		u.Type = OutputTypeTcpjson
		return nil
	case "wavefront":
		outputWavefront := new(OutputWavefront)
		if err := utils.UnmarshalJSON(data, &outputWavefront, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == wavefront) type OutputWavefront within Output: %w", string(data), err)
		}

		u.OutputWavefront = outputWavefront
		u.Type = OutputTypeWavefront
		return nil
	case "signalfx":
		outputSignalfx := new(OutputSignalfx)
		if err := utils.UnmarshalJSON(data, &outputSignalfx, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == signalfx) type OutputSignalfx within Output: %w", string(data), err)
		}

		u.OutputSignalfx = outputSignalfx
		u.Type = OutputTypeSignalfx
		return nil
	case "filesystem":
		outputFilesystem := new(OutputFilesystem)
		if err := utils.UnmarshalJSON(data, &outputFilesystem, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == filesystem) type OutputFilesystem within Output: %w", string(data), err)
		}

		u.OutputFilesystem = outputFilesystem
		u.Type = OutputTypeFilesystem
		return nil
	case "s3":
		outputS3 := new(OutputS3)
		if err := utils.UnmarshalJSON(data, &outputS3, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == s3) type OutputS3 within Output: %w", string(data), err)
		}

		u.OutputS3 = outputS3
		u.Type = OutputTypeS3
		return nil
	case "azure_blob":
		outputAzureBlob := new(OutputAzureBlob)
		if err := utils.UnmarshalJSON(data, &outputAzureBlob, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == azure_blob) type OutputAzureBlob within Output: %w", string(data), err)
		}

		u.OutputAzureBlob = outputAzureBlob
		u.Type = OutputTypeAzureBlob
		return nil
	case "azure_data_explorer":
		outputAzureDataExplorer := new(OutputAzureDataExplorer)
		if err := utils.UnmarshalJSON(data, &outputAzureDataExplorer, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == azure_data_explorer) type OutputAzureDataExplorer within Output: %w", string(data), err)
		}

		u.OutputAzureDataExplorer = outputAzureDataExplorer
		u.Type = OutputTypeAzureDataExplorer
		return nil
	case "azure_logs":
		outputAzureLogs := new(OutputAzureLogs)
		if err := utils.UnmarshalJSON(data, &outputAzureLogs, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == azure_logs) type OutputAzureLogs within Output: %w", string(data), err)
		}

		u.OutputAzureLogs = outputAzureLogs
		u.Type = OutputTypeAzureLogs
		return nil
	case "kinesis":
		outputKinesis := new(OutputKinesis)
		if err := utils.UnmarshalJSON(data, &outputKinesis, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == kinesis) type OutputKinesis within Output: %w", string(data), err)
		}

		u.OutputKinesis = outputKinesis
		u.Type = OutputTypeKinesis
		return nil
	case "honeycomb":
		outputHoneycomb := new(OutputHoneycomb)
		if err := utils.UnmarshalJSON(data, &outputHoneycomb, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == honeycomb) type OutputHoneycomb within Output: %w", string(data), err)
		}

		u.OutputHoneycomb = outputHoneycomb
		u.Type = OutputTypeHoneycomb
		return nil
	case "azure_eventhub":
		outputAzureEventhub := new(OutputAzureEventhub)
		if err := utils.UnmarshalJSON(data, &outputAzureEventhub, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == azure_eventhub) type OutputAzureEventhub within Output: %w", string(data), err)
		}

		u.OutputAzureEventhub = outputAzureEventhub
		u.Type = OutputTypeAzureEventhub
		return nil
	case "google_chronicle":
		outputGoogleChronicle := new(OutputGoogleChronicle)
		if err := utils.UnmarshalJSON(data, &outputGoogleChronicle, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == google_chronicle) type OutputGoogleChronicle within Output: %w", string(data), err)
		}

		u.OutputGoogleChronicle = outputGoogleChronicle
		u.Type = OutputTypeGoogleChronicle
		return nil
	case "google_cloud_storage":
		outputGoogleCloudStorage := new(OutputGoogleCloudStorage)
		if err := utils.UnmarshalJSON(data, &outputGoogleCloudStorage, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == google_cloud_storage) type OutputGoogleCloudStorage within Output: %w", string(data), err)
		}

		u.OutputGoogleCloudStorage = outputGoogleCloudStorage
		u.Type = OutputTypeGoogleCloudStorage
		return nil
	case "google_cloud_logging":
		outputGoogleCloudLogging := new(OutputGoogleCloudLogging)
		if err := utils.UnmarshalJSON(data, &outputGoogleCloudLogging, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == google_cloud_logging) type OutputGoogleCloudLogging within Output: %w", string(data), err)
		}

		u.OutputGoogleCloudLogging = outputGoogleCloudLogging
		u.Type = OutputTypeGoogleCloudLogging
		return nil
	case "google_pubsub":
		outputGooglePubsub := new(OutputGooglePubsub)
		if err := utils.UnmarshalJSON(data, &outputGooglePubsub, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == google_pubsub) type OutputGooglePubsub within Output: %w", string(data), err)
		}

		u.OutputGooglePubsub = outputGooglePubsub
		u.Type = OutputTypeGooglePubsub
		return nil
	case "exabeam":
		outputExabeam := new(OutputExabeam)
		if err := utils.UnmarshalJSON(data, &outputExabeam, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == exabeam) type OutputExabeam within Output: %w", string(data), err)
		}

		u.OutputExabeam = outputExabeam
		u.Type = OutputTypeExabeam
		return nil
	case "kafka":
		outputKafka := new(OutputKafka)
		if err := utils.UnmarshalJSON(data, &outputKafka, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == kafka) type OutputKafka within Output: %w", string(data), err)
		}

		u.OutputKafka = outputKafka
		u.Type = OutputTypeKafka
		return nil
	case "confluent_cloud":
		outputConfluentCloud := new(OutputConfluentCloud)
		if err := utils.UnmarshalJSON(data, &outputConfluentCloud, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == confluent_cloud) type OutputConfluentCloud within Output: %w", string(data), err)
		}

		u.OutputConfluentCloud = outputConfluentCloud
		u.Type = OutputTypeConfluentCloud
		return nil
	case "msk":
		outputMsk := new(OutputMsk)
		if err := utils.UnmarshalJSON(data, &outputMsk, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == msk) type OutputMsk within Output: %w", string(data), err)
		}

		u.OutputMsk = outputMsk
		u.Type = OutputTypeMsk
		return nil
	case "elastic":
		outputElastic := new(OutputElastic)
		if err := utils.UnmarshalJSON(data, &outputElastic, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == elastic) type OutputElastic within Output: %w", string(data), err)
		}

		u.OutputElastic = outputElastic
		u.Type = OutputTypeElastic
		return nil
	case "elastic_cloud":
		outputElasticCloud := new(OutputElasticCloud)
		if err := utils.UnmarshalJSON(data, &outputElasticCloud, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == elastic_cloud) type OutputElasticCloud within Output: %w", string(data), err)
		}

		u.OutputElasticCloud = outputElasticCloud
		u.Type = OutputTypeElasticCloud
		return nil
	case "newrelic":
		outputNewrelic := new(OutputNewrelic)
		if err := utils.UnmarshalJSON(data, &outputNewrelic, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == newrelic) type OutputNewrelic within Output: %w", string(data), err)
		}

		u.OutputNewrelic = outputNewrelic
		u.Type = OutputTypeNewrelic
		return nil
	case "newrelic_events":
		outputNewrelicEvents := new(OutputNewrelicEvents)
		if err := utils.UnmarshalJSON(data, &outputNewrelicEvents, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == newrelic_events) type OutputNewrelicEvents within Output: %w", string(data), err)
		}

		u.OutputNewrelicEvents = outputNewrelicEvents
		u.Type = OutputTypeNewrelicEvents
		return nil
	case "influxdb":
		outputInfluxdb := new(OutputInfluxdb)
		if err := utils.UnmarshalJSON(data, &outputInfluxdb, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == influxdb) type OutputInfluxdb within Output: %w", string(data), err)
		}

		u.OutputInfluxdb = outputInfluxdb
		u.Type = OutputTypeInfluxdb
		return nil
	case "cloudwatch":
		outputCloudwatch := new(OutputCloudwatch)
		if err := utils.UnmarshalJSON(data, &outputCloudwatch, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == cloudwatch) type OutputCloudwatch within Output: %w", string(data), err)
		}

		u.OutputCloudwatch = outputCloudwatch
		u.Type = OutputTypeCloudwatch
		return nil
	case "minio":
		outputMinio := new(OutputMinio)
		if err := utils.UnmarshalJSON(data, &outputMinio, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == minio) type OutputMinio within Output: %w", string(data), err)
		}

		u.OutputMinio = outputMinio
		u.Type = OutputTypeMinio
		return nil
	case "statsd":
		outputStatsd := new(OutputStatsd)
		if err := utils.UnmarshalJSON(data, &outputStatsd, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == statsd) type OutputStatsd within Output: %w", string(data), err)
		}

		u.OutputStatsd = outputStatsd
		u.Type = OutputTypeStatsd
		return nil
	case "statsd_ext":
		outputStatsdExt := new(OutputStatsdExt)
		if err := utils.UnmarshalJSON(data, &outputStatsdExt, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == statsd_ext) type OutputStatsdExt within Output: %w", string(data), err)
		}

		u.OutputStatsdExt = outputStatsdExt
		u.Type = OutputTypeStatsdExt
		return nil
	case "graphite":
		outputGraphite := new(OutputGraphite)
		if err := utils.UnmarshalJSON(data, &outputGraphite, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == graphite) type OutputGraphite within Output: %w", string(data), err)
		}

		u.OutputGraphite = outputGraphite
		u.Type = OutputTypeGraphite
		return nil
	case "router":
		outputRouter := new(OutputRouter)
		if err := utils.UnmarshalJSON(data, &outputRouter, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == router) type OutputRouter within Output: %w", string(data), err)
		}

		u.OutputRouter = outputRouter
		u.Type = OutputTypeRouter
		return nil
	case "sns":
		outputSns := new(OutputSns)
		if err := utils.UnmarshalJSON(data, &outputSns, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sns) type OutputSns within Output: %w", string(data), err)
		}

		u.OutputSns = outputSns
		u.Type = OutputTypeSns
		return nil
	case "sqs":
		outputSqs := new(OutputSqs)
		if err := utils.UnmarshalJSON(data, &outputSqs, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sqs) type OutputSqs within Output: %w", string(data), err)
		}

		u.OutputSqs = outputSqs
		u.Type = OutputTypeSqs
		return nil
	case "snmp":
		outputSnmp := new(OutputSnmp)
		if err := utils.UnmarshalJSON(data, &outputSnmp, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == snmp) type OutputSnmp within Output: %w", string(data), err)
		}

		u.OutputSnmp = outputSnmp
		u.Type = OutputTypeSnmp
		return nil
	case "sumo_logic":
		outputSumoLogic := new(OutputSumoLogic)
		if err := utils.UnmarshalJSON(data, &outputSumoLogic, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sumo_logic) type OutputSumoLogic within Output: %w", string(data), err)
		}

		u.OutputSumoLogic = outputSumoLogic
		u.Type = OutputTypeSumoLogic
		return nil
	case "datadog":
		outputDatadog := new(OutputDatadog)
		if err := utils.UnmarshalJSON(data, &outputDatadog, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == datadog) type OutputDatadog within Output: %w", string(data), err)
		}

		u.OutputDatadog = outputDatadog
		u.Type = OutputTypeDatadog
		return nil
	case "grafana_cloud":
		outputGrafanaCloud := new(OutputGrafanaCloud)
		if err := utils.UnmarshalJSON(data, &outputGrafanaCloud, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == grafana_cloud) type OutputGrafanaCloud within Output: %w", string(data), err)
		}

		u.OutputGrafanaCloud = outputGrafanaCloud
		u.Type = OutputTypeGrafanaCloud
		return nil
	case "loki":
		outputLoki := new(OutputLoki)
		if err := utils.UnmarshalJSON(data, &outputLoki, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == loki) type OutputLoki within Output: %w", string(data), err)
		}

		u.OutputLoki = outputLoki
		u.Type = OutputTypeLoki
		return nil
	case "prometheus":
		outputPrometheus := new(OutputPrometheus)
		if err := utils.UnmarshalJSON(data, &outputPrometheus, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == prometheus) type OutputPrometheus within Output: %w", string(data), err)
		}

		u.OutputPrometheus = outputPrometheus
		u.Type = OutputTypePrometheus
		return nil
	case "ring":
		outputRing := new(OutputRing)
		if err := utils.UnmarshalJSON(data, &outputRing, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == ring) type OutputRing within Output: %w", string(data), err)
		}

		u.OutputRing = outputRing
		u.Type = OutputTypeRing
		return nil
	case "open_telemetry":
		outputOpenTelemetry := new(OutputOpenTelemetry)
		if err := utils.UnmarshalJSON(data, &outputOpenTelemetry, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == open_telemetry) type OutputOpenTelemetry within Output: %w", string(data), err)
		}

		u.OutputOpenTelemetry = outputOpenTelemetry
		u.Type = OutputTypeOpenTelemetry
		return nil
	case "service_now":
		outputServiceNow := new(OutputServiceNow)
		if err := utils.UnmarshalJSON(data, &outputServiceNow, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == service_now) type OutputServiceNow within Output: %w", string(data), err)
		}

		u.OutputServiceNow = outputServiceNow
		u.Type = OutputTypeServiceNow
		return nil
	case "dataset":
		outputDataset := new(OutputDataset)
		if err := utils.UnmarshalJSON(data, &outputDataset, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == dataset) type OutputDataset within Output: %w", string(data), err)
		}

		u.OutputDataset = outputDataset
		u.Type = OutputTypeDataset
		return nil
	case "cribl_tcp":
		outputCriblTCP := new(OutputCriblTCP)
		if err := utils.UnmarshalJSON(data, &outputCriblTCP, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == cribl_tcp) type OutputCriblTCP within Output: %w", string(data), err)
		}

		u.OutputCriblTCP = outputCriblTCP
		u.Type = OutputTypeCriblTCP
		return nil
	case "cribl_http":
		outputCriblHTTP := new(OutputCriblHTTP)
		if err := utils.UnmarshalJSON(data, &outputCriblHTTP, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == cribl_http) type OutputCriblHTTP within Output: %w", string(data), err)
		}

		u.OutputCriblHTTP = outputCriblHTTP
		u.Type = OutputTypeCriblHTTP
		return nil
	case "humio_hec":
		outputHumioHec := new(OutputHumioHec)
		if err := utils.UnmarshalJSON(data, &outputHumioHec, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == humio_hec) type OutputHumioHec within Output: %w", string(data), err)
		}

		u.OutputHumioHec = outputHumioHec
		u.Type = OutputTypeHumioHec
		return nil
	case "crowdstrike_next_gen_siem":
		outputCrowdstrikeNextGenSiem := new(OutputCrowdstrikeNextGenSiem)
		if err := utils.UnmarshalJSON(data, &outputCrowdstrikeNextGenSiem, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == crowdstrike_next_gen_siem) type OutputCrowdstrikeNextGenSiem within Output: %w", string(data), err)
		}

		u.OutputCrowdstrikeNextGenSiem = outputCrowdstrikeNextGenSiem
		u.Type = OutputTypeCrowdstrikeNextGenSiem
		return nil
	case "dl_s3":
		outputDlS3 := new(OutputDlS3)
		if err := utils.UnmarshalJSON(data, &outputDlS3, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == dl_s3) type OutputDlS3 within Output: %w", string(data), err)
		}

		u.OutputDlS3 = outputDlS3
		u.Type = OutputTypeDlS3
		return nil
	case "security_lake":
		outputSecurityLake := new(OutputSecurityLake)
		if err := utils.UnmarshalJSON(data, &outputSecurityLake, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == security_lake) type OutputSecurityLake within Output: %w", string(data), err)
		}

		u.OutputSecurityLake = outputSecurityLake
		u.Type = OutputTypeSecurityLake
		return nil
	case "cribl_lake":
		outputCriblLake := new(OutputCriblLake)
		if err := utils.UnmarshalJSON(data, &outputCriblLake, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == cribl_lake) type OutputCriblLake within Output: %w", string(data), err)
		}

		u.OutputCriblLake = outputCriblLake
		u.Type = OutputTypeCriblLake
		return nil
	case "disk_spool":
		outputDiskSpool := new(OutputDiskSpool)
		if err := utils.UnmarshalJSON(data, &outputDiskSpool, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == disk_spool) type OutputDiskSpool within Output: %w", string(data), err)
		}

		u.OutputDiskSpool = outputDiskSpool
		u.Type = OutputTypeDiskSpool
		return nil
	case "click_house":
		outputClickHouse := new(OutputClickHouse)
		if err := utils.UnmarshalJSON(data, &outputClickHouse, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == click_house) type OutputClickHouse within Output: %w", string(data), err)
		}

		u.OutputClickHouse = outputClickHouse
		u.Type = OutputTypeClickHouse
		return nil
	case "xsiam":
		outputXsiam := new(OutputXsiam)
		if err := utils.UnmarshalJSON(data, &outputXsiam, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == xsiam) type OutputXsiam within Output: %w", string(data), err)
		}

		u.OutputXsiam = outputXsiam
		u.Type = OutputTypeXsiam
		return nil
	case "netflow":
		outputNetflow := new(OutputNetflow)
		if err := utils.UnmarshalJSON(data, &outputNetflow, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == netflow) type OutputNetflow within Output: %w", string(data), err)
		}

		u.OutputNetflow = outputNetflow
		u.Type = OutputTypeNetflow
		return nil
	case "dynatrace_http":
		outputDynatraceHTTP := new(OutputDynatraceHTTP)
		if err := utils.UnmarshalJSON(data, &outputDynatraceHTTP, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == dynatrace_http) type OutputDynatraceHTTP within Output: %w", string(data), err)
		}

		u.OutputDynatraceHTTP = outputDynatraceHTTP
		u.Type = OutputTypeDynatraceHTTP
		return nil
	case "dynatrace_otlp":
		outputDynatraceOtlp := new(OutputDynatraceOtlp)
		if err := utils.UnmarshalJSON(data, &outputDynatraceOtlp, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == dynatrace_otlp) type OutputDynatraceOtlp within Output: %w", string(data), err)
		}

		u.OutputDynatraceOtlp = outputDynatraceOtlp
		u.Type = OutputTypeDynatraceOtlp
		return nil
	case "sentinel_one_ai_siem":
		outputSentinelOneAiSiem := new(OutputSentinelOneAiSiem)
		if err := utils.UnmarshalJSON(data, &outputSentinelOneAiSiem, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == sentinel_one_ai_siem) type OutputSentinelOneAiSiem within Output: %w", string(data), err)
		}

		u.OutputSentinelOneAiSiem = outputSentinelOneAiSiem
		u.Type = OutputTypeSentinelOneAiSiem
		return nil
	case "databricks":
		outputDatabricks := new(OutputDatabricks)
		if err := utils.UnmarshalJSON(data, &outputDatabricks, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Type == databricks) type OutputDatabricks within Output: %w", string(data), err)
		}

		u.OutputDatabricks = outputDatabricks
		u.Type = OutputTypeDatabricks
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Output", string(data))
}

func (u Output) MarshalJSON() ([]byte, error) {
	if u.OutputDefault != nil {
		return utils.MarshalJSON(u.OutputDefault, "", true)
	}

	if u.OutputWebhook != nil {
		return utils.MarshalJSON(u.OutputWebhook, "", true)
	}

	if u.OutputSentinel != nil {
		return utils.MarshalJSON(u.OutputSentinel, "", true)
	}

	if u.OutputDevnull != nil {
		return utils.MarshalJSON(u.OutputDevnull, "", true)
	}

	if u.OutputSyslog != nil {
		return utils.MarshalJSON(u.OutputSyslog, "", true)
	}

	if u.OutputSplunk != nil {
		return utils.MarshalJSON(u.OutputSplunk, "", true)
	}

	if u.OutputSplunkLb != nil {
		return utils.MarshalJSON(u.OutputSplunkLb, "", true)
	}

	if u.OutputSplunkHec != nil {
		return utils.MarshalJSON(u.OutputSplunkHec, "", true)
	}

	if u.OutputTcpjson != nil {
		return utils.MarshalJSON(u.OutputTcpjson, "", true)
	}

	if u.OutputWavefront != nil {
		return utils.MarshalJSON(u.OutputWavefront, "", true)
	}

	if u.OutputSignalfx != nil {
		return utils.MarshalJSON(u.OutputSignalfx, "", true)
	}

	if u.OutputFilesystem != nil {
		return utils.MarshalJSON(u.OutputFilesystem, "", true)
	}

	if u.OutputS3 != nil {
		return utils.MarshalJSON(u.OutputS3, "", true)
	}

	if u.OutputAzureBlob != nil {
		return utils.MarshalJSON(u.OutputAzureBlob, "", true)
	}

	if u.OutputAzureDataExplorer != nil {
		return utils.MarshalJSON(u.OutputAzureDataExplorer, "", true)
	}

	if u.OutputAzureLogs != nil {
		return utils.MarshalJSON(u.OutputAzureLogs, "", true)
	}

	if u.OutputKinesis != nil {
		return utils.MarshalJSON(u.OutputKinesis, "", true)
	}

	if u.OutputHoneycomb != nil {
		return utils.MarshalJSON(u.OutputHoneycomb, "", true)
	}

	if u.OutputAzureEventhub != nil {
		return utils.MarshalJSON(u.OutputAzureEventhub, "", true)
	}

	if u.OutputGoogleChronicle != nil {
		return utils.MarshalJSON(u.OutputGoogleChronicle, "", true)
	}

	if u.OutputGoogleCloudStorage != nil {
		return utils.MarshalJSON(u.OutputGoogleCloudStorage, "", true)
	}

	if u.OutputGoogleCloudLogging != nil {
		return utils.MarshalJSON(u.OutputGoogleCloudLogging, "", true)
	}

	if u.OutputGooglePubsub != nil {
		return utils.MarshalJSON(u.OutputGooglePubsub, "", true)
	}

	if u.OutputExabeam != nil {
		return utils.MarshalJSON(u.OutputExabeam, "", true)
	}

	if u.OutputKafka != nil {
		return utils.MarshalJSON(u.OutputKafka, "", true)
	}

	if u.OutputConfluentCloud != nil {
		return utils.MarshalJSON(u.OutputConfluentCloud, "", true)
	}

	if u.OutputMsk != nil {
		return utils.MarshalJSON(u.OutputMsk, "", true)
	}

	if u.OutputElastic != nil {
		return utils.MarshalJSON(u.OutputElastic, "", true)
	}

	if u.OutputElasticCloud != nil {
		return utils.MarshalJSON(u.OutputElasticCloud, "", true)
	}

	if u.OutputNewrelic != nil {
		return utils.MarshalJSON(u.OutputNewrelic, "", true)
	}

	if u.OutputNewrelicEvents != nil {
		return utils.MarshalJSON(u.OutputNewrelicEvents, "", true)
	}

	if u.OutputInfluxdb != nil {
		return utils.MarshalJSON(u.OutputInfluxdb, "", true)
	}

	if u.OutputCloudwatch != nil {
		return utils.MarshalJSON(u.OutputCloudwatch, "", true)
	}

	if u.OutputMinio != nil {
		return utils.MarshalJSON(u.OutputMinio, "", true)
	}

	if u.OutputStatsd != nil {
		return utils.MarshalJSON(u.OutputStatsd, "", true)
	}

	if u.OutputStatsdExt != nil {
		return utils.MarshalJSON(u.OutputStatsdExt, "", true)
	}

	if u.OutputGraphite != nil {
		return utils.MarshalJSON(u.OutputGraphite, "", true)
	}

	if u.OutputRouter != nil {
		return utils.MarshalJSON(u.OutputRouter, "", true)
	}

	if u.OutputSns != nil {
		return utils.MarshalJSON(u.OutputSns, "", true)
	}

	if u.OutputSqs != nil {
		return utils.MarshalJSON(u.OutputSqs, "", true)
	}

	if u.OutputSnmp != nil {
		return utils.MarshalJSON(u.OutputSnmp, "", true)
	}

	if u.OutputSumoLogic != nil {
		return utils.MarshalJSON(u.OutputSumoLogic, "", true)
	}

	if u.OutputDatadog != nil {
		return utils.MarshalJSON(u.OutputDatadog, "", true)
	}

	if u.OutputGrafanaCloud != nil {
		return utils.MarshalJSON(u.OutputGrafanaCloud, "", true)
	}

	if u.OutputLoki != nil {
		return utils.MarshalJSON(u.OutputLoki, "", true)
	}

	if u.OutputPrometheus != nil {
		return utils.MarshalJSON(u.OutputPrometheus, "", true)
	}

	if u.OutputRing != nil {
		return utils.MarshalJSON(u.OutputRing, "", true)
	}

	if u.OutputOpenTelemetry != nil {
		return utils.MarshalJSON(u.OutputOpenTelemetry, "", true)
	}

	if u.OutputServiceNow != nil {
		return utils.MarshalJSON(u.OutputServiceNow, "", true)
	}

	if u.OutputDataset != nil {
		return utils.MarshalJSON(u.OutputDataset, "", true)
	}

	if u.OutputCriblTCP != nil {
		return utils.MarshalJSON(u.OutputCriblTCP, "", true)
	}

	if u.OutputCriblHTTP != nil {
		return utils.MarshalJSON(u.OutputCriblHTTP, "", true)
	}

	if u.OutputHumioHec != nil {
		return utils.MarshalJSON(u.OutputHumioHec, "", true)
	}

	if u.OutputCrowdstrikeNextGenSiem != nil {
		return utils.MarshalJSON(u.OutputCrowdstrikeNextGenSiem, "", true)
	}

	if u.OutputDlS3 != nil {
		return utils.MarshalJSON(u.OutputDlS3, "", true)
	}

	if u.OutputSecurityLake != nil {
		return utils.MarshalJSON(u.OutputSecurityLake, "", true)
	}

	if u.OutputCriblLake != nil {
		return utils.MarshalJSON(u.OutputCriblLake, "", true)
	}

	if u.OutputDiskSpool != nil {
		return utils.MarshalJSON(u.OutputDiskSpool, "", true)
	}

	if u.OutputClickHouse != nil {
		return utils.MarshalJSON(u.OutputClickHouse, "", true)
	}

	if u.OutputXsiam != nil {
		return utils.MarshalJSON(u.OutputXsiam, "", true)
	}

	if u.OutputNetflow != nil {
		return utils.MarshalJSON(u.OutputNetflow, "", true)
	}

	if u.OutputDynatraceHTTP != nil {
		return utils.MarshalJSON(u.OutputDynatraceHTTP, "", true)
	}

	if u.OutputDynatraceOtlp != nil {
		return utils.MarshalJSON(u.OutputDynatraceOtlp, "", true)
	}

	if u.OutputSentinelOneAiSiem != nil {
		return utils.MarshalJSON(u.OutputSentinelOneAiSiem, "", true)
	}

	if u.OutputDatabricks != nil {
		return utils.MarshalJSON(u.OutputDatabricks, "", true)
	}

	return nil, errors.New("could not marshal union type Output: all fields are null")
}

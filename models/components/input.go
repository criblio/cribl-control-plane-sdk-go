// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type InputUnionType string

const (
	InputUnionTypeInputCollection           InputUnionType = "InputCollection"
	InputUnionTypeInputKafka                InputUnionType = "InputKafka"
	InputUnionTypeInputMsk                  InputUnionType = "InputMsk"
	InputUnionTypeInputHTTP                 InputUnionType = "InputHttp"
	InputUnionTypeInputSplunk               InputUnionType = "InputSplunk"
	InputUnionTypeInputSplunkSearch         InputUnionType = "InputSplunkSearch"
	InputUnionTypeInputSplunkHec            InputUnionType = "InputSplunkHec"
	InputUnionTypeInputAzureBlob            InputUnionType = "InputAzureBlob"
	InputUnionTypeInputElastic              InputUnionType = "InputElastic"
	InputUnionTypeInputConfluentCloud       InputUnionType = "InputConfluentCloud"
	InputUnionTypeInputGrafana              InputUnionType = "InputGrafana"
	InputUnionTypeInputLoki                 InputUnionType = "InputLoki"
	InputUnionTypeInputPrometheusRw         InputUnionType = "InputPrometheusRw"
	InputUnionTypeInputPrometheus           InputUnionType = "InputPrometheus"
	InputUnionTypeInputEdgePrometheus       InputUnionType = "InputEdgePrometheus"
	InputUnionTypeInputOffice365Mgmt        InputUnionType = "InputOffice365Mgmt"
	InputUnionTypeInputOffice365Service     InputUnionType = "InputOffice365Service"
	InputUnionTypeInputOffice365MsgTrace    InputUnionType = "InputOffice365MsgTrace"
	InputUnionTypeInputEventhub             InputUnionType = "InputEventhub"
	InputUnionTypeInputExec                 InputUnionType = "InputExec"
	InputUnionTypeInputFirehose             InputUnionType = "InputFirehose"
	InputUnionTypeInputGooglePubsub         InputUnionType = "InputGooglePubsub"
	InputUnionTypeInputCribl                InputUnionType = "InputCribl"
	InputUnionTypeInputCriblTCP             InputUnionType = "InputCriblTcp"
	InputUnionTypeInputCriblHTTP            InputUnionType = "InputCriblHttp"
	InputUnionTypeInputCriblLakeHTTP        InputUnionType = "InputCriblLakeHttp"
	InputUnionTypeInputTcpjson              InputUnionType = "InputTcpjson"
	InputUnionTypeInputSystemMetrics        InputUnionType = "InputSystemMetrics"
	InputUnionTypeInputSystemState          InputUnionType = "InputSystemState"
	InputUnionTypeInputKubeMetrics          InputUnionType = "InputKubeMetrics"
	InputUnionTypeInputKubeLogs             InputUnionType = "InputKubeLogs"
	InputUnionTypeInputKubeEvents           InputUnionType = "InputKubeEvents"
	InputUnionTypeInputWindowsMetrics       InputUnionType = "InputWindowsMetrics"
	InputUnionTypeInputCrowdstrike          InputUnionType = "InputCrowdstrike"
	InputUnionTypeInputDatadogAgent         InputUnionType = "InputDatadogAgent"
	InputUnionTypeInputDatagen              InputUnionType = "InputDatagen"
	InputUnionTypeInputHTTPRaw              InputUnionType = "InputHttpRaw"
	InputUnionTypeInputKinesis              InputUnionType = "InputKinesis"
	InputUnionTypeInputCriblmetrics         InputUnionType = "InputCriblmetrics"
	InputUnionTypeInputMetrics              InputUnionType = "InputMetrics"
	InputUnionTypeInputS3                   InputUnionType = "InputS3"
	InputUnionTypeInputS3Inventory          InputUnionType = "InputS3Inventory"
	InputUnionTypeInputSnmp                 InputUnionType = "InputSnmp"
	InputUnionTypeInputOpenTelemetry        InputUnionType = "InputOpenTelemetry"
	InputUnionTypeInputModelDrivenTelemetry InputUnionType = "InputModelDrivenTelemetry"
	InputUnionTypeInputSqs                  InputUnionType = "InputSqs"
	InputUnionTypeInputSyslog               InputUnionType = "InputSyslog"
	InputUnionTypeInputFile                 InputUnionType = "InputFile"
	InputUnionTypeInputTCP                  InputUnionType = "InputTcp"
	InputUnionTypeInputAppscope             InputUnionType = "InputAppscope"
	InputUnionTypeInputWef                  InputUnionType = "InputWef"
	InputUnionTypeInputWinEventLogs         InputUnionType = "InputWinEventLogs"
	InputUnionTypeInputRawUDP               InputUnionType = "InputRawUdp"
	InputUnionTypeInputJournalFiles         InputUnionType = "InputJournalFiles"
	InputUnionTypeInputWiz                  InputUnionType = "InputWiz"
	InputUnionTypeInputWizWebhook           InputUnionType = "InputWizWebhook"
	InputUnionTypeInputNetflow              InputUnionType = "InputNetflow"
	InputUnionTypeInputSecurityLake         InputUnionType = "InputSecurityLake"
	InputUnionTypeInputZscalerHec           InputUnionType = "InputZscalerHec"
)

type Input struct {
	InputCollection           *InputCollection           `queryParam:"inline,name=Input"`
	InputKafka                *InputKafka                `queryParam:"inline,name=Input"`
	InputMsk                  *InputMsk                  `queryParam:"inline,name=Input"`
	InputHTTP                 *InputHTTP                 `queryParam:"inline,name=Input"`
	InputSplunk               *InputSplunk               `queryParam:"inline,name=Input"`
	InputSplunkSearch         *InputSplunkSearch         `queryParam:"inline,name=Input"`
	InputSplunkHec            *InputSplunkHec            `queryParam:"inline,name=Input"`
	InputAzureBlob            *InputAzureBlob            `queryParam:"inline,name=Input"`
	InputElastic              *InputElastic              `queryParam:"inline,name=Input"`
	InputConfluentCloud       *InputConfluentCloud       `queryParam:"inline,name=Input"`
	InputGrafana              *InputGrafana              `queryParam:"inline,name=Input"`
	InputLoki                 *InputLoki                 `queryParam:"inline,name=Input"`
	InputPrometheusRw         *InputPrometheusRw         `queryParam:"inline,name=Input"`
	InputPrometheus           *InputPrometheus           `queryParam:"inline,name=Input"`
	InputEdgePrometheus       *InputEdgePrometheus       `queryParam:"inline,name=Input"`
	InputOffice365Mgmt        *InputOffice365Mgmt        `queryParam:"inline,name=Input"`
	InputOffice365Service     *InputOffice365Service     `queryParam:"inline,name=Input"`
	InputOffice365MsgTrace    *InputOffice365MsgTrace    `queryParam:"inline,name=Input"`
	InputEventhub             *InputEventhub             `queryParam:"inline,name=Input"`
	InputExec                 *InputExec                 `queryParam:"inline,name=Input"`
	InputFirehose             *InputFirehose             `queryParam:"inline,name=Input"`
	InputGooglePubsub         *InputGooglePubsub         `queryParam:"inline,name=Input"`
	InputCribl                *InputCribl                `queryParam:"inline,name=Input"`
	InputCriblTCP             *InputCriblTCP             `queryParam:"inline,name=Input"`
	InputCriblHTTP            *InputCriblHTTP            `queryParam:"inline,name=Input"`
	InputCriblLakeHTTP        *InputCriblLakeHTTP        `queryParam:"inline,name=Input"`
	InputTcpjson              *InputTcpjson              `queryParam:"inline,name=Input"`
	InputSystemMetrics        *InputSystemMetrics        `queryParam:"inline,name=Input"`
	InputSystemState          *InputSystemState          `queryParam:"inline,name=Input"`
	InputKubeMetrics          *InputKubeMetrics          `queryParam:"inline,name=Input"`
	InputKubeLogs             *InputKubeLogs             `queryParam:"inline,name=Input"`
	InputKubeEvents           *InputKubeEvents           `queryParam:"inline,name=Input"`
	InputWindowsMetrics       *InputWindowsMetrics       `queryParam:"inline,name=Input"`
	InputCrowdstrike          *InputCrowdstrike          `queryParam:"inline,name=Input"`
	InputDatadogAgent         *InputDatadogAgent         `queryParam:"inline,name=Input"`
	InputDatagen              *InputDatagen              `queryParam:"inline,name=Input"`
	InputHTTPRaw              *InputHTTPRaw              `queryParam:"inline,name=Input"`
	InputKinesis              *InputKinesis              `queryParam:"inline,name=Input"`
	InputCriblmetrics         *InputCriblmetrics         `queryParam:"inline,name=Input"`
	InputMetrics              *InputMetrics              `queryParam:"inline,name=Input"`
	InputS3                   *InputS3                   `queryParam:"inline,name=Input"`
	InputS3Inventory          *InputS3Inventory          `queryParam:"inline,name=Input"`
	InputSnmp                 *InputSnmp                 `queryParam:"inline,name=Input"`
	InputOpenTelemetry        *InputOpenTelemetry        `queryParam:"inline,name=Input"`
	InputModelDrivenTelemetry *InputModelDrivenTelemetry `queryParam:"inline,name=Input"`
	InputSqs                  *InputSqs                  `queryParam:"inline,name=Input"`
	InputSyslog               *InputSyslog               `queryParam:"inline,name=Input"`
	InputFile                 *InputFile                 `queryParam:"inline,name=Input"`
	InputTCP                  *InputTCP                  `queryParam:"inline,name=Input"`
	InputAppscope             *InputAppscope             `queryParam:"inline,name=Input"`
	InputWef                  *InputWef                  `queryParam:"inline,name=Input"`
	InputWinEventLogs         *InputWinEventLogs         `queryParam:"inline,name=Input"`
	InputRawUDP               *InputRawUDP               `queryParam:"inline,name=Input"`
	InputJournalFiles         *InputJournalFiles         `queryParam:"inline,name=Input"`
	InputWiz                  *InputWiz                  `queryParam:"inline,name=Input"`
	InputWizWebhook           *InputWizWebhook           `queryParam:"inline,name=Input"`
	InputNetflow              *InputNetflow              `queryParam:"inline,name=Input"`
	InputSecurityLake         *InputSecurityLake         `queryParam:"inline,name=Input"`
	InputZscalerHec           *InputZscalerHec           `queryParam:"inline,name=Input"`

	Type InputUnionType
}

func CreateInputInputCollection(inputCollection InputCollection) Input {
	typ := InputUnionTypeInputCollection

	return Input{
		InputCollection: &inputCollection,
		Type:            typ,
	}
}

func CreateInputInputKafka(inputKafka InputKafka) Input {
	typ := InputUnionTypeInputKafka

	return Input{
		InputKafka: &inputKafka,
		Type:       typ,
	}
}

func CreateInputInputMsk(inputMsk InputMsk) Input {
	typ := InputUnionTypeInputMsk

	return Input{
		InputMsk: &inputMsk,
		Type:     typ,
	}
}

func CreateInputInputHTTP(inputHTTP InputHTTP) Input {
	typ := InputUnionTypeInputHTTP

	return Input{
		InputHTTP: &inputHTTP,
		Type:      typ,
	}
}

func CreateInputInputSplunk(inputSplunk InputSplunk) Input {
	typ := InputUnionTypeInputSplunk

	return Input{
		InputSplunk: &inputSplunk,
		Type:        typ,
	}
}

func CreateInputInputSplunkSearch(inputSplunkSearch InputSplunkSearch) Input {
	typ := InputUnionTypeInputSplunkSearch

	return Input{
		InputSplunkSearch: &inputSplunkSearch,
		Type:              typ,
	}
}

func CreateInputInputSplunkHec(inputSplunkHec InputSplunkHec) Input {
	typ := InputUnionTypeInputSplunkHec

	return Input{
		InputSplunkHec: &inputSplunkHec,
		Type:           typ,
	}
}

func CreateInputInputAzureBlob(inputAzureBlob InputAzureBlob) Input {
	typ := InputUnionTypeInputAzureBlob

	return Input{
		InputAzureBlob: &inputAzureBlob,
		Type:           typ,
	}
}

func CreateInputInputElastic(inputElastic InputElastic) Input {
	typ := InputUnionTypeInputElastic

	return Input{
		InputElastic: &inputElastic,
		Type:         typ,
	}
}

func CreateInputInputConfluentCloud(inputConfluentCloud InputConfluentCloud) Input {
	typ := InputUnionTypeInputConfluentCloud

	return Input{
		InputConfluentCloud: &inputConfluentCloud,
		Type:                typ,
	}
}

func CreateInputInputGrafana(inputGrafana InputGrafana) Input {
	typ := InputUnionTypeInputGrafana

	return Input{
		InputGrafana: &inputGrafana,
		Type:         typ,
	}
}

func CreateInputInputLoki(inputLoki InputLoki) Input {
	typ := InputUnionTypeInputLoki

	return Input{
		InputLoki: &inputLoki,
		Type:      typ,
	}
}

func CreateInputInputPrometheusRw(inputPrometheusRw InputPrometheusRw) Input {
	typ := InputUnionTypeInputPrometheusRw

	return Input{
		InputPrometheusRw: &inputPrometheusRw,
		Type:              typ,
	}
}

func CreateInputInputPrometheus(inputPrometheus InputPrometheus) Input {
	typ := InputUnionTypeInputPrometheus

	return Input{
		InputPrometheus: &inputPrometheus,
		Type:            typ,
	}
}

func CreateInputInputEdgePrometheus(inputEdgePrometheus InputEdgePrometheus) Input {
	typ := InputUnionTypeInputEdgePrometheus

	return Input{
		InputEdgePrometheus: &inputEdgePrometheus,
		Type:                typ,
	}
}

func CreateInputInputOffice365Mgmt(inputOffice365Mgmt InputOffice365Mgmt) Input {
	typ := InputUnionTypeInputOffice365Mgmt

	return Input{
		InputOffice365Mgmt: &inputOffice365Mgmt,
		Type:               typ,
	}
}

func CreateInputInputOffice365Service(inputOffice365Service InputOffice365Service) Input {
	typ := InputUnionTypeInputOffice365Service

	return Input{
		InputOffice365Service: &inputOffice365Service,
		Type:                  typ,
	}
}

func CreateInputInputOffice365MsgTrace(inputOffice365MsgTrace InputOffice365MsgTrace) Input {
	typ := InputUnionTypeInputOffice365MsgTrace

	return Input{
		InputOffice365MsgTrace: &inputOffice365MsgTrace,
		Type:                   typ,
	}
}

func CreateInputInputEventhub(inputEventhub InputEventhub) Input {
	typ := InputUnionTypeInputEventhub

	return Input{
		InputEventhub: &inputEventhub,
		Type:          typ,
	}
}

func CreateInputInputExec(inputExec InputExec) Input {
	typ := InputUnionTypeInputExec

	return Input{
		InputExec: &inputExec,
		Type:      typ,
	}
}

func CreateInputInputFirehose(inputFirehose InputFirehose) Input {
	typ := InputUnionTypeInputFirehose

	return Input{
		InputFirehose: &inputFirehose,
		Type:          typ,
	}
}

func CreateInputInputGooglePubsub(inputGooglePubsub InputGooglePubsub) Input {
	typ := InputUnionTypeInputGooglePubsub

	return Input{
		InputGooglePubsub: &inputGooglePubsub,
		Type:              typ,
	}
}

func CreateInputInputCribl(inputCribl InputCribl) Input {
	typ := InputUnionTypeInputCribl

	return Input{
		InputCribl: &inputCribl,
		Type:       typ,
	}
}

func CreateInputInputCriblTCP(inputCriblTCP InputCriblTCP) Input {
	typ := InputUnionTypeInputCriblTCP

	return Input{
		InputCriblTCP: &inputCriblTCP,
		Type:          typ,
	}
}

func CreateInputInputCriblHTTP(inputCriblHTTP InputCriblHTTP) Input {
	typ := InputUnionTypeInputCriblHTTP

	return Input{
		InputCriblHTTP: &inputCriblHTTP,
		Type:           typ,
	}
}

func CreateInputInputCriblLakeHTTP(inputCriblLakeHTTP InputCriblLakeHTTP) Input {
	typ := InputUnionTypeInputCriblLakeHTTP

	return Input{
		InputCriblLakeHTTP: &inputCriblLakeHTTP,
		Type:               typ,
	}
}

func CreateInputInputTcpjson(inputTcpjson InputTcpjson) Input {
	typ := InputUnionTypeInputTcpjson

	return Input{
		InputTcpjson: &inputTcpjson,
		Type:         typ,
	}
}

func CreateInputInputSystemMetrics(inputSystemMetrics InputSystemMetrics) Input {
	typ := InputUnionTypeInputSystemMetrics

	return Input{
		InputSystemMetrics: &inputSystemMetrics,
		Type:               typ,
	}
}

func CreateInputInputSystemState(inputSystemState InputSystemState) Input {
	typ := InputUnionTypeInputSystemState

	return Input{
		InputSystemState: &inputSystemState,
		Type:             typ,
	}
}

func CreateInputInputKubeMetrics(inputKubeMetrics InputKubeMetrics) Input {
	typ := InputUnionTypeInputKubeMetrics

	return Input{
		InputKubeMetrics: &inputKubeMetrics,
		Type:             typ,
	}
}

func CreateInputInputKubeLogs(inputKubeLogs InputKubeLogs) Input {
	typ := InputUnionTypeInputKubeLogs

	return Input{
		InputKubeLogs: &inputKubeLogs,
		Type:          typ,
	}
}

func CreateInputInputKubeEvents(inputKubeEvents InputKubeEvents) Input {
	typ := InputUnionTypeInputKubeEvents

	return Input{
		InputKubeEvents: &inputKubeEvents,
		Type:            typ,
	}
}

func CreateInputInputWindowsMetrics(inputWindowsMetrics InputWindowsMetrics) Input {
	typ := InputUnionTypeInputWindowsMetrics

	return Input{
		InputWindowsMetrics: &inputWindowsMetrics,
		Type:                typ,
	}
}

func CreateInputInputCrowdstrike(inputCrowdstrike InputCrowdstrike) Input {
	typ := InputUnionTypeInputCrowdstrike

	return Input{
		InputCrowdstrike: &inputCrowdstrike,
		Type:             typ,
	}
}

func CreateInputInputDatadogAgent(inputDatadogAgent InputDatadogAgent) Input {
	typ := InputUnionTypeInputDatadogAgent

	return Input{
		InputDatadogAgent: &inputDatadogAgent,
		Type:              typ,
	}
}

func CreateInputInputDatagen(inputDatagen InputDatagen) Input {
	typ := InputUnionTypeInputDatagen

	return Input{
		InputDatagen: &inputDatagen,
		Type:         typ,
	}
}

func CreateInputInputHTTPRaw(inputHTTPRaw InputHTTPRaw) Input {
	typ := InputUnionTypeInputHTTPRaw

	return Input{
		InputHTTPRaw: &inputHTTPRaw,
		Type:         typ,
	}
}

func CreateInputInputKinesis(inputKinesis InputKinesis) Input {
	typ := InputUnionTypeInputKinesis

	return Input{
		InputKinesis: &inputKinesis,
		Type:         typ,
	}
}

func CreateInputInputCriblmetrics(inputCriblmetrics InputCriblmetrics) Input {
	typ := InputUnionTypeInputCriblmetrics

	return Input{
		InputCriblmetrics: &inputCriblmetrics,
		Type:              typ,
	}
}

func CreateInputInputMetrics(inputMetrics InputMetrics) Input {
	typ := InputUnionTypeInputMetrics

	return Input{
		InputMetrics: &inputMetrics,
		Type:         typ,
	}
}

func CreateInputInputS3(inputS3 InputS3) Input {
	typ := InputUnionTypeInputS3

	return Input{
		InputS3: &inputS3,
		Type:    typ,
	}
}

func CreateInputInputS3Inventory(inputS3Inventory InputS3Inventory) Input {
	typ := InputUnionTypeInputS3Inventory

	return Input{
		InputS3Inventory: &inputS3Inventory,
		Type:             typ,
	}
}

func CreateInputInputSnmp(inputSnmp InputSnmp) Input {
	typ := InputUnionTypeInputSnmp

	return Input{
		InputSnmp: &inputSnmp,
		Type:      typ,
	}
}

func CreateInputInputOpenTelemetry(inputOpenTelemetry InputOpenTelemetry) Input {
	typ := InputUnionTypeInputOpenTelemetry

	return Input{
		InputOpenTelemetry: &inputOpenTelemetry,
		Type:               typ,
	}
}

func CreateInputInputModelDrivenTelemetry(inputModelDrivenTelemetry InputModelDrivenTelemetry) Input {
	typ := InputUnionTypeInputModelDrivenTelemetry

	return Input{
		InputModelDrivenTelemetry: &inputModelDrivenTelemetry,
		Type:                      typ,
	}
}

func CreateInputInputSqs(inputSqs InputSqs) Input {
	typ := InputUnionTypeInputSqs

	return Input{
		InputSqs: &inputSqs,
		Type:     typ,
	}
}

func CreateInputInputSyslog(inputSyslog InputSyslog) Input {
	typ := InputUnionTypeInputSyslog

	return Input{
		InputSyslog: &inputSyslog,
		Type:        typ,
	}
}

func CreateInputInputFile(inputFile InputFile) Input {
	typ := InputUnionTypeInputFile

	return Input{
		InputFile: &inputFile,
		Type:      typ,
	}
}

func CreateInputInputTCP(inputTCP InputTCP) Input {
	typ := InputUnionTypeInputTCP

	return Input{
		InputTCP: &inputTCP,
		Type:     typ,
	}
}

func CreateInputInputAppscope(inputAppscope InputAppscope) Input {
	typ := InputUnionTypeInputAppscope

	return Input{
		InputAppscope: &inputAppscope,
		Type:          typ,
	}
}

func CreateInputInputWef(inputWef InputWef) Input {
	typ := InputUnionTypeInputWef

	return Input{
		InputWef: &inputWef,
		Type:     typ,
	}
}

func CreateInputInputWinEventLogs(inputWinEventLogs InputWinEventLogs) Input {
	typ := InputUnionTypeInputWinEventLogs

	return Input{
		InputWinEventLogs: &inputWinEventLogs,
		Type:              typ,
	}
}

func CreateInputInputRawUDP(inputRawUDP InputRawUDP) Input {
	typ := InputUnionTypeInputRawUDP

	return Input{
		InputRawUDP: &inputRawUDP,
		Type:        typ,
	}
}

func CreateInputInputJournalFiles(inputJournalFiles InputJournalFiles) Input {
	typ := InputUnionTypeInputJournalFiles

	return Input{
		InputJournalFiles: &inputJournalFiles,
		Type:              typ,
	}
}

func CreateInputInputWiz(inputWiz InputWiz) Input {
	typ := InputUnionTypeInputWiz

	return Input{
		InputWiz: &inputWiz,
		Type:     typ,
	}
}

func CreateInputInputWizWebhook(inputWizWebhook InputWizWebhook) Input {
	typ := InputUnionTypeInputWizWebhook

	return Input{
		InputWizWebhook: &inputWizWebhook,
		Type:            typ,
	}
}

func CreateInputInputNetflow(inputNetflow InputNetflow) Input {
	typ := InputUnionTypeInputNetflow

	return Input{
		InputNetflow: &inputNetflow,
		Type:         typ,
	}
}

func CreateInputInputSecurityLake(inputSecurityLake InputSecurityLake) Input {
	typ := InputUnionTypeInputSecurityLake

	return Input{
		InputSecurityLake: &inputSecurityLake,
		Type:              typ,
	}
}

func CreateInputInputZscalerHec(inputZscalerHec InputZscalerHec) Input {
	typ := InputUnionTypeInputZscalerHec

	return Input{
		InputZscalerHec: &inputZscalerHec,
		Type:            typ,
	}
}

func (u *Input) UnmarshalJSON(data []byte) error {

	var inputMsk InputMsk = InputMsk{}
	if err := utils.UnmarshalJSON(data, &inputMsk, "", true, nil); err == nil {
		u.InputMsk = &inputMsk
		u.Type = InputUnionTypeInputMsk
		return nil
	}

	var inputWiz InputWiz = InputWiz{}
	if err := utils.UnmarshalJSON(data, &inputWiz, "", true, nil); err == nil {
		u.InputWiz = &inputWiz
		u.Type = InputUnionTypeInputWiz
		return nil
	}

	var inputKafka InputKafka = InputKafka{}
	if err := utils.UnmarshalJSON(data, &inputKafka, "", true, nil); err == nil {
		u.InputKafka = &inputKafka
		u.Type = InputUnionTypeInputKafka
		return nil
	}

	var inputConfluentCloud InputConfluentCloud = InputConfluentCloud{}
	if err := utils.UnmarshalJSON(data, &inputConfluentCloud, "", true, nil); err == nil {
		u.InputConfluentCloud = &inputConfluentCloud
		u.Type = InputUnionTypeInputConfluentCloud
		return nil
	}

	var inputOffice365Mgmt InputOffice365Mgmt = InputOffice365Mgmt{}
	if err := utils.UnmarshalJSON(data, &inputOffice365Mgmt, "", true, nil); err == nil {
		u.InputOffice365Mgmt = &inputOffice365Mgmt
		u.Type = InputUnionTypeInputOffice365Mgmt
		return nil
	}

	var inputOffice365Service InputOffice365Service = InputOffice365Service{}
	if err := utils.UnmarshalJSON(data, &inputOffice365Service, "", true, nil); err == nil {
		u.InputOffice365Service = &inputOffice365Service
		u.Type = InputUnionTypeInputOffice365Service
		return nil
	}

	var inputEventhub InputEventhub = InputEventhub{}
	if err := utils.UnmarshalJSON(data, &inputEventhub, "", true, nil); err == nil {
		u.InputEventhub = &inputEventhub
		u.Type = InputUnionTypeInputEventhub
		return nil
	}

	var inputKinesis InputKinesis = InputKinesis{}
	if err := utils.UnmarshalJSON(data, &inputKinesis, "", true, nil); err == nil {
		u.InputKinesis = &inputKinesis
		u.Type = InputUnionTypeInputKinesis
		return nil
	}

	var inputJournalFiles InputJournalFiles = InputJournalFiles{}
	if err := utils.UnmarshalJSON(data, &inputJournalFiles, "", true, nil); err == nil {
		u.InputJournalFiles = &inputJournalFiles
		u.Type = InputUnionTypeInputJournalFiles
		return nil
	}

	var inputHTTP InputHTTP = InputHTTP{}
	if err := utils.UnmarshalJSON(data, &inputHTTP, "", true, nil); err == nil {
		u.InputHTTP = &inputHTTP
		u.Type = InputUnionTypeInputHTTP
		return nil
	}

	var inputSplunk InputSplunk = InputSplunk{}
	if err := utils.UnmarshalJSON(data, &inputSplunk, "", true, nil); err == nil {
		u.InputSplunk = &inputSplunk
		u.Type = InputUnionTypeInputSplunk
		return nil
	}

	var inputSplunkSearch InputSplunkSearch = InputSplunkSearch{}
	if err := utils.UnmarshalJSON(data, &inputSplunkSearch, "", true, nil); err == nil {
		u.InputSplunkSearch = &inputSplunkSearch
		u.Type = InputUnionTypeInputSplunkSearch
		return nil
	}

	var inputSplunkHec InputSplunkHec = InputSplunkHec{}
	if err := utils.UnmarshalJSON(data, &inputSplunkHec, "", true, nil); err == nil {
		u.InputSplunkHec = &inputSplunkHec
		u.Type = InputUnionTypeInputSplunkHec
		return nil
	}

	var inputAzureBlob InputAzureBlob = InputAzureBlob{}
	if err := utils.UnmarshalJSON(data, &inputAzureBlob, "", true, nil); err == nil {
		u.InputAzureBlob = &inputAzureBlob
		u.Type = InputUnionTypeInputAzureBlob
		return nil
	}

	var inputElastic InputElastic = InputElastic{}
	if err := utils.UnmarshalJSON(data, &inputElastic, "", true, nil); err == nil {
		u.InputElastic = &inputElastic
		u.Type = InputUnionTypeInputElastic
		return nil
	}

	var inputLoki InputLoki = InputLoki{}
	if err := utils.UnmarshalJSON(data, &inputLoki, "", true, nil); err == nil {
		u.InputLoki = &inputLoki
		u.Type = InputUnionTypeInputLoki
		return nil
	}

	var inputPrometheusRw InputPrometheusRw = InputPrometheusRw{}
	if err := utils.UnmarshalJSON(data, &inputPrometheusRw, "", true, nil); err == nil {
		u.InputPrometheusRw = &inputPrometheusRw
		u.Type = InputUnionTypeInputPrometheusRw
		return nil
	}

	var inputExec InputExec = InputExec{}
	if err := utils.UnmarshalJSON(data, &inputExec, "", true, nil); err == nil {
		u.InputExec = &inputExec
		u.Type = InputUnionTypeInputExec
		return nil
	}

	var inputFirehose InputFirehose = InputFirehose{}
	if err := utils.UnmarshalJSON(data, &inputFirehose, "", true, nil); err == nil {
		u.InputFirehose = &inputFirehose
		u.Type = InputUnionTypeInputFirehose
		return nil
	}

	var inputGooglePubsub InputGooglePubsub = InputGooglePubsub{}
	if err := utils.UnmarshalJSON(data, &inputGooglePubsub, "", true, nil); err == nil {
		u.InputGooglePubsub = &inputGooglePubsub
		u.Type = InputUnionTypeInputGooglePubsub
		return nil
	}

	var inputCriblTCP InputCriblTCP = InputCriblTCP{}
	if err := utils.UnmarshalJSON(data, &inputCriblTCP, "", true, nil); err == nil {
		u.InputCriblTCP = &inputCriblTCP
		u.Type = InputUnionTypeInputCriblTCP
		return nil
	}

	var inputCriblHTTP InputCriblHTTP = InputCriblHTTP{}
	if err := utils.UnmarshalJSON(data, &inputCriblHTTP, "", true, nil); err == nil {
		u.InputCriblHTTP = &inputCriblHTTP
		u.Type = InputUnionTypeInputCriblHTTP
		return nil
	}

	var inputCriblLakeHTTP InputCriblLakeHTTP = InputCriblLakeHTTP{}
	if err := utils.UnmarshalJSON(data, &inputCriblLakeHTTP, "", true, nil); err == nil {
		u.InputCriblLakeHTTP = &inputCriblLakeHTTP
		u.Type = InputUnionTypeInputCriblLakeHTTP
		return nil
	}

	var inputTcpjson InputTcpjson = InputTcpjson{}
	if err := utils.UnmarshalJSON(data, &inputTcpjson, "", true, nil); err == nil {
		u.InputTcpjson = &inputTcpjson
		u.Type = InputUnionTypeInputTcpjson
		return nil
	}

	var inputCrowdstrike InputCrowdstrike = InputCrowdstrike{}
	if err := utils.UnmarshalJSON(data, &inputCrowdstrike, "", true, nil); err == nil {
		u.InputCrowdstrike = &inputCrowdstrike
		u.Type = InputUnionTypeInputCrowdstrike
		return nil
	}

	var inputDatadogAgent InputDatadogAgent = InputDatadogAgent{}
	if err := utils.UnmarshalJSON(data, &inputDatadogAgent, "", true, nil); err == nil {
		u.InputDatadogAgent = &inputDatadogAgent
		u.Type = InputUnionTypeInputDatadogAgent
		return nil
	}

	var inputDatagen InputDatagen = InputDatagen{}
	if err := utils.UnmarshalJSON(data, &inputDatagen, "", true, nil); err == nil {
		u.InputDatagen = &inputDatagen
		u.Type = InputUnionTypeInputDatagen
		return nil
	}

	var inputHTTPRaw InputHTTPRaw = InputHTTPRaw{}
	if err := utils.UnmarshalJSON(data, &inputHTTPRaw, "", true, nil); err == nil {
		u.InputHTTPRaw = &inputHTTPRaw
		u.Type = InputUnionTypeInputHTTPRaw
		return nil
	}

	var inputS3 InputS3 = InputS3{}
	if err := utils.UnmarshalJSON(data, &inputS3, "", true, nil); err == nil {
		u.InputS3 = &inputS3
		u.Type = InputUnionTypeInputS3
		return nil
	}

	var inputS3Inventory InputS3Inventory = InputS3Inventory{}
	if err := utils.UnmarshalJSON(data, &inputS3Inventory, "", true, nil); err == nil {
		u.InputS3Inventory = &inputS3Inventory
		u.Type = InputUnionTypeInputS3Inventory
		return nil
	}

	var inputSqs InputSqs = InputSqs{}
	if err := utils.UnmarshalJSON(data, &inputSqs, "", true, nil); err == nil {
		u.InputSqs = &inputSqs
		u.Type = InputUnionTypeInputSqs
		return nil
	}

	var inputTCP InputTCP = InputTCP{}
	if err := utils.UnmarshalJSON(data, &inputTCP, "", true, nil); err == nil {
		u.InputTCP = &inputTCP
		u.Type = InputUnionTypeInputTCP
		return nil
	}

	var inputWef InputWef = InputWef{}
	if err := utils.UnmarshalJSON(data, &inputWef, "", true, nil); err == nil {
		u.InputWef = &inputWef
		u.Type = InputUnionTypeInputWef
		return nil
	}

	var inputWinEventLogs InputWinEventLogs = InputWinEventLogs{}
	if err := utils.UnmarshalJSON(data, &inputWinEventLogs, "", true, nil); err == nil {
		u.InputWinEventLogs = &inputWinEventLogs
		u.Type = InputUnionTypeInputWinEventLogs
		return nil
	}

	var inputRawUDP InputRawUDP = InputRawUDP{}
	if err := utils.UnmarshalJSON(data, &inputRawUDP, "", true, nil); err == nil {
		u.InputRawUDP = &inputRawUDP
		u.Type = InputUnionTypeInputRawUDP
		return nil
	}

	var inputWizWebhook InputWizWebhook = InputWizWebhook{}
	if err := utils.UnmarshalJSON(data, &inputWizWebhook, "", true, nil); err == nil {
		u.InputWizWebhook = &inputWizWebhook
		u.Type = InputUnionTypeInputWizWebhook
		return nil
	}

	var inputSecurityLake InputSecurityLake = InputSecurityLake{}
	if err := utils.UnmarshalJSON(data, &inputSecurityLake, "", true, nil); err == nil {
		u.InputSecurityLake = &inputSecurityLake
		u.Type = InputUnionTypeInputSecurityLake
		return nil
	}

	var inputZscalerHec InputZscalerHec = InputZscalerHec{}
	if err := utils.UnmarshalJSON(data, &inputZscalerHec, "", true, nil); err == nil {
		u.InputZscalerHec = &inputZscalerHec
		u.Type = InputUnionTypeInputZscalerHec
		return nil
	}

	var inputPrometheus InputPrometheus = InputPrometheus{}
	if err := utils.UnmarshalJSON(data, &inputPrometheus, "", true, nil); err == nil {
		u.InputPrometheus = &inputPrometheus
		u.Type = InputUnionTypeInputPrometheus
		return nil
	}

	var inputEdgePrometheus InputEdgePrometheus = InputEdgePrometheus{}
	if err := utils.UnmarshalJSON(data, &inputEdgePrometheus, "", true, nil); err == nil {
		u.InputEdgePrometheus = &inputEdgePrometheus
		u.Type = InputUnionTypeInputEdgePrometheus
		return nil
	}

	var inputOffice365MsgTrace InputOffice365MsgTrace = InputOffice365MsgTrace{}
	if err := utils.UnmarshalJSON(data, &inputOffice365MsgTrace, "", true, nil); err == nil {
		u.InputOffice365MsgTrace = &inputOffice365MsgTrace
		u.Type = InputUnionTypeInputOffice365MsgTrace
		return nil
	}

	var inputCribl InputCribl = InputCribl{}
	if err := utils.UnmarshalJSON(data, &inputCribl, "", true, nil); err == nil {
		u.InputCribl = &inputCribl
		u.Type = InputUnionTypeInputCribl
		return nil
	}

	var inputSystemMetrics InputSystemMetrics = InputSystemMetrics{}
	if err := utils.UnmarshalJSON(data, &inputSystemMetrics, "", true, nil); err == nil {
		u.InputSystemMetrics = &inputSystemMetrics
		u.Type = InputUnionTypeInputSystemMetrics
		return nil
	}

	var inputSystemState InputSystemState = InputSystemState{}
	if err := utils.UnmarshalJSON(data, &inputSystemState, "", true, nil); err == nil {
		u.InputSystemState = &inputSystemState
		u.Type = InputUnionTypeInputSystemState
		return nil
	}

	var inputKubeMetrics InputKubeMetrics = InputKubeMetrics{}
	if err := utils.UnmarshalJSON(data, &inputKubeMetrics, "", true, nil); err == nil {
		u.InputKubeMetrics = &inputKubeMetrics
		u.Type = InputUnionTypeInputKubeMetrics
		return nil
	}

	var inputKubeLogs InputKubeLogs = InputKubeLogs{}
	if err := utils.UnmarshalJSON(data, &inputKubeLogs, "", true, nil); err == nil {
		u.InputKubeLogs = &inputKubeLogs
		u.Type = InputUnionTypeInputKubeLogs
		return nil
	}

	var inputKubeEvents InputKubeEvents = InputKubeEvents{}
	if err := utils.UnmarshalJSON(data, &inputKubeEvents, "", true, nil); err == nil {
		u.InputKubeEvents = &inputKubeEvents
		u.Type = InputUnionTypeInputKubeEvents
		return nil
	}

	var inputWindowsMetrics InputWindowsMetrics = InputWindowsMetrics{}
	if err := utils.UnmarshalJSON(data, &inputWindowsMetrics, "", true, nil); err == nil {
		u.InputWindowsMetrics = &inputWindowsMetrics
		u.Type = InputUnionTypeInputWindowsMetrics
		return nil
	}

	var inputCriblmetrics InputCriblmetrics = InputCriblmetrics{}
	if err := utils.UnmarshalJSON(data, &inputCriblmetrics, "", true, nil); err == nil {
		u.InputCriblmetrics = &inputCriblmetrics
		u.Type = InputUnionTypeInputCriblmetrics
		return nil
	}

	var inputMetrics InputMetrics = InputMetrics{}
	if err := utils.UnmarshalJSON(data, &inputMetrics, "", true, nil); err == nil {
		u.InputMetrics = &inputMetrics
		u.Type = InputUnionTypeInputMetrics
		return nil
	}

	var inputSnmp InputSnmp = InputSnmp{}
	if err := utils.UnmarshalJSON(data, &inputSnmp, "", true, nil); err == nil {
		u.InputSnmp = &inputSnmp
		u.Type = InputUnionTypeInputSnmp
		return nil
	}

	var inputOpenTelemetry InputOpenTelemetry = InputOpenTelemetry{}
	if err := utils.UnmarshalJSON(data, &inputOpenTelemetry, "", true, nil); err == nil {
		u.InputOpenTelemetry = &inputOpenTelemetry
		u.Type = InputUnionTypeInputOpenTelemetry
		return nil
	}

	var inputModelDrivenTelemetry InputModelDrivenTelemetry = InputModelDrivenTelemetry{}
	if err := utils.UnmarshalJSON(data, &inputModelDrivenTelemetry, "", true, nil); err == nil {
		u.InputModelDrivenTelemetry = &inputModelDrivenTelemetry
		u.Type = InputUnionTypeInputModelDrivenTelemetry
		return nil
	}

	var inputFile InputFile = InputFile{}
	if err := utils.UnmarshalJSON(data, &inputFile, "", true, nil); err == nil {
		u.InputFile = &inputFile
		u.Type = InputUnionTypeInputFile
		return nil
	}

	var inputAppscope InputAppscope = InputAppscope{}
	if err := utils.UnmarshalJSON(data, &inputAppscope, "", true, nil); err == nil {
		u.InputAppscope = &inputAppscope
		u.Type = InputUnionTypeInputAppscope
		return nil
	}

	var inputNetflow InputNetflow = InputNetflow{}
	if err := utils.UnmarshalJSON(data, &inputNetflow, "", true, nil); err == nil {
		u.InputNetflow = &inputNetflow
		u.Type = InputUnionTypeInputNetflow
		return nil
	}

	var inputCollection InputCollection = InputCollection{}
	if err := utils.UnmarshalJSON(data, &inputCollection, "", true, nil); err == nil {
		u.InputCollection = &inputCollection
		u.Type = InputUnionTypeInputCollection
		return nil
	}

	var inputGrafana InputGrafana = InputGrafana{}
	if err := utils.UnmarshalJSON(data, &inputGrafana, "", true, nil); err == nil {
		u.InputGrafana = &inputGrafana
		u.Type = InputUnionTypeInputGrafana
		return nil
	}

	var inputSyslog InputSyslog = InputSyslog{}
	if err := utils.UnmarshalJSON(data, &inputSyslog, "", true, nil); err == nil {
		u.InputSyslog = &inputSyslog
		u.Type = InputUnionTypeInputSyslog
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Input", string(data))
}

func (u Input) MarshalJSON() ([]byte, error) {
	if u.InputCollection != nil {
		return utils.MarshalJSON(u.InputCollection, "", true)
	}

	if u.InputKafka != nil {
		return utils.MarshalJSON(u.InputKafka, "", true)
	}

	if u.InputMsk != nil {
		return utils.MarshalJSON(u.InputMsk, "", true)
	}

	if u.InputHTTP != nil {
		return utils.MarshalJSON(u.InputHTTP, "", true)
	}

	if u.InputSplunk != nil {
		return utils.MarshalJSON(u.InputSplunk, "", true)
	}

	if u.InputSplunkSearch != nil {
		return utils.MarshalJSON(u.InputSplunkSearch, "", true)
	}

	if u.InputSplunkHec != nil {
		return utils.MarshalJSON(u.InputSplunkHec, "", true)
	}

	if u.InputAzureBlob != nil {
		return utils.MarshalJSON(u.InputAzureBlob, "", true)
	}

	if u.InputElastic != nil {
		return utils.MarshalJSON(u.InputElastic, "", true)
	}

	if u.InputConfluentCloud != nil {
		return utils.MarshalJSON(u.InputConfluentCloud, "", true)
	}

	if u.InputGrafana != nil {
		return utils.MarshalJSON(u.InputGrafana, "", true)
	}

	if u.InputLoki != nil {
		return utils.MarshalJSON(u.InputLoki, "", true)
	}

	if u.InputPrometheusRw != nil {
		return utils.MarshalJSON(u.InputPrometheusRw, "", true)
	}

	if u.InputPrometheus != nil {
		return utils.MarshalJSON(u.InputPrometheus, "", true)
	}

	if u.InputEdgePrometheus != nil {
		return utils.MarshalJSON(u.InputEdgePrometheus, "", true)
	}

	if u.InputOffice365Mgmt != nil {
		return utils.MarshalJSON(u.InputOffice365Mgmt, "", true)
	}

	if u.InputOffice365Service != nil {
		return utils.MarshalJSON(u.InputOffice365Service, "", true)
	}

	if u.InputOffice365MsgTrace != nil {
		return utils.MarshalJSON(u.InputOffice365MsgTrace, "", true)
	}

	if u.InputEventhub != nil {
		return utils.MarshalJSON(u.InputEventhub, "", true)
	}

	if u.InputExec != nil {
		return utils.MarshalJSON(u.InputExec, "", true)
	}

	if u.InputFirehose != nil {
		return utils.MarshalJSON(u.InputFirehose, "", true)
	}

	if u.InputGooglePubsub != nil {
		return utils.MarshalJSON(u.InputGooglePubsub, "", true)
	}

	if u.InputCribl != nil {
		return utils.MarshalJSON(u.InputCribl, "", true)
	}

	if u.InputCriblTCP != nil {
		return utils.MarshalJSON(u.InputCriblTCP, "", true)
	}

	if u.InputCriblHTTP != nil {
		return utils.MarshalJSON(u.InputCriblHTTP, "", true)
	}

	if u.InputCriblLakeHTTP != nil {
		return utils.MarshalJSON(u.InputCriblLakeHTTP, "", true)
	}

	if u.InputTcpjson != nil {
		return utils.MarshalJSON(u.InputTcpjson, "", true)
	}

	if u.InputSystemMetrics != nil {
		return utils.MarshalJSON(u.InputSystemMetrics, "", true)
	}

	if u.InputSystemState != nil {
		return utils.MarshalJSON(u.InputSystemState, "", true)
	}

	if u.InputKubeMetrics != nil {
		return utils.MarshalJSON(u.InputKubeMetrics, "", true)
	}

	if u.InputKubeLogs != nil {
		return utils.MarshalJSON(u.InputKubeLogs, "", true)
	}

	if u.InputKubeEvents != nil {
		return utils.MarshalJSON(u.InputKubeEvents, "", true)
	}

	if u.InputWindowsMetrics != nil {
		return utils.MarshalJSON(u.InputWindowsMetrics, "", true)
	}

	if u.InputCrowdstrike != nil {
		return utils.MarshalJSON(u.InputCrowdstrike, "", true)
	}

	if u.InputDatadogAgent != nil {
		return utils.MarshalJSON(u.InputDatadogAgent, "", true)
	}

	if u.InputDatagen != nil {
		return utils.MarshalJSON(u.InputDatagen, "", true)
	}

	if u.InputHTTPRaw != nil {
		return utils.MarshalJSON(u.InputHTTPRaw, "", true)
	}

	if u.InputKinesis != nil {
		return utils.MarshalJSON(u.InputKinesis, "", true)
	}

	if u.InputCriblmetrics != nil {
		return utils.MarshalJSON(u.InputCriblmetrics, "", true)
	}

	if u.InputMetrics != nil {
		return utils.MarshalJSON(u.InputMetrics, "", true)
	}

	if u.InputS3 != nil {
		return utils.MarshalJSON(u.InputS3, "", true)
	}

	if u.InputS3Inventory != nil {
		return utils.MarshalJSON(u.InputS3Inventory, "", true)
	}

	if u.InputSnmp != nil {
		return utils.MarshalJSON(u.InputSnmp, "", true)
	}

	if u.InputOpenTelemetry != nil {
		return utils.MarshalJSON(u.InputOpenTelemetry, "", true)
	}

	if u.InputModelDrivenTelemetry != nil {
		return utils.MarshalJSON(u.InputModelDrivenTelemetry, "", true)
	}

	if u.InputSqs != nil {
		return utils.MarshalJSON(u.InputSqs, "", true)
	}

	if u.InputSyslog != nil {
		return utils.MarshalJSON(u.InputSyslog, "", true)
	}

	if u.InputFile != nil {
		return utils.MarshalJSON(u.InputFile, "", true)
	}

	if u.InputTCP != nil {
		return utils.MarshalJSON(u.InputTCP, "", true)
	}

	if u.InputAppscope != nil {
		return utils.MarshalJSON(u.InputAppscope, "", true)
	}

	if u.InputWef != nil {
		return utils.MarshalJSON(u.InputWef, "", true)
	}

	if u.InputWinEventLogs != nil {
		return utils.MarshalJSON(u.InputWinEventLogs, "", true)
	}

	if u.InputRawUDP != nil {
		return utils.MarshalJSON(u.InputRawUDP, "", true)
	}

	if u.InputJournalFiles != nil {
		return utils.MarshalJSON(u.InputJournalFiles, "", true)
	}

	if u.InputWiz != nil {
		return utils.MarshalJSON(u.InputWiz, "", true)
	}

	if u.InputWizWebhook != nil {
		return utils.MarshalJSON(u.InputWizWebhook, "", true)
	}

	if u.InputNetflow != nil {
		return utils.MarshalJSON(u.InputNetflow, "", true)
	}

	if u.InputSecurityLake != nil {
		return utils.MarshalJSON(u.InputSecurityLake, "", true)
	}

	if u.InputZscalerHec != nil {
		return utils.MarshalJSON(u.InputZscalerHec, "", true)
	}

	return nil, errors.New("could not marshal union type Input: all fields are null")
}

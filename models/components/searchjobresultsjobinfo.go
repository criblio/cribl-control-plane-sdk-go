// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type EarliestType string

const (
	EarliestTypeStr    EarliestType = "str"
	EarliestTypeNumber EarliestType = "number"
)

type Earliest struct {
	Str    *string  `queryParam:"inline,name=earliest"`
	Number *float64 `queryParam:"inline,name=earliest"`

	Type EarliestType
}

func CreateEarliestStr(str string) Earliest {
	typ := EarliestTypeStr

	return Earliest{
		Str:  &str,
		Type: typ,
	}
}

func CreateEarliestNumber(number float64) Earliest {
	typ := EarliestTypeNumber

	return Earliest{
		Number: &number,
		Type:   typ,
	}
}

func (u *Earliest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = EarliestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = EarliestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Earliest", string(data))
}

func (u Earliest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type Earliest: all fields are null")
}

type LatestType string

const (
	LatestTypeStr    LatestType = "str"
	LatestTypeNumber LatestType = "number"
)

type Latest struct {
	Str    *string  `queryParam:"inline,name=latest"`
	Number *float64 `queryParam:"inline,name=latest"`

	Type LatestType
}

func CreateLatestStr(str string) Latest {
	typ := LatestTypeStr

	return Latest{
		Str:  &str,
		Type: typ,
	}
}

func CreateLatestNumber(number float64) Latest {
	typ := LatestTypeNumber

	return Latest{
		Number: &number,
		Type:   typ,
	}
}

func (u *Latest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = LatestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = LatestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Latest", string(data))
}

func (u Latest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type Latest: all fields are null")
}

type SearchJobResultsJobInfoStatus string

const (
	SearchJobResultsJobInfoStatusFailed    SearchJobResultsJobInfoStatus = "failed"
	SearchJobResultsJobInfoStatusNew       SearchJobResultsJobInfoStatus = "new"
	SearchJobResultsJobInfoStatusRunning   SearchJobResultsJobInfoStatus = "running"
	SearchJobResultsJobInfoStatusCompleted SearchJobResultsJobInfoStatus = "completed"
	SearchJobResultsJobInfoStatusCanceled  SearchJobResultsJobInfoStatus = "canceled"
	SearchJobResultsJobInfoStatusQueued    SearchJobResultsJobInfoStatus = "queued"
)

func (e SearchJobResultsJobInfoStatus) ToPointer() *SearchJobResultsJobInfoStatus {
	return &e
}

type SearchJobResultsJobInfo struct {
	ID            string                        `json:"id"`
	Query         string                        `json:"query"`
	Earliest      *Earliest                     `json:"earliest,omitempty"`
	Latest        *Latest                       `json:"latest,omitempty"`
	TimeCreated   float64                       `json:"timeCreated"`
	TimeStarted   *float64                      `json:"timeStarted,omitempty"`
	TimeCompleted *float64                      `json:"timeCompleted,omitempty"`
	Status        SearchJobResultsJobInfoStatus `json:"status"`
}

func (s *SearchJobResultsJobInfo) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *SearchJobResultsJobInfo) GetQuery() string {
	if s == nil {
		return ""
	}
	return s.Query
}

func (s *SearchJobResultsJobInfo) GetEarliest() *Earliest {
	if s == nil {
		return nil
	}
	return s.Earliest
}

func (s *SearchJobResultsJobInfo) GetLatest() *Latest {
	if s == nil {
		return nil
	}
	return s.Latest
}

func (s *SearchJobResultsJobInfo) GetTimeCreated() float64 {
	if s == nil {
		return 0.0
	}
	return s.TimeCreated
}

func (s *SearchJobResultsJobInfo) GetTimeStarted() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeStarted
}

func (s *SearchJobResultsJobInfo) GetTimeCompleted() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeCompleted
}

func (s *SearchJobResultsJobInfo) GetStatus() SearchJobResultsJobInfoStatus {
	if s == nil {
		return SearchJobResultsJobInfoStatus("")
	}
	return s.Status
}

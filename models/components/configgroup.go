// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Git struct {
	Commit       *string  `json:"commit,omitempty"`
	LocalChanges *float64 `json:"localChanges,omitempty"`
	Log          []Commit `json:"log,omitempty"`
}

func (g *Git) GetCommit() *string {
	if g == nil {
		return nil
	}
	return g.Commit
}

func (g *Git) GetLocalChanges() *float64 {
	if g == nil {
		return nil
	}
	return g.LocalChanges
}

func (g *Git) GetLog() []Commit {
	if g == nil {
		return nil
	}
	return g.Log
}

type ConfigGroupType string

const (
	ConfigGroupTypeLakeAccess ConfigGroupType = "lake_access"
)

func (e ConfigGroupType) ToPointer() *ConfigGroupType {
	return &e
}
func (e *ConfigGroupType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "lake_access":
		*e = ConfigGroupType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfigGroupType: %v", v)
	}
}

type ConfigGroup struct {
	Cloud                   *ConfigGroupCloud    `json:"cloud,omitempty"`
	ConfigVersion           *string              `json:"configVersion,omitempty"`
	DeployingWorkerCount    *float64             `json:"deployingWorkerCount,omitempty"`
	Description             *string              `json:"description,omitempty"`
	EstimatedIngestRate     *float64             `json:"estimatedIngestRate,omitempty"`
	Git                     *Git                 `json:"git,omitempty"`
	ID                      string               `json:"id"`
	IncompatibleWorkerCount *float64             `json:"incompatibleWorkerCount,omitempty"`
	Inherits                *string              `json:"inherits,omitempty"`
	IsFleet                 *bool                `json:"isFleet,omitempty"`
	IsSearch                *bool                `json:"isSearch,omitempty"`
	LookupDeployments       []ConfigGroupLookups `json:"lookupDeployments,omitempty"`
	MaxWorkerAge            *string              `json:"maxWorkerAge,omitempty"`
	Name                    *string              `json:"name,omitempty"`
	OnPrem                  *bool                `json:"onPrem,omitempty"`
	Provisioned             *bool                `json:"provisioned,omitempty"`
	Streamtags              []string             `json:"streamtags,omitempty"`
	Tags                    *string              `json:"tags,omitempty"`
	Type                    *ConfigGroupType     `json:"type,omitempty"`
	UpgradeVersion          *string              `json:"upgradeVersion,omitempty"`
	WorkerCount             *float64             `json:"workerCount,omitempty"`
	WorkerRemoteAccess      *bool                `json:"workerRemoteAccess,omitempty"`
}

func (c *ConfigGroup) GetCloud() *ConfigGroupCloud {
	if c == nil {
		return nil
	}
	return c.Cloud
}

func (c *ConfigGroup) GetConfigVersion() *string {
	if c == nil {
		return nil
	}
	return c.ConfigVersion
}

func (c *ConfigGroup) GetDeployingWorkerCount() *float64 {
	if c == nil {
		return nil
	}
	return c.DeployingWorkerCount
}

func (c *ConfigGroup) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ConfigGroup) GetEstimatedIngestRate() *float64 {
	if c == nil {
		return nil
	}
	return c.EstimatedIngestRate
}

func (c *ConfigGroup) GetGit() *Git {
	if c == nil {
		return nil
	}
	return c.Git
}

func (c *ConfigGroup) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *ConfigGroup) GetIncompatibleWorkerCount() *float64 {
	if c == nil {
		return nil
	}
	return c.IncompatibleWorkerCount
}

func (c *ConfigGroup) GetInherits() *string {
	if c == nil {
		return nil
	}
	return c.Inherits
}

func (c *ConfigGroup) GetIsFleet() *bool {
	if c == nil {
		return nil
	}
	return c.IsFleet
}

func (c *ConfigGroup) GetIsSearch() *bool {
	if c == nil {
		return nil
	}
	return c.IsSearch
}

func (c *ConfigGroup) GetLookupDeployments() []ConfigGroupLookups {
	if c == nil {
		return nil
	}
	return c.LookupDeployments
}

func (c *ConfigGroup) GetMaxWorkerAge() *string {
	if c == nil {
		return nil
	}
	return c.MaxWorkerAge
}

func (c *ConfigGroup) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ConfigGroup) GetOnPrem() *bool {
	if c == nil {
		return nil
	}
	return c.OnPrem
}

func (c *ConfigGroup) GetProvisioned() *bool {
	if c == nil {
		return nil
	}
	return c.Provisioned
}

func (c *ConfigGroup) GetStreamtags() []string {
	if c == nil {
		return nil
	}
	return c.Streamtags
}

func (c *ConfigGroup) GetTags() *string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *ConfigGroup) GetType() *ConfigGroupType {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ConfigGroup) GetUpgradeVersion() *string {
	if c == nil {
		return nil
	}
	return c.UpgradeVersion
}

func (c *ConfigGroup) GetWorkerCount() *float64 {
	if c == nil {
		return nil
	}
	return c.WorkerCount
}

func (c *ConfigGroup) GetWorkerRemoteAccess() *bool {
	if c == nil {
		return nil
	}
	return c.WorkerRemoteAccess
}

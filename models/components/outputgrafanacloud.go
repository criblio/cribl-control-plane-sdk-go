// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type OutputGrafanaCloudType string

const (
	OutputGrafanaCloudTypeGrafanaCloud OutputGrafanaCloudType = "grafana_cloud"
)

func (e OutputGrafanaCloudType) ToPointer() *OutputGrafanaCloudType {
	return &e
}
func (e *OutputGrafanaCloudType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grafana_cloud":
		*e = OutputGrafanaCloudType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudType: %v", v)
	}
}

// OutputGrafanaCloudMessageFormat - Format to use when sending logs to Loki (Protobuf or JSON)
type OutputGrafanaCloudMessageFormat string

const (
	OutputGrafanaCloudMessageFormatProtobuf OutputGrafanaCloudMessageFormat = "protobuf"
	OutputGrafanaCloudMessageFormatJSON     OutputGrafanaCloudMessageFormat = "json"
)

func (e OutputGrafanaCloudMessageFormat) ToPointer() *OutputGrafanaCloudMessageFormat {
	return &e
}
func (e *OutputGrafanaCloudMessageFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "protobuf":
		fallthrough
	case "json":
		*e = OutputGrafanaCloudMessageFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudMessageFormat: %v", v)
	}
}

type OutputGrafanaCloudLabel struct {
	Name  *string `default:"" json:"name"`
	Value string  `json:"value"`
}

func (o OutputGrafanaCloudLabel) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputGrafanaCloudLabel) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputGrafanaCloudLabel) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OutputGrafanaCloudLabel) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type OutputGrafanaCloudPrometheusAuthAuthenticationType string

const (
	OutputGrafanaCloudPrometheusAuthAuthenticationTypeNone              OutputGrafanaCloudPrometheusAuthAuthenticationType = "none"
	OutputGrafanaCloudPrometheusAuthAuthenticationTypeToken             OutputGrafanaCloudPrometheusAuthAuthenticationType = "token"
	OutputGrafanaCloudPrometheusAuthAuthenticationTypeTextSecret        OutputGrafanaCloudPrometheusAuthAuthenticationType = "textSecret"
	OutputGrafanaCloudPrometheusAuthAuthenticationTypeBasic             OutputGrafanaCloudPrometheusAuthAuthenticationType = "basic"
	OutputGrafanaCloudPrometheusAuthAuthenticationTypeCredentialsSecret OutputGrafanaCloudPrometheusAuthAuthenticationType = "credentialsSecret"
)

func (e OutputGrafanaCloudPrometheusAuthAuthenticationType) ToPointer() *OutputGrafanaCloudPrometheusAuthAuthenticationType {
	return &e
}
func (e *OutputGrafanaCloudPrometheusAuthAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		*e = OutputGrafanaCloudPrometheusAuthAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudPrometheusAuthAuthenticationType: %v", v)
	}
}

type OutputGrafanaCloudPrometheusAuth struct {
	AuthType *OutputGrafanaCloudPrometheusAuthAuthenticationType `default:"basic" json:"authType"`
	// Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
	Token *string `json:"token,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// Username for authentication
	Username *string `json:"username,omitempty"`
	// Password (API key in Grafana Cloud domain) for authentication
	Password *string `json:"password,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
}

func (o OutputGrafanaCloudPrometheusAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputGrafanaCloudPrometheusAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputGrafanaCloudPrometheusAuth) GetAuthType() *OutputGrafanaCloudPrometheusAuthAuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *OutputGrafanaCloudPrometheusAuth) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *OutputGrafanaCloudPrometheusAuth) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *OutputGrafanaCloudPrometheusAuth) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *OutputGrafanaCloudPrometheusAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *OutputGrafanaCloudPrometheusAuth) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

type OutputGrafanaCloudLokiAuthAuthenticationType string

const (
	OutputGrafanaCloudLokiAuthAuthenticationTypeNone              OutputGrafanaCloudLokiAuthAuthenticationType = "none"
	OutputGrafanaCloudLokiAuthAuthenticationTypeToken             OutputGrafanaCloudLokiAuthAuthenticationType = "token"
	OutputGrafanaCloudLokiAuthAuthenticationTypeTextSecret        OutputGrafanaCloudLokiAuthAuthenticationType = "textSecret"
	OutputGrafanaCloudLokiAuthAuthenticationTypeBasic             OutputGrafanaCloudLokiAuthAuthenticationType = "basic"
	OutputGrafanaCloudLokiAuthAuthenticationTypeCredentialsSecret OutputGrafanaCloudLokiAuthAuthenticationType = "credentialsSecret"
)

func (e OutputGrafanaCloudLokiAuthAuthenticationType) ToPointer() *OutputGrafanaCloudLokiAuthAuthenticationType {
	return &e
}
func (e *OutputGrafanaCloudLokiAuthAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		*e = OutputGrafanaCloudLokiAuthAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudLokiAuthAuthenticationType: %v", v)
	}
}

type OutputGrafanaCloudLokiAuth struct {
	AuthType *OutputGrafanaCloudLokiAuthAuthenticationType `default:"basic" json:"authType"`
	// Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. Example: <your-username>:<your-api-key>
	Token *string `json:"token,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// Username for authentication
	Username *string `json:"username,omitempty"`
	// Password (API key in Grafana Cloud domain) for authentication
	Password *string `json:"password,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
}

func (o OutputGrafanaCloudLokiAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputGrafanaCloudLokiAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputGrafanaCloudLokiAuth) GetAuthType() *OutputGrafanaCloudLokiAuthAuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *OutputGrafanaCloudLokiAuth) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *OutputGrafanaCloudLokiAuth) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *OutputGrafanaCloudLokiAuth) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *OutputGrafanaCloudLokiAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *OutputGrafanaCloudLokiAuth) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

type OutputGrafanaCloudExtraHTTPHeader struct {
	Name  *string `json:"name,omitempty"`
	Value string  `json:"value"`
}

func (o *OutputGrafanaCloudExtraHTTPHeader) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OutputGrafanaCloudExtraHTTPHeader) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OutputGrafanaCloudFailedRequestLoggingMode - Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
type OutputGrafanaCloudFailedRequestLoggingMode string

const (
	OutputGrafanaCloudFailedRequestLoggingModePayload           OutputGrafanaCloudFailedRequestLoggingMode = "payload"
	OutputGrafanaCloudFailedRequestLoggingModePayloadAndHeaders OutputGrafanaCloudFailedRequestLoggingMode = "payloadAndHeaders"
	OutputGrafanaCloudFailedRequestLoggingModeNone              OutputGrafanaCloudFailedRequestLoggingMode = "none"
)

func (e OutputGrafanaCloudFailedRequestLoggingMode) ToPointer() *OutputGrafanaCloudFailedRequestLoggingMode {
	return &e
}
func (e *OutputGrafanaCloudFailedRequestLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payload":
		fallthrough
	case "payloadAndHeaders":
		fallthrough
	case "none":
		*e = OutputGrafanaCloudFailedRequestLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudFailedRequestLoggingMode: %v", v)
	}
}

type OutputGrafanaCloudResponseRetrySetting struct {
	// The HTTP response status code that will trigger retries
	HTTPStatus float64 `json:"httpStatus"`
	// How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
	InitialBackoff *float64 `default:"1000" json:"initialBackoff"`
	// Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
	BackoffRate *float64 `default:"2" json:"backoffRate"`
	// The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
	MaxBackoff *float64 `default:"10000" json:"maxBackoff"`
}

func (o OutputGrafanaCloudResponseRetrySetting) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputGrafanaCloudResponseRetrySetting) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputGrafanaCloudResponseRetrySetting) GetHTTPStatus() float64 {
	if o == nil {
		return 0.0
	}
	return o.HTTPStatus
}

func (o *OutputGrafanaCloudResponseRetrySetting) GetInitialBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialBackoff
}

func (o *OutputGrafanaCloudResponseRetrySetting) GetBackoffRate() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffRate
}

func (o *OutputGrafanaCloudResponseRetrySetting) GetMaxBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBackoff
}

type OutputGrafanaCloudTimeoutRetrySettings struct {
	TimeoutRetry *bool `default:"false" json:"timeoutRetry"`
	// How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
	InitialBackoff *float64 `default:"1000" json:"initialBackoff"`
	// Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
	BackoffRate *float64 `default:"2" json:"backoffRate"`
	// The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
	MaxBackoff *float64 `default:"10000" json:"maxBackoff"`
}

func (o OutputGrafanaCloudTimeoutRetrySettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputGrafanaCloudTimeoutRetrySettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputGrafanaCloudTimeoutRetrySettings) GetTimeoutRetry() *bool {
	if o == nil {
		return nil
	}
	return o.TimeoutRetry
}

func (o *OutputGrafanaCloudTimeoutRetrySettings) GetInitialBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialBackoff
}

func (o *OutputGrafanaCloudTimeoutRetrySettings) GetBackoffRate() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffRate
}

func (o *OutputGrafanaCloudTimeoutRetrySettings) GetMaxBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBackoff
}

// OutputGrafanaCloudBackpressureBehavior - How to handle events when all receivers are exerting backpressure
type OutputGrafanaCloudBackpressureBehavior string

const (
	OutputGrafanaCloudBackpressureBehaviorBlock OutputGrafanaCloudBackpressureBehavior = "block"
	OutputGrafanaCloudBackpressureBehaviorDrop  OutputGrafanaCloudBackpressureBehavior = "drop"
	OutputGrafanaCloudBackpressureBehaviorQueue OutputGrafanaCloudBackpressureBehavior = "queue"
)

func (e OutputGrafanaCloudBackpressureBehavior) ToPointer() *OutputGrafanaCloudBackpressureBehavior {
	return &e
}
func (e *OutputGrafanaCloudBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		fallthrough
	case "queue":
		*e = OutputGrafanaCloudBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudBackpressureBehavior: %v", v)
	}
}

// OutputGrafanaCloudCompression - Codec to use to compress the persisted data
type OutputGrafanaCloudCompression string

const (
	OutputGrafanaCloudCompressionNone OutputGrafanaCloudCompression = "none"
	OutputGrafanaCloudCompressionGzip OutputGrafanaCloudCompression = "gzip"
)

func (e OutputGrafanaCloudCompression) ToPointer() *OutputGrafanaCloudCompression {
	return &e
}
func (e *OutputGrafanaCloudCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputGrafanaCloudCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudCompression: %v", v)
	}
}

// OutputGrafanaCloudQueueFullBehavior - How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputGrafanaCloudQueueFullBehavior string

const (
	OutputGrafanaCloudQueueFullBehaviorBlock OutputGrafanaCloudQueueFullBehavior = "block"
	OutputGrafanaCloudQueueFullBehaviorDrop  OutputGrafanaCloudQueueFullBehavior = "drop"
)

func (e OutputGrafanaCloudQueueFullBehavior) ToPointer() *OutputGrafanaCloudQueueFullBehavior {
	return &e
}
func (e *OutputGrafanaCloudQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputGrafanaCloudQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudQueueFullBehavior: %v", v)
	}
}

// OutputGrafanaCloudMode - In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
type OutputGrafanaCloudMode string

const (
	OutputGrafanaCloudModeError        OutputGrafanaCloudMode = "error"
	OutputGrafanaCloudModeBackpressure OutputGrafanaCloudMode = "backpressure"
	OutputGrafanaCloudModeAlways       OutputGrafanaCloudMode = "always"
)

func (e OutputGrafanaCloudMode) ToPointer() *OutputGrafanaCloudMode {
	return &e
}
func (e *OutputGrafanaCloudMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "backpressure":
		fallthrough
	case "always":
		*e = OutputGrafanaCloudMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGrafanaCloudMode: %v", v)
	}
}

type OutputGrafanaCloudPqControls struct {
}

type OutputGrafanaCloud struct {
	// Unique ID for this output
	ID   *string                `json:"id,omitempty"`
	Type OutputGrafanaCloudType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// The endpoint to send logs to, such as https://logs-prod-us-central1.grafana.net
	LokiURL *string `json:"lokiUrl,omitempty"`
	// The remote_write endpoint to send Prometheus metrics to, such as https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
	PrometheusURL *string `json:"prometheusUrl,omitempty"`
	// Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event.
	Message *string `json:"message,omitempty"`
	// Format to use when sending logs to Loki (Protobuf or JSON)
	MessageFormat *OutputGrafanaCloudMessageFormat `default:"protobuf" json:"messageFormat"`
	// List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field. Example: '__labels: {host: "cribl.io", level: "error"}'
	Labels []OutputGrafanaCloudLabel `json:"labels,omitempty"`
	// JavaScript expression that can be used to rename metrics. For example, name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name. You can access event fields' values via __e.<fieldName>.
	MetricRenameExpr *string                           `default:"name.replace(/[^a-zA-Z0-9_]/g, '_')" json:"metricRenameExpr"`
	PrometheusAuth   *OutputGrafanaCloudPrometheusAuth `json:"prometheusAuth,omitempty"`
	LokiAuth         *OutputGrafanaCloudLokiAuth       `json:"lokiAuth,omitempty"`
	// Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order.
	Concurrency *float64 `default:"1" json:"concurrency"`
	// Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
	MaxPayloadSizeKB *float64 `default:"4096" json:"maxPayloadSizeKB"`
	// Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
	MaxPayloadEvents *float64 `default:"0" json:"maxPayloadEvents"`
	// Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
	//         Enabled by default. When this setting is also present in TLS Settings (Client Side),
	//         that value will take precedence.
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Amount of time, in seconds, to wait for a request to complete before canceling it
	TimeoutSec *float64 `default:"30" json:"timeoutSec"`
	// Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order.
	FlushPeriodSec *float64 `default:"15" json:"flushPeriodSec"`
	// Headers to add to all events
	ExtraHTTPHeaders []OutputGrafanaCloudExtraHTTPHeader `json:"extraHttpHeaders,omitempty"`
	// Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
	UseRoundRobinDNS *bool `default:"false" json:"useRoundRobinDns"`
	// Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
	FailedRequestLoggingMode *OutputGrafanaCloudFailedRequestLoggingMode `default:"none" json:"failedRequestLoggingMode"`
	// List of headers that are safe to log in plain text
	SafeHeaders []string `json:"safeHeaders,omitempty"`
	// Add structured metadata fields from __structuredMetadata to each log. Key-value pairs must be strings.
	SendStructuredMetadata *bool `default:"false" json:"sendStructuredMetadata"`
	// Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)
	ResponseRetrySettings []OutputGrafanaCloudResponseRetrySetting `json:"responseRetrySettings,omitempty"`
	TimeoutRetrySettings  *OutputGrafanaCloudTimeoutRetrySettings  `json:"timeoutRetrySettings,omitempty"`
	// Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
	ResponseHonorRetryAfterHeader *bool `default:"false" json:"responseHonorRetryAfterHeader"`
	// How to handle events when all receivers are exerting backpressure
	OnBackpressure *OutputGrafanaCloudBackpressureBehavior `default:"block" json:"onBackpressure"`
	Description    *string                                 `json:"description,omitempty"`
	// Compress the payload body before sending. Applies only to JSON payloads; the Protobuf variant for both Prometheus and Loki are snappy-compressed by default.
	Compress *bool `default:"true" json:"compress"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)
	PqMaxFileSize *string `default:"1 MB" json:"pqMaxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `default:"5GB" json:"pqMaxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `default:"$CRIBL_HOME/state/queues" json:"pqPath"`
	// Codec to use to compress the persisted data
	PqCompress *OutputGrafanaCloudCompression `default:"none" json:"pqCompress"`
	// How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputGrafanaCloudQueueFullBehavior `default:"block" json:"pqOnBackpressure"`
	// In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem.
	PqMode     *OutputGrafanaCloudMode       `default:"error" json:"pqMode"`
	PqControls *OutputGrafanaCloudPqControls `json:"pqControls,omitempty"`
}

func (o OutputGrafanaCloud) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputGrafanaCloud) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputGrafanaCloud) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OutputGrafanaCloud) GetType() OutputGrafanaCloudType {
	if o == nil {
		return OutputGrafanaCloudType("")
	}
	return o.Type
}

func (o *OutputGrafanaCloud) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputGrafanaCloud) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputGrafanaCloud) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputGrafanaCloud) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputGrafanaCloud) GetLokiURL() *string {
	if o == nil {
		return nil
	}
	return o.LokiURL
}

func (o *OutputGrafanaCloud) GetPrometheusURL() *string {
	if o == nil {
		return nil
	}
	return o.PrometheusURL
}

func (o *OutputGrafanaCloud) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *OutputGrafanaCloud) GetMessageFormat() *OutputGrafanaCloudMessageFormat {
	if o == nil {
		return nil
	}
	return o.MessageFormat
}

func (o *OutputGrafanaCloud) GetLabels() []OutputGrafanaCloudLabel {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *OutputGrafanaCloud) GetMetricRenameExpr() *string {
	if o == nil {
		return nil
	}
	return o.MetricRenameExpr
}

func (o *OutputGrafanaCloud) GetPrometheusAuth() *OutputGrafanaCloudPrometheusAuth {
	if o == nil {
		return nil
	}
	return o.PrometheusAuth
}

func (o *OutputGrafanaCloud) GetLokiAuth() *OutputGrafanaCloudLokiAuth {
	if o == nil {
		return nil
	}
	return o.LokiAuth
}

func (o *OutputGrafanaCloud) GetConcurrency() *float64 {
	if o == nil {
		return nil
	}
	return o.Concurrency
}

func (o *OutputGrafanaCloud) GetMaxPayloadSizeKB() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxPayloadSizeKB
}

func (o *OutputGrafanaCloud) GetMaxPayloadEvents() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxPayloadEvents
}

func (o *OutputGrafanaCloud) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *OutputGrafanaCloud) GetTimeoutSec() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeoutSec
}

func (o *OutputGrafanaCloud) GetFlushPeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.FlushPeriodSec
}

func (o *OutputGrafanaCloud) GetExtraHTTPHeaders() []OutputGrafanaCloudExtraHTTPHeader {
	if o == nil {
		return nil
	}
	return o.ExtraHTTPHeaders
}

func (o *OutputGrafanaCloud) GetUseRoundRobinDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UseRoundRobinDNS
}

func (o *OutputGrafanaCloud) GetFailedRequestLoggingMode() *OutputGrafanaCloudFailedRequestLoggingMode {
	if o == nil {
		return nil
	}
	return o.FailedRequestLoggingMode
}

func (o *OutputGrafanaCloud) GetSafeHeaders() []string {
	if o == nil {
		return nil
	}
	return o.SafeHeaders
}

func (o *OutputGrafanaCloud) GetSendStructuredMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.SendStructuredMetadata
}

func (o *OutputGrafanaCloud) GetResponseRetrySettings() []OutputGrafanaCloudResponseRetrySetting {
	if o == nil {
		return nil
	}
	return o.ResponseRetrySettings
}

func (o *OutputGrafanaCloud) GetTimeoutRetrySettings() *OutputGrafanaCloudTimeoutRetrySettings {
	if o == nil {
		return nil
	}
	return o.TimeoutRetrySettings
}

func (o *OutputGrafanaCloud) GetResponseHonorRetryAfterHeader() *bool {
	if o == nil {
		return nil
	}
	return o.ResponseHonorRetryAfterHeader
}

func (o *OutputGrafanaCloud) GetOnBackpressure() *OutputGrafanaCloudBackpressureBehavior {
	if o == nil {
		return nil
	}
	return o.OnBackpressure
}

func (o *OutputGrafanaCloud) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OutputGrafanaCloud) GetCompress() *bool {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *OutputGrafanaCloud) GetPqMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxFileSize
}

func (o *OutputGrafanaCloud) GetPqMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxSize
}

func (o *OutputGrafanaCloud) GetPqPath() *string {
	if o == nil {
		return nil
	}
	return o.PqPath
}

func (o *OutputGrafanaCloud) GetPqCompress() *OutputGrafanaCloudCompression {
	if o == nil {
		return nil
	}
	return o.PqCompress
}

func (o *OutputGrafanaCloud) GetPqOnBackpressure() *OutputGrafanaCloudQueueFullBehavior {
	if o == nil {
		return nil
	}
	return o.PqOnBackpressure
}

func (o *OutputGrafanaCloud) GetPqMode() *OutputGrafanaCloudMode {
	if o == nil {
		return nil
	}
	return o.PqMode
}

func (o *OutputGrafanaCloud) GetPqControls() *OutputGrafanaCloudPqControls {
	if o == nil {
		return nil
	}
	return o.PqControls
}

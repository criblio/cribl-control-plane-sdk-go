// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CredentialsMethod string

const (
	CredentialsMethodManual  CredentialsMethod = "manual"
	CredentialsMethodAuto    CredentialsMethod = "auto"
	CredentialsMethodAutoRPC CredentialsMethod = "auto_rpc"
)

func (e CredentialsMethod) ToPointer() *CredentialsMethod {
	return &e
}
func (e *CredentialsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "auto":
		fallthrough
	case "auto_rpc":
		*e = CredentialsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CredentialsMethod: %v", v)
	}
}

type Credentials struct {
	APIKey                 *string           `json:"apiKey,omitempty"`
	Method                 CredentialsMethod `json:"method"`
	RoleToAssume           *string           `json:"roleToAssume,omitempty"`
	RoleToAssumeExternalID *string           `json:"roleToAssumeExternalId,omitempty"`
	RoleToAssumeHybrid     *string           `json:"roleToAssumeHybrid,omitempty"`
	SecretKey              *string           `json:"secretKey,omitempty"`
}

func (o *Credentials) GetAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *Credentials) GetMethod() CredentialsMethod {
	if o == nil {
		return CredentialsMethod("")
	}
	return o.Method
}

func (o *Credentials) GetRoleToAssume() *string {
	if o == nil {
		return nil
	}
	return o.RoleToAssume
}

func (o *Credentials) GetRoleToAssumeExternalID() *string {
	if o == nil {
		return nil
	}
	return o.RoleToAssumeExternalID
}

func (o *Credentials) GetRoleToAssumeHybrid() *string {
	if o == nil {
		return nil
	}
	return o.RoleToAssumeHybrid
}

func (o *Credentials) GetSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.SecretKey
}

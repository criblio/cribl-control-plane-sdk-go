// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type OutputDatabricksType string

const (
	OutputDatabricksTypeDatabricks OutputDatabricksType = "databricks"
)

func (e OutputDatabricksType) ToPointer() *OutputDatabricksType {
	return &e
}
func (e *OutputDatabricksType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "databricks":
		*e = OutputDatabricksType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatabricksType: %v", v)
	}
}

// OutputDatabricksDataFormat - Format of the output data
type OutputDatabricksDataFormat string

const (
	// OutputDatabricksDataFormatJSON JSON
	OutputDatabricksDataFormatJSON OutputDatabricksDataFormat = "json"
	// OutputDatabricksDataFormatRaw Raw
	OutputDatabricksDataFormatRaw OutputDatabricksDataFormat = "raw"
	// OutputDatabricksDataFormatParquet Parquet
	OutputDatabricksDataFormatParquet OutputDatabricksDataFormat = "parquet"
)

func (e OutputDatabricksDataFormat) ToPointer() *OutputDatabricksDataFormat {
	return &e
}

// OutputDatabricksBackpressureBehavior - How to handle events when all receivers are exerting backpressure
type OutputDatabricksBackpressureBehavior string

const (
	// OutputDatabricksBackpressureBehaviorBlock Block
	OutputDatabricksBackpressureBehaviorBlock OutputDatabricksBackpressureBehavior = "block"
	// OutputDatabricksBackpressureBehaviorDrop Drop
	OutputDatabricksBackpressureBehaviorDrop OutputDatabricksBackpressureBehavior = "drop"
)

func (e OutputDatabricksBackpressureBehavior) ToPointer() *OutputDatabricksBackpressureBehavior {
	return &e
}

// OutputDatabricksDiskSpaceProtection - How to handle events when disk space is below the global 'Min free disk space' limit
type OutputDatabricksDiskSpaceProtection string

const (
	// OutputDatabricksDiskSpaceProtectionBlock Block
	OutputDatabricksDiskSpaceProtectionBlock OutputDatabricksDiskSpaceProtection = "block"
	// OutputDatabricksDiskSpaceProtectionDrop Drop
	OutputDatabricksDiskSpaceProtectionDrop OutputDatabricksDiskSpaceProtection = "drop"
)

func (e OutputDatabricksDiskSpaceProtection) ToPointer() *OutputDatabricksDiskSpaceProtection {
	return &e
}

// OutputDatabricksCompression - Data compression format to apply to HTTP content before it is delivered
type OutputDatabricksCompression string

const (
	OutputDatabricksCompressionNone OutputDatabricksCompression = "none"
	OutputDatabricksCompressionGzip OutputDatabricksCompression = "gzip"
)

func (e OutputDatabricksCompression) ToPointer() *OutputDatabricksCompression {
	return &e
}

// OutputDatabricksCompressionLevel - Compression level to apply before moving files to final destination
type OutputDatabricksCompressionLevel string

const (
	// OutputDatabricksCompressionLevelBestSpeed Best Speed
	OutputDatabricksCompressionLevelBestSpeed OutputDatabricksCompressionLevel = "best_speed"
	// OutputDatabricksCompressionLevelNormal Normal
	OutputDatabricksCompressionLevelNormal OutputDatabricksCompressionLevel = "normal"
	// OutputDatabricksCompressionLevelBestCompression Best Compression
	OutputDatabricksCompressionLevelBestCompression OutputDatabricksCompressionLevel = "best_compression"
)

func (e OutputDatabricksCompressionLevel) ToPointer() *OutputDatabricksCompressionLevel {
	return &e
}

// OutputDatabricksParquetVersion - Determines which data types are supported and how they are represented
type OutputDatabricksParquetVersion string

const (
	// OutputDatabricksParquetVersionParquet10 1.0
	OutputDatabricksParquetVersionParquet10 OutputDatabricksParquetVersion = "PARQUET_1_0"
	// OutputDatabricksParquetVersionParquet24 2.4
	OutputDatabricksParquetVersionParquet24 OutputDatabricksParquetVersion = "PARQUET_2_4"
	// OutputDatabricksParquetVersionParquet26 2.6
	OutputDatabricksParquetVersionParquet26 OutputDatabricksParquetVersion = "PARQUET_2_6"
)

func (e OutputDatabricksParquetVersion) ToPointer() *OutputDatabricksParquetVersion {
	return &e
}

// OutputDatabricksDataPageVersion - Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
type OutputDatabricksDataPageVersion string

const (
	// OutputDatabricksDataPageVersionDataPageV1 V1
	OutputDatabricksDataPageVersionDataPageV1 OutputDatabricksDataPageVersion = "DATA_PAGE_V1"
	// OutputDatabricksDataPageVersionDataPageV2 V2
	OutputDatabricksDataPageVersionDataPageV2 OutputDatabricksDataPageVersion = "DATA_PAGE_V2"
)

func (e OutputDatabricksDataPageVersion) ToPointer() *OutputDatabricksDataPageVersion {
	return &e
}

type OutputDatabricksKeyValueMetadatum struct {
	Key   *string `default:"" json:"key"`
	Value string  `json:"value"`
}

func (o OutputDatabricksKeyValueMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputDatabricksKeyValueMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (o *OutputDatabricksKeyValueMetadatum) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *OutputDatabricksKeyValueMetadatum) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type OutputDatabricks struct {
	// Unique ID for this output
	ID   *string              `json:"id,omitempty"`
	Type OutputDatabricksType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Optional path to prepend to files before uploading. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `myEventsVolumePath-${C.vars.myVar}`
	DestPath *string `default:"" json:"destPath"`
	// Filesystem location in which to buffer files before compressing and moving to final destination. Use performant, stable storage.
	StagePath *string `default:"$CRIBL_HOME/state/outputs/staging" json:"stagePath"`
	// Add the Output ID value to staging location
	AddIDToStagePath *bool `default:"true" json:"addIdToStagePath"`
	// Remove empty staging directories after moving files
	RemoveEmptyDirs *bool `default:"true" json:"removeEmptyDirs"`
	// JavaScript expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
	PartitionExpr *string `default:"C.Time.strftime(_time ? _time : Date.now()/1000, '%Y/%m/%d')" json:"partitionExpr"`
	// Format of the output data
	Format *OutputDatabricksDataFormat `default:"json" json:"format"`
	// JavaScript expression to define the output filename prefix (can be constant)
	BaseFileName *string `default:"CriblOut" json:"baseFileName"`
	// JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`).
	FileNameSuffix *string `default:".\\${C.env[\"CRIBL_WORKER_ID\"]}.\\${__format}\\${__compression === \"gzip\" ? \".gz\" : \"\"}" json:"fileNameSuffix"`
	// Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
	MaxFileSizeMB *float64 `default:"32" json:"maxFileSizeMB"`
	// Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
	MaxFileOpenTimeSec *float64 `default:"300" json:"maxFileOpenTimeSec"`
	// Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
	MaxFileIdleTimeSec *float64 `default:"30" json:"maxFileIdleTimeSec"`
	// Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
	MaxOpenFiles *float64 `default:"100" json:"maxOpenFiles"`
	// If set, this line will be written to the beginning of each output file
	HeaderLine *string `default:"" json:"headerLine"`
	// Buffer size used to write to a file
	WriteHighWaterMark *float64 `default:"64" json:"writeHighWaterMark"`
	// How to handle events when all receivers are exerting backpressure
	OnBackpressure *OutputDatabricksBackpressureBehavior `default:"block" json:"onBackpressure"`
	// If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors
	DeadletterEnabled *bool `default:"false" json:"deadletterEnabled"`
	// How to handle events when disk space is below the global 'Min free disk space' limit
	OnDiskFullBackpressure *OutputDatabricksDiskSpaceProtection `default:"block" json:"onDiskFullBackpressure"`
	// Databricks workspace ID
	WorkspaceID string `json:"workspaceId"`
	// OAuth scope for Unity Catalog authentication
	Scope *string `default:"all-apis" json:"scope"`
	// OAuth client ID for Unity Catalog authentication
	ClientID string `json:"clientId"`
	// Name of the catalog to use for the output
	Catalog *string `default:"main" json:"catalog"`
	// Name of the catalog schema to use for the output
	Schema *string `default:"external" json:"schema"`
	// Name of the events volume in Databricks
	EventsVolumeName *string `default:"events" json:"eventsVolumeName"`
	// OAuth client secret for Unity Catalog authentication
	ClientSecret string  `json:"clientSecret"`
	Description  *string `json:"description,omitempty"`
	// Data compression format to apply to HTTP content before it is delivered
	Compress *OutputDatabricksCompression `default:"gzip" json:"compress"`
	// Compression level to apply before moving files to final destination
	CompressionLevel *OutputDatabricksCompressionLevel `default:"best_speed" json:"compressionLevel"`
	// Automatically calculate the schema based on the events of each Parquet file generated
	AutomaticSchema *bool `default:"false" json:"automaticSchema"`
	// To add a new schema, navigate to Processing > Knowledge > Parquet Schemas
	ParquetSchema *string `json:"parquetSchema,omitempty"`
	// Determines which data types are supported and how they are represented
	ParquetVersion *OutputDatabricksParquetVersion `default:"PARQUET_2_6" json:"parquetVersion"`
	// Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it.
	ParquetDataPageVersion *OutputDatabricksDataPageVersion `default:"DATA_PAGE_V2" json:"parquetDataPageVersion"`
	// The number of rows that every group will contain. The final group can contain a smaller number of rows.
	ParquetRowGroupLength *float64 `default:"10000" json:"parquetRowGroupLength"`
	// Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression.
	ParquetPageSize *string `default:"1MB" json:"parquetPageSize"`
	// Log up to 3 rows that @{product} skips due to data mismatch
	ShouldLogInvalidRows *bool `json:"shouldLogInvalidRows,omitempty"`
	// The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: "key":"OCSF Event Class", "value":"9001"
	KeyValueMetadata []OutputDatabricksKeyValueMetadatum `json:"keyValueMetadata,omitempty"`
	// Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics.
	EnableStatistics *bool `default:"true" json:"enableStatistics"`
	// One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping.
	EnableWritePageIndex *bool `default:"true" json:"enableWritePageIndex"`
	// Parquet tools can use the checksum of a Parquet page to verify data integrity
	EnablePageChecksum *bool `default:"false" json:"enablePageChecksum"`
	// How frequently, in seconds, to clean up empty directories
	EmptyDirCleanupSec *float64 `default:"300" json:"emptyDirCleanupSec"`
	// Storage location for files that fail to reach their final destination after maximum retries are exceeded
	DeadletterPath *string `default:"$CRIBL_HOME/state/outputs/dead-letter" json:"deadletterPath"`
	// The maximum number of times a file will attempt to move to its final destination before being dead-lettered
	MaxRetryNum *float64 `default:"20" json:"maxRetryNum"`
}

func (o OutputDatabricks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputDatabricks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"type", "workspaceId", "clientId", "clientSecret"}); err != nil {
		return err
	}
	return nil
}

func (o *OutputDatabricks) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OutputDatabricks) GetType() OutputDatabricksType {
	if o == nil {
		return OutputDatabricksType("")
	}
	return o.Type
}

func (o *OutputDatabricks) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputDatabricks) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputDatabricks) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputDatabricks) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputDatabricks) GetDestPath() *string {
	if o == nil {
		return nil
	}
	return o.DestPath
}

func (o *OutputDatabricks) GetStagePath() *string {
	if o == nil {
		return nil
	}
	return o.StagePath
}

func (o *OutputDatabricks) GetAddIDToStagePath() *bool {
	if o == nil {
		return nil
	}
	return o.AddIDToStagePath
}

func (o *OutputDatabricks) GetRemoveEmptyDirs() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveEmptyDirs
}

func (o *OutputDatabricks) GetPartitionExpr() *string {
	if o == nil {
		return nil
	}
	return o.PartitionExpr
}

func (o *OutputDatabricks) GetFormat() *OutputDatabricksDataFormat {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *OutputDatabricks) GetBaseFileName() *string {
	if o == nil {
		return nil
	}
	return o.BaseFileName
}

func (o *OutputDatabricks) GetFileNameSuffix() *string {
	if o == nil {
		return nil
	}
	return o.FileNameSuffix
}

func (o *OutputDatabricks) GetMaxFileSizeMB() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxFileSizeMB
}

func (o *OutputDatabricks) GetMaxFileOpenTimeSec() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxFileOpenTimeSec
}

func (o *OutputDatabricks) GetMaxFileIdleTimeSec() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxFileIdleTimeSec
}

func (o *OutputDatabricks) GetMaxOpenFiles() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxOpenFiles
}

func (o *OutputDatabricks) GetHeaderLine() *string {
	if o == nil {
		return nil
	}
	return o.HeaderLine
}

func (o *OutputDatabricks) GetWriteHighWaterMark() *float64 {
	if o == nil {
		return nil
	}
	return o.WriteHighWaterMark
}

func (o *OutputDatabricks) GetOnBackpressure() *OutputDatabricksBackpressureBehavior {
	if o == nil {
		return nil
	}
	return o.OnBackpressure
}

func (o *OutputDatabricks) GetDeadletterEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.DeadletterEnabled
}

func (o *OutputDatabricks) GetOnDiskFullBackpressure() *OutputDatabricksDiskSpaceProtection {
	if o == nil {
		return nil
	}
	return o.OnDiskFullBackpressure
}

func (o *OutputDatabricks) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

func (o *OutputDatabricks) GetScope() *string {
	if o == nil {
		return nil
	}
	return o.Scope
}

func (o *OutputDatabricks) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *OutputDatabricks) GetCatalog() *string {
	if o == nil {
		return nil
	}
	return o.Catalog
}

func (o *OutputDatabricks) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *OutputDatabricks) GetEventsVolumeName() *string {
	if o == nil {
		return nil
	}
	return o.EventsVolumeName
}

func (o *OutputDatabricks) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *OutputDatabricks) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OutputDatabricks) GetCompress() *OutputDatabricksCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *OutputDatabricks) GetCompressionLevel() *OutputDatabricksCompressionLevel {
	if o == nil {
		return nil
	}
	return o.CompressionLevel
}

func (o *OutputDatabricks) GetAutomaticSchema() *bool {
	if o == nil {
		return nil
	}
	return o.AutomaticSchema
}

func (o *OutputDatabricks) GetParquetSchema() *string {
	if o == nil {
		return nil
	}
	return o.ParquetSchema
}

func (o *OutputDatabricks) GetParquetVersion() *OutputDatabricksParquetVersion {
	if o == nil {
		return nil
	}
	return o.ParquetVersion
}

func (o *OutputDatabricks) GetParquetDataPageVersion() *OutputDatabricksDataPageVersion {
	if o == nil {
		return nil
	}
	return o.ParquetDataPageVersion
}

func (o *OutputDatabricks) GetParquetRowGroupLength() *float64 {
	if o == nil {
		return nil
	}
	return o.ParquetRowGroupLength
}

func (o *OutputDatabricks) GetParquetPageSize() *string {
	if o == nil {
		return nil
	}
	return o.ParquetPageSize
}

func (o *OutputDatabricks) GetShouldLogInvalidRows() *bool {
	if o == nil {
		return nil
	}
	return o.ShouldLogInvalidRows
}

func (o *OutputDatabricks) GetKeyValueMetadata() []OutputDatabricksKeyValueMetadatum {
	if o == nil {
		return nil
	}
	return o.KeyValueMetadata
}

func (o *OutputDatabricks) GetEnableStatistics() *bool {
	if o == nil {
		return nil
	}
	return o.EnableStatistics
}

func (o *OutputDatabricks) GetEnableWritePageIndex() *bool {
	if o == nil {
		return nil
	}
	return o.EnableWritePageIndex
}

func (o *OutputDatabricks) GetEnablePageChecksum() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePageChecksum
}

func (o *OutputDatabricks) GetEmptyDirCleanupSec() *float64 {
	if o == nil {
		return nil
	}
	return o.EmptyDirCleanupSec
}

func (o *OutputDatabricks) GetDeadletterPath() *string {
	if o == nil {
		return nil
	}
	return o.DeadletterPath
}

func (o *OutputDatabricks) GetMaxRetryNum() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryNum
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type Line3 struct {
	Content   string  `json:"content"`
	NewNumber float64 `json:"newNumber"`
	OldNumber float64 `json:"oldNumber"`
}

func (o *Line3) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *Line3) GetNewNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.NewNumber
}

func (o *Line3) GetOldNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.OldNumber
}

type Line2 struct {
	Content   string  `json:"content"`
	NewNumber float64 `json:"newNumber"`
}

func (o *Line2) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *Line2) GetNewNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.NewNumber
}

type Line1 struct {
	Content   string  `json:"content"`
	OldNumber float64 `json:"oldNumber"`
}

func (o *Line1) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *Line1) GetOldNumber() float64 {
	if o == nil {
		return 0.0
	}
	return o.OldNumber
}

type LineUnionType string

const (
	LineUnionTypeLine1 LineUnionType = "line_1"
	LineUnionTypeLine2 LineUnionType = "line_2"
	LineUnionTypeLine3 LineUnionType = "line_3"
)

type LineUnion struct {
	Line1 *Line1 `queryParam:"inline"`
	Line2 *Line2 `queryParam:"inline"`
	Line3 *Line3 `queryParam:"inline"`

	Type LineUnionType
}

func CreateLineUnionLine1(line1 Line1) LineUnion {
	typ := LineUnionTypeLine1

	return LineUnion{
		Line1: &line1,
		Type:  typ,
	}
}

func CreateLineUnionLine2(line2 Line2) LineUnion {
	typ := LineUnionTypeLine2

	return LineUnion{
		Line2: &line2,
		Type:  typ,
	}
}

func CreateLineUnionLine3(line3 Line3) LineUnion {
	typ := LineUnionTypeLine3

	return LineUnion{
		Line3: &line3,
		Type:  typ,
	}
}

func (u *LineUnion) UnmarshalJSON(data []byte) error {

	var line1 Line1 = Line1{}
	if err := utils.UnmarshalJSON(data, &line1, "", true, false); err == nil {
		u.Line1 = &line1
		u.Type = LineUnionTypeLine1
		return nil
	}

	var line2 Line2 = Line2{}
	if err := utils.UnmarshalJSON(data, &line2, "", true, false); err == nil {
		u.Line2 = &line2
		u.Type = LineUnionTypeLine2
		return nil
	}

	var line3 Line3 = Line3{}
	if err := utils.UnmarshalJSON(data, &line3, "", true, false); err == nil {
		u.Line3 = &line3
		u.Type = LineUnionTypeLine3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for LineUnion", string(data))
}

func (u LineUnion) MarshalJSON() ([]byte, error) {
	if u.Line1 != nil {
		return utils.MarshalJSON(u.Line1, "", true)
	}

	if u.Line2 != nil {
		return utils.MarshalJSON(u.Line2, "", true)
	}

	if u.Line3 != nil {
		return utils.MarshalJSON(u.Line3, "", true)
	}

	return nil, errors.New("could not marshal union type LineUnion: all fields are null")
}

type Block struct {
	Header        string      `json:"header"`
	Lines         []LineUnion `json:"lines"`
	NewStartLine  float64     `json:"newStartLine"`
	OldStartLine  float64     `json:"oldStartLine"`
	OldStartLine2 *float64    `json:"oldStartLine2,omitempty"`
}

func (o *Block) GetHeader() string {
	if o == nil {
		return ""
	}
	return o.Header
}

func (o *Block) GetLines() []LineUnion {
	if o == nil {
		return []LineUnion{}
	}
	return o.Lines
}

func (o *Block) GetNewStartLine() float64 {
	if o == nil {
		return 0.0
	}
	return o.NewStartLine
}

func (o *Block) GetOldStartLine() float64 {
	if o == nil {
		return 0.0
	}
	return o.OldStartLine
}

func (o *Block) GetOldStartLine2() *float64 {
	if o == nil {
		return nil
	}
	return o.OldStartLine2
}

type ChecksumBeforeType string

const (
	ChecksumBeforeTypeStr        ChecksumBeforeType = "str"
	ChecksumBeforeTypeArrayOfStr ChecksumBeforeType = "arrayOfStr"
)

type ChecksumBefore struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ChecksumBeforeType
}

func CreateChecksumBeforeStr(str string) ChecksumBefore {
	typ := ChecksumBeforeTypeStr

	return ChecksumBefore{
		Str:  &str,
		Type: typ,
	}
}

func CreateChecksumBeforeArrayOfStr(arrayOfStr []string) ChecksumBefore {
	typ := ChecksumBeforeTypeArrayOfStr

	return ChecksumBefore{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ChecksumBefore) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = ChecksumBeforeTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, false); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ChecksumBeforeTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChecksumBefore", string(data))
}

func (u ChecksumBefore) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ChecksumBefore: all fields are null")
}

type OldModeType string

const (
	OldModeTypeStr        OldModeType = "str"
	OldModeTypeArrayOfStr OldModeType = "arrayOfStr"
)

type OldMode struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type OldModeType
}

func CreateOldModeStr(str string) OldMode {
	typ := OldModeTypeStr

	return OldMode{
		Str:  &str,
		Type: typ,
	}
}

func CreateOldModeArrayOfStr(arrayOfStr []string) OldMode {
	typ := OldModeTypeArrayOfStr

	return OldMode{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *OldMode) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, false); err == nil {
		u.Str = &str
		u.Type = OldModeTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, false); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = OldModeTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OldMode", string(data))
}

func (u OldMode) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type OldMode: all fields are null")
}

type DiffFiles struct {
	AddedLines          float64         `json:"addedLines"`
	Blocks              []Block         `json:"blocks"`
	ChangedPercentage   *float64        `json:"changedPercentage,omitempty"`
	ChecksumAfter       *string         `json:"checksumAfter,omitempty"`
	ChecksumBefore      *ChecksumBefore `json:"checksumBefore,omitempty"`
	DeletedFileMode     *string         `json:"deletedFileMode,omitempty"`
	DeletedLines        float64         `json:"deletedLines"`
	IsBinary            *bool           `json:"isBinary,omitempty"`
	IsCombined          bool            `json:"isCombined"`
	IsCopy              *bool           `json:"isCopy,omitempty"`
	IsDeleted           *bool           `json:"isDeleted,omitempty"`
	IsGitDiff           bool            `json:"isGitDiff"`
	IsNew               *bool           `json:"isNew,omitempty"`
	IsRename            *bool           `json:"isRename,omitempty"`
	IsTooBig            *bool           `json:"isTooBig,omitempty"`
	Language            string          `json:"language"`
	Mode                *string         `json:"mode,omitempty"`
	NewFileMode         *string         `json:"newFileMode,omitempty"`
	NewMode             *string         `json:"newMode,omitempty"`
	NewName             string          `json:"newName"`
	OldMode             *OldMode        `json:"oldMode,omitempty"`
	OldName             string          `json:"oldName"`
	UnchangedPercentage *float64        `json:"unchangedPercentage,omitempty"`
}

func (o *DiffFiles) GetAddedLines() float64 {
	if o == nil {
		return 0.0
	}
	return o.AddedLines
}

func (o *DiffFiles) GetBlocks() []Block {
	if o == nil {
		return []Block{}
	}
	return o.Blocks
}

func (o *DiffFiles) GetChangedPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.ChangedPercentage
}

func (o *DiffFiles) GetChecksumAfter() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumAfter
}

func (o *DiffFiles) GetChecksumBefore() *ChecksumBefore {
	if o == nil {
		return nil
	}
	return o.ChecksumBefore
}

func (o *DiffFiles) GetDeletedFileMode() *string {
	if o == nil {
		return nil
	}
	return o.DeletedFileMode
}

func (o *DiffFiles) GetDeletedLines() float64 {
	if o == nil {
		return 0.0
	}
	return o.DeletedLines
}

func (o *DiffFiles) GetIsBinary() *bool {
	if o == nil {
		return nil
	}
	return o.IsBinary
}

func (o *DiffFiles) GetIsCombined() bool {
	if o == nil {
		return false
	}
	return o.IsCombined
}

func (o *DiffFiles) GetIsCopy() *bool {
	if o == nil {
		return nil
	}
	return o.IsCopy
}

func (o *DiffFiles) GetIsDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.IsDeleted
}

func (o *DiffFiles) GetIsGitDiff() bool {
	if o == nil {
		return false
	}
	return o.IsGitDiff
}

func (o *DiffFiles) GetIsNew() *bool {
	if o == nil {
		return nil
	}
	return o.IsNew
}

func (o *DiffFiles) GetIsRename() *bool {
	if o == nil {
		return nil
	}
	return o.IsRename
}

func (o *DiffFiles) GetIsTooBig() *bool {
	if o == nil {
		return nil
	}
	return o.IsTooBig
}

func (o *DiffFiles) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *DiffFiles) GetMode() *string {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *DiffFiles) GetNewFileMode() *string {
	if o == nil {
		return nil
	}
	return o.NewFileMode
}

func (o *DiffFiles) GetNewMode() *string {
	if o == nil {
		return nil
	}
	return o.NewMode
}

func (o *DiffFiles) GetNewName() string {
	if o == nil {
		return ""
	}
	return o.NewName
}

func (o *DiffFiles) GetOldMode() *OldMode {
	if o == nil {
		return nil
	}
	return o.OldMode
}

func (o *DiffFiles) GetOldName() string {
	if o == nil {
		return ""
	}
	return o.OldName
}

func (o *DiffFiles) GetUnchangedPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.UnchangedPercentage
}

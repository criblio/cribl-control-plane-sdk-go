// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type PackRequestBodyTags2 struct {
	DataType   []string `json:"dataType,omitempty"`
	Domain     []string `json:"domain,omitempty"`
	Technology []string `json:"technology,omitempty"`
	Streamtags []string `json:"streamtags,omitempty"`
}

func (p PackRequestBodyTags2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PackRequestBodyTags2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PackRequestBodyTags2) GetDataType() []string {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *PackRequestBodyTags2) GetDomain() []string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *PackRequestBodyTags2) GetTechnology() []string {
	if o == nil {
		return nil
	}
	return o.Technology
}

func (o *PackRequestBodyTags2) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

type PackRequestBody2 struct {
	ID                  *string `json:"id,omitempty"`
	Spec                *string `json:"spec,omitempty"`
	Version             *string `json:"version,omitempty"`
	MinLogStreamVersion *string `json:"minLogStreamVersion,omitempty"`
	DisplayName         *string `json:"displayName,omitempty"`
	Author              *string `json:"author,omitempty"`
	Description         *string `json:"description,omitempty"`
	// The source of the pack. If not present, an empty pack will be created
	Source               string                `json:"source"`
	Tags                 *PackRequestBodyTags2 `json:"tags,omitempty"`
	AllowCustomFunctions *bool                 `json:"allowCustomFunctions,omitempty"`
	Force                *bool                 `json:"force,omitempty"`
}

func (p PackRequestBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PackRequestBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"source"}); err != nil {
		return err
	}
	return nil
}

func (o *PackRequestBody2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PackRequestBody2) GetSpec() *string {
	if o == nil {
		return nil
	}
	return o.Spec
}

func (o *PackRequestBody2) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *PackRequestBody2) GetMinLogStreamVersion() *string {
	if o == nil {
		return nil
	}
	return o.MinLogStreamVersion
}

func (o *PackRequestBody2) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *PackRequestBody2) GetAuthor() *string {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *PackRequestBody2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PackRequestBody2) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *PackRequestBody2) GetTags() *PackRequestBodyTags2 {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PackRequestBody2) GetAllowCustomFunctions() *bool {
	if o == nil {
		return nil
	}
	return o.AllowCustomFunctions
}

func (o *PackRequestBody2) GetForce() *bool {
	if o == nil {
		return nil
	}
	return o.Force
}

type PackRequestBodyTags1 struct {
	DataType   []string `json:"dataType,omitempty"`
	Domain     []string `json:"domain,omitempty"`
	Technology []string `json:"technology,omitempty"`
	Streamtags []string `json:"streamtags,omitempty"`
}

func (p PackRequestBodyTags1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PackRequestBodyTags1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *PackRequestBodyTags1) GetDataType() []string {
	if o == nil {
		return nil
	}
	return o.DataType
}

func (o *PackRequestBodyTags1) GetDomain() []string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *PackRequestBodyTags1) GetTechnology() []string {
	if o == nil {
		return nil
	}
	return o.Technology
}

func (o *PackRequestBodyTags1) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

type PackRequestBody1 struct {
	ID                  string  `json:"id"`
	Spec                *string `json:"spec,omitempty"`
	Version             *string `json:"version,omitempty"`
	MinLogStreamVersion *string `json:"minLogStreamVersion,omitempty"`
	DisplayName         *string `json:"displayName,omitempty"`
	Author              *string `json:"author,omitempty"`
	Description         *string `json:"description,omitempty"`
	// The source of the pack. If not present, an empty pack will be created
	Source               *string               `json:"source,omitempty"`
	Tags                 *PackRequestBodyTags1 `json:"tags,omitempty"`
	AllowCustomFunctions *bool                 `json:"allowCustomFunctions,omitempty"`
	Force                *bool                 `json:"force,omitempty"`
}

func (p PackRequestBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PackRequestBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (o *PackRequestBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PackRequestBody1) GetSpec() *string {
	if o == nil {
		return nil
	}
	return o.Spec
}

func (o *PackRequestBody1) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *PackRequestBody1) GetMinLogStreamVersion() *string {
	if o == nil {
		return nil
	}
	return o.MinLogStreamVersion
}

func (o *PackRequestBody1) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *PackRequestBody1) GetAuthor() *string {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *PackRequestBody1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PackRequestBody1) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *PackRequestBody1) GetTags() *PackRequestBodyTags1 {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *PackRequestBody1) GetAllowCustomFunctions() *bool {
	if o == nil {
		return nil
	}
	return o.AllowCustomFunctions
}

func (o *PackRequestBody1) GetForce() *bool {
	if o == nil {
		return nil
	}
	return o.Force
}

type PackRequestBodyUnionType string

const (
	PackRequestBodyUnionTypePackRequestBody1 PackRequestBodyUnionType = "PackRequestBody_1"
	PackRequestBodyUnionTypePackRequestBody2 PackRequestBodyUnionType = "PackRequestBody_2"
)

type PackRequestBodyUnion struct {
	PackRequestBody1 *PackRequestBody1 `queryParam:"inline" name:"PackRequestBody"`
	PackRequestBody2 *PackRequestBody2 `queryParam:"inline" name:"PackRequestBody"`

	Type PackRequestBodyUnionType
}

func CreatePackRequestBodyUnionPackRequestBody1(packRequestBody1 PackRequestBody1) PackRequestBodyUnion {
	typ := PackRequestBodyUnionTypePackRequestBody1

	return PackRequestBodyUnion{
		PackRequestBody1: &packRequestBody1,
		Type:             typ,
	}
}

func CreatePackRequestBodyUnionPackRequestBody2(packRequestBody2 PackRequestBody2) PackRequestBodyUnion {
	typ := PackRequestBodyUnionTypePackRequestBody2

	return PackRequestBodyUnion{
		PackRequestBody2: &packRequestBody2,
		Type:             typ,
	}
}

func (u *PackRequestBodyUnion) UnmarshalJSON(data []byte) error {

	var packRequestBody1 PackRequestBody1 = PackRequestBody1{}
	if err := utils.UnmarshalJSON(data, &packRequestBody1, "", true, nil); err == nil {
		u.PackRequestBody1 = &packRequestBody1
		u.Type = PackRequestBodyUnionTypePackRequestBody1
		return nil
	}

	var packRequestBody2 PackRequestBody2 = PackRequestBody2{}
	if err := utils.UnmarshalJSON(data, &packRequestBody2, "", true, nil); err == nil {
		u.PackRequestBody2 = &packRequestBody2
		u.Type = PackRequestBodyUnionTypePackRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PackRequestBodyUnion", string(data))
}

func (u PackRequestBodyUnion) MarshalJSON() ([]byte, error) {
	if u.PackRequestBody1 != nil {
		return utils.MarshalJSON(u.PackRequestBody1, "", true)
	}

	if u.PackRequestBody2 != nil {
		return utils.MarshalJSON(u.PackRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type PackRequestBodyUnion: all fields are null")
}

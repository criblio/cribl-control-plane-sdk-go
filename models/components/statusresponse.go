// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type CacheStatusesByStageID2 struct {
	Reason    string `json:"reason"`
	UsedCache bool   `json:"usedCache"`
}

func (c CacheStatusesByStageID2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CacheStatusesByStageID2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"reason", "usedCache"}); err != nil {
		return err
	}
	return nil
}

func (c *CacheStatusesByStageID2) GetReason() string {
	if c == nil {
		return ""
	}
	return c.Reason
}

func (c *CacheStatusesByStageID2) GetUsedCache() bool {
	if c == nil {
		return false
	}
	return c.UsedCache
}

type CacheStatusesByStageID1 struct {
	UsedCache bool `json:"usedCache"`
}

func (c CacheStatusesByStageID1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CacheStatusesByStageID1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"usedCache"}); err != nil {
		return err
	}
	return nil
}

func (c *CacheStatusesByStageID1) GetUsedCache() bool {
	if c == nil {
		return false
	}
	return c.UsedCache
}

type CacheStatusesByStageIDUnionType string

const (
	CacheStatusesByStageIDUnionTypeCacheStatusesByStageID1 CacheStatusesByStageIDUnionType = "cacheStatusesByStageId_1"
	CacheStatusesByStageIDUnionTypeCacheStatusesByStageID2 CacheStatusesByStageIDUnionType = "cacheStatusesByStageId_2"
)

type CacheStatusesByStageIDUnion struct {
	CacheStatusesByStageID1 *CacheStatusesByStageID1 `queryParam:"inline,name=cacheStatusesByStageId"`
	CacheStatusesByStageID2 *CacheStatusesByStageID2 `queryParam:"inline,name=cacheStatusesByStageId"`

	Type CacheStatusesByStageIDUnionType
}

func CreateCacheStatusesByStageIDUnionCacheStatusesByStageID1(cacheStatusesByStageID1 CacheStatusesByStageID1) CacheStatusesByStageIDUnion {
	typ := CacheStatusesByStageIDUnionTypeCacheStatusesByStageID1

	return CacheStatusesByStageIDUnion{
		CacheStatusesByStageID1: &cacheStatusesByStageID1,
		Type:                    typ,
	}
}

func CreateCacheStatusesByStageIDUnionCacheStatusesByStageID2(cacheStatusesByStageID2 CacheStatusesByStageID2) CacheStatusesByStageIDUnion {
	typ := CacheStatusesByStageIDUnionTypeCacheStatusesByStageID2

	return CacheStatusesByStageIDUnion{
		CacheStatusesByStageID2: &cacheStatusesByStageID2,
		Type:                    typ,
	}
}

func (u *CacheStatusesByStageIDUnion) UnmarshalJSON(data []byte) error {

	var cacheStatusesByStageID2 CacheStatusesByStageID2 = CacheStatusesByStageID2{}
	if err := utils.UnmarshalJSON(data, &cacheStatusesByStageID2, "", true, nil); err == nil {
		u.CacheStatusesByStageID2 = &cacheStatusesByStageID2
		u.Type = CacheStatusesByStageIDUnionTypeCacheStatusesByStageID2
		return nil
	}

	var cacheStatusesByStageID1 CacheStatusesByStageID1 = CacheStatusesByStageID1{}
	if err := utils.UnmarshalJSON(data, &cacheStatusesByStageID1, "", true, nil); err == nil {
		u.CacheStatusesByStageID1 = &cacheStatusesByStageID1
		u.Type = CacheStatusesByStageIDUnionTypeCacheStatusesByStageID1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CacheStatusesByStageIDUnion", string(data))
}

func (u CacheStatusesByStageIDUnion) MarshalJSON() ([]byte, error) {
	if u.CacheStatusesByStageID1 != nil {
		return utils.MarshalJSON(u.CacheStatusesByStageID1, "", true)
	}

	if u.CacheStatusesByStageID2 != nil {
		return utils.MarshalJSON(u.CacheStatusesByStageID2, "", true)
	}

	return nil, errors.New("could not marshal union type CacheStatusesByStageIDUnion: all fields are null")
}

type StageDetailStatus string

const (
	StageDetailStatusFailed    StageDetailStatus = "failed"
	StageDetailStatusNew       StageDetailStatus = "new"
	StageDetailStatusRunning   StageDetailStatus = "running"
	StageDetailStatusCompleted StageDetailStatus = "completed"
	StageDetailStatusCanceled  StageDetailStatus = "canceled"
	StageDetailStatusQueued    StageDetailStatus = "queued"
)

func (e StageDetailStatus) ToPointer() *StageDetailStatus {
	return &e
}

type StageDetail struct {
	CacheStatusByDatasetID map[string]CacheStatusByDatasetIDUnion `json:"cacheStatusByDatasetId"`
	StageID                string                                 `json:"stageId"`
	Status                 StageDetailStatus                      `json:"status"`
}

func (s *StageDetail) GetCacheStatusByDatasetID() map[string]CacheStatusByDatasetIDUnion {
	if s == nil {
		return map[string]CacheStatusByDatasetIDUnion{}
	}
	return s.CacheStatusByDatasetID
}

func (s *StageDetail) GetStageID() string {
	if s == nil {
		return ""
	}
	return s.StageID
}

func (s *StageDetail) GetStatus() StageDetailStatus {
	if s == nil {
		return StageDetailStatus("")
	}
	return s.Status
}

type StatusResponseStatus string

const (
	StatusResponseStatusFailed    StatusResponseStatus = "failed"
	StatusResponseStatusNew       StatusResponseStatus = "new"
	StatusResponseStatusRunning   StatusResponseStatus = "running"
	StatusResponseStatusCompleted StatusResponseStatus = "completed"
	StatusResponseStatusCanceled  StatusResponseStatus = "canceled"
	StatusResponseStatusQueued    StatusResponseStatus = "queued"
)

func (e StatusResponseStatus) ToPointer() *StatusResponseStatus {
	return &e
}

type StatusResponse struct {
	BytesIn                *float64                                          `json:"bytesIn,omitempty"`
	BytesSkipped           *float64                                          `json:"bytesSkipped,omitempty"`
	CacheStatusesByStageID map[string]map[string]CacheStatusesByStageIDUnion `json:"cacheStatusesByStageId,omitempty"`
	EventsFound            *float64                                          `json:"eventsFound,omitempty"`
	EventsIn               *float64                                          `json:"eventsIn,omitempty"`
	EventsSkipped          *float64                                          `json:"eventsSkipped,omitempty"`
	ObjectsFound           *float64                                          `json:"objectsFound,omitempty"`
	ObjectsSearched        *float64                                          `json:"objectsSearched,omitempty"`
	ObjectsSkipped         *float64                                          `json:"objectsSkipped,omitempty"`
	StageDetails           []StageDetail                                     `json:"stageDetails,omitempty"`
	Status                 StatusResponseStatus                              `json:"status"`
	TimeCompleted          *float64                                          `json:"timeCompleted,omitempty"`
	TimeCreated            float64                                           `json:"timeCreated"`
	TimeNow                *float64                                          `json:"timeNow,omitempty"`
	TimeStarted            *float64                                          `json:"timeStarted,omitempty"`
}

func (s *StatusResponse) GetBytesIn() *float64 {
	if s == nil {
		return nil
	}
	return s.BytesIn
}

func (s *StatusResponse) GetBytesSkipped() *float64 {
	if s == nil {
		return nil
	}
	return s.BytesSkipped
}

func (s *StatusResponse) GetCacheStatusesByStageID() map[string]map[string]CacheStatusesByStageIDUnion {
	if s == nil {
		return nil
	}
	return s.CacheStatusesByStageID
}

func (s *StatusResponse) GetEventsFound() *float64 {
	if s == nil {
		return nil
	}
	return s.EventsFound
}

func (s *StatusResponse) GetEventsIn() *float64 {
	if s == nil {
		return nil
	}
	return s.EventsIn
}

func (s *StatusResponse) GetEventsSkipped() *float64 {
	if s == nil {
		return nil
	}
	return s.EventsSkipped
}

func (s *StatusResponse) GetObjectsFound() *float64 {
	if s == nil {
		return nil
	}
	return s.ObjectsFound
}

func (s *StatusResponse) GetObjectsSearched() *float64 {
	if s == nil {
		return nil
	}
	return s.ObjectsSearched
}

func (s *StatusResponse) GetObjectsSkipped() *float64 {
	if s == nil {
		return nil
	}
	return s.ObjectsSkipped
}

func (s *StatusResponse) GetStageDetails() []StageDetail {
	if s == nil {
		return nil
	}
	return s.StageDetails
}

func (s *StatusResponse) GetStatus() StatusResponseStatus {
	if s == nil {
		return StatusResponseStatus("")
	}
	return s.Status
}

func (s *StatusResponse) GetTimeCompleted() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeCompleted
}

func (s *StatusResponse) GetTimeCreated() float64 {
	if s == nil {
		return 0.0
	}
	return s.TimeCreated
}

func (s *StatusResponse) GetTimeNow() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeNow
}

func (s *StatusResponse) GetTimeStarted() *float64 {
	if s == nil {
		return nil
	}
	return s.TimeStarted
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// ID - Unique function identifier. Must always be 'eval'.
type ID string

const (
	IDEval ID = "eval"
)

func (e ID) ToPointer() *ID {
	return &e
}

type Add struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (a *Add) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *Add) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

type FunctionConf struct {
	// Fields to add in this eval function
	Add []Add `json:"add"`
}

func (f *FunctionConf) GetAdd() []Add {
	if f == nil {
		return []Add{}
	}
	return f.Add
}

type Function struct {
	// Unique function identifier. Must always be 'eval'.
	ID ID `json:"id"`
	// Filter expression controlling when this function runs
	Filter string `json:"filter"`
	// Optional function description
	Description *string `json:"description,omitempty"`
	// Indicates whether the function is disabled
	Disabled *bool `json:"disabled,omitempty"`
	// Marks whether this function is final in the chain. Must always be true.
	Final bool         `json:"final"`
	Conf  FunctionConf `json:"conf"`
}

func (f *Function) GetID() ID {
	if f == nil {
		return ID("")
	}
	return f.ID
}

func (f *Function) GetFilter() string {
	if f == nil {
		return ""
	}
	return f.Filter
}

func (f *Function) GetDescription() *string {
	if f == nil {
		return nil
	}
	return f.Description
}

func (f *Function) GetDisabled() *bool {
	if f == nil {
		return nil
	}
	return f.Disabled
}

func (f *Function) GetFinal() bool {
	if f == nil {
		return false
	}
	return f.Final
}

func (f *Function) GetConf() FunctionConf {
	if f == nil {
		return FunctionConf{}
	}
	return f.Conf
}

type MappingRulesetConf struct {
	// List of functions to pass data through
	Functions []Function `json:"functions,omitempty"`
}

func (m *MappingRulesetConf) GetFunctions() []Function {
	if m == nil {
		return nil
	}
	return m.Functions
}

type MappingRuleset struct {
	ID     string              `json:"id"`
	Conf   *MappingRulesetConf `json:"conf,omitempty"`
	Active *bool               `json:"active,omitempty"`
}

func (m *MappingRuleset) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MappingRuleset) GetConf() *MappingRulesetConf {
	if m == nil {
		return nil
	}
	return m.Conf
}

func (m *MappingRuleset) GetActive() *bool {
	if m == nil {
		return nil
	}
	return m.Active
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type FunctionType string

const (
	FunctionTypeMappingRulesetEvalMappingFunction    FunctionType = "MappingRulesetEvalMappingFunction"
	FunctionTypeMappingRulesetGenericMappingFunction FunctionType = "MappingRulesetGenericMappingFunction"
)

type Function struct {
	MappingRulesetEvalMappingFunction    *MappingRulesetEvalMappingFunction    `queryParam:"inline,name=function"`
	MappingRulesetGenericMappingFunction *MappingRulesetGenericMappingFunction `queryParam:"inline,name=function"`

	Type FunctionType
}

func CreateFunctionMappingRulesetEvalMappingFunction(mappingRulesetEvalMappingFunction MappingRulesetEvalMappingFunction) Function {
	typ := FunctionTypeMappingRulesetEvalMappingFunction

	return Function{
		MappingRulesetEvalMappingFunction: &mappingRulesetEvalMappingFunction,
		Type:                              typ,
	}
}

func CreateFunctionMappingRulesetGenericMappingFunction(mappingRulesetGenericMappingFunction MappingRulesetGenericMappingFunction) Function {
	typ := FunctionTypeMappingRulesetGenericMappingFunction

	return Function{
		MappingRulesetGenericMappingFunction: &mappingRulesetGenericMappingFunction,
		Type:                                 typ,
	}
}

func (u *Function) UnmarshalJSON(data []byte) error {

	var mappingRulesetEvalMappingFunction MappingRulesetEvalMappingFunction = MappingRulesetEvalMappingFunction{}
	if err := utils.UnmarshalJSON(data, &mappingRulesetEvalMappingFunction, "", true, nil); err == nil {
		u.MappingRulesetEvalMappingFunction = &mappingRulesetEvalMappingFunction
		u.Type = FunctionTypeMappingRulesetEvalMappingFunction
		return nil
	}

	var mappingRulesetGenericMappingFunction MappingRulesetGenericMappingFunction = MappingRulesetGenericMappingFunction{}
	if err := utils.UnmarshalJSON(data, &mappingRulesetGenericMappingFunction, "", true, nil); err == nil {
		u.MappingRulesetGenericMappingFunction = &mappingRulesetGenericMappingFunction
		u.Type = FunctionTypeMappingRulesetGenericMappingFunction
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Function", string(data))
}

func (u Function) MarshalJSON() ([]byte, error) {
	if u.MappingRulesetEvalMappingFunction != nil {
		return utils.MarshalJSON(u.MappingRulesetEvalMappingFunction, "", true)
	}

	if u.MappingRulesetGenericMappingFunction != nil {
		return utils.MarshalJSON(u.MappingRulesetGenericMappingFunction, "", true)
	}

	return nil, errors.New("could not marshal union type Function: all fields are null")
}

type MappingRulesetConf struct {
	// List of functions to pass data through
	Functions []Function `json:"functions,omitempty"`
}

func (m *MappingRulesetConf) GetFunctions() []Function {
	if m == nil {
		return nil
	}
	return m.Functions
}

type MappingRuleset struct {
	ID     string              `json:"id"`
	Conf   *MappingRulesetConf `json:"conf,omitempty"`
	Active *bool               `json:"active,omitempty"`
}

func (m *MappingRuleset) GetID() string {
	if m == nil {
		return ""
	}
	return m.ID
}

func (m *MappingRuleset) GetConf() *MappingRulesetConf {
	if m == nil {
		return nil
	}
	return m.Conf
}

func (m *MappingRuleset) GetActive() *bool {
	if m == nil {
		return nil
	}
	return m.Active
}

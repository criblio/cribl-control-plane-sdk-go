// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type InputSystemMetricsType string

const (
	InputSystemMetricsTypeSystemMetrics InputSystemMetricsType = "system_metrics"
)

func (e InputSystemMetricsType) ToPointer() *InputSystemMetricsType {
	return &e
}
func (e *InputSystemMetricsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system_metrics":
		*e = InputSystemMetricsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsType: %v", v)
	}
}

type InputSystemMetricsConnection struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (i InputSystemMetricsConnection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsConnection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"output"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsConnection) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputSystemMetricsConnection) GetOutput() string {
	if i == nil {
		return ""
	}
	return i.Output
}

// InputSystemMetricsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSystemMetricsPqMode string

const (
	// InputSystemMetricsPqModeSmart Smart
	InputSystemMetricsPqModeSmart InputSystemMetricsPqMode = "smart"
	// InputSystemMetricsPqModeAlways Always On
	InputSystemMetricsPqModeAlways InputSystemMetricsPqMode = "always"
)

func (e InputSystemMetricsPqMode) ToPointer() *InputSystemMetricsPqMode {
	return &e
}

// InputSystemMetricsCompression - Codec to use to compress the persisted data
type InputSystemMetricsCompression string

const (
	// InputSystemMetricsCompressionNone None
	InputSystemMetricsCompressionNone InputSystemMetricsCompression = "none"
	// InputSystemMetricsCompressionGzip Gzip
	InputSystemMetricsCompressionGzip InputSystemMetricsCompression = "gzip"
)

func (e InputSystemMetricsCompression) ToPointer() *InputSystemMetricsCompression {
	return &e
}

type InputSystemMetricsPqControls struct {
}

func (i InputSystemMetricsPqControls) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsPqControls) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

type InputSystemMetricsPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSystemMetricsPqMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress   *InputSystemMetricsCompression `default:"none" json:"compress"`
	PqControls *InputSystemMetricsPqControls  `json:"pqControls,omitempty"`
}

func (i InputSystemMetricsPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsPq) GetMode() *InputSystemMetricsPqMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsPq) GetMaxBufferSize() *float64 {
	if i == nil {
		return nil
	}
	return i.MaxBufferSize
}

func (i *InputSystemMetricsPq) GetCommitFrequency() *float64 {
	if i == nil {
		return nil
	}
	return i.CommitFrequency
}

func (i *InputSystemMetricsPq) GetMaxFileSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxFileSize
}

func (i *InputSystemMetricsPq) GetMaxSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxSize
}

func (i *InputSystemMetricsPq) GetPath() *string {
	if i == nil {
		return nil
	}
	return i.Path
}

func (i *InputSystemMetricsPq) GetCompress() *InputSystemMetricsCompression {
	if i == nil {
		return nil
	}
	return i.Compress
}

func (i *InputSystemMetricsPq) GetPqControls() *InputSystemMetricsPqControls {
	if i == nil {
		return nil
	}
	return i.PqControls
}

// InputSystemMetricsHostMode - Select level of detail for host metrics
type InputSystemMetricsHostMode string

const (
	// InputSystemMetricsHostModeBasic Basic
	InputSystemMetricsHostModeBasic InputSystemMetricsHostMode = "basic"
	// InputSystemMetricsHostModeAll All
	InputSystemMetricsHostModeAll InputSystemMetricsHostMode = "all"
	// InputSystemMetricsHostModeCustom Custom
	InputSystemMetricsHostModeCustom InputSystemMetricsHostMode = "custom"
	// InputSystemMetricsHostModeDisabled Disabled
	InputSystemMetricsHostModeDisabled InputSystemMetricsHostMode = "disabled"
)

func (e InputSystemMetricsHostMode) ToPointer() *InputSystemMetricsHostMode {
	return &e
}

// InputSystemMetricsSystemMode - Select the level of detail for system metrics
type InputSystemMetricsSystemMode string

const (
	// InputSystemMetricsSystemModeBasic Basic
	InputSystemMetricsSystemModeBasic InputSystemMetricsSystemMode = "basic"
	// InputSystemMetricsSystemModeAll All
	InputSystemMetricsSystemModeAll InputSystemMetricsSystemMode = "all"
	// InputSystemMetricsSystemModeCustom Custom
	InputSystemMetricsSystemModeCustom InputSystemMetricsSystemMode = "custom"
	// InputSystemMetricsSystemModeDisabled Disabled
	InputSystemMetricsSystemModeDisabled InputSystemMetricsSystemMode = "disabled"
)

func (e InputSystemMetricsSystemMode) ToPointer() *InputSystemMetricsSystemMode {
	return &e
}

type InputSystemMetricsSystem struct {
	// Select the level of detail for system metrics
	Mode *InputSystemMetricsSystemMode `default:"basic" json:"mode"`
	// Generate metrics for the numbers of processes in various states
	Processes *bool `default:"false" json:"processes"`
}

func (i InputSystemMetricsSystem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsSystem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsSystem) GetMode() *InputSystemMetricsSystemMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsSystem) GetProcesses() *bool {
	if i == nil {
		return nil
	}
	return i.Processes
}

// InputSystemMetricsCPUMode - Select the level of detail for CPU metrics
type InputSystemMetricsCPUMode string

const (
	// InputSystemMetricsCPUModeBasic Basic
	InputSystemMetricsCPUModeBasic InputSystemMetricsCPUMode = "basic"
	// InputSystemMetricsCPUModeAll All
	InputSystemMetricsCPUModeAll InputSystemMetricsCPUMode = "all"
	// InputSystemMetricsCPUModeCustom Custom
	InputSystemMetricsCPUModeCustom InputSystemMetricsCPUMode = "custom"
	// InputSystemMetricsCPUModeDisabled Disabled
	InputSystemMetricsCPUModeDisabled InputSystemMetricsCPUMode = "disabled"
)

func (e InputSystemMetricsCPUMode) ToPointer() *InputSystemMetricsCPUMode {
	return &e
}

type InputSystemMetricsCPU struct {
	// Select the level of detail for CPU metrics
	Mode *InputSystemMetricsCPUMode `default:"basic" json:"mode"`
	// Generate metrics for each CPU
	PerCPU *bool `default:"false" json:"perCpu"`
	// Generate metrics for all CPU states
	Detail *bool `default:"false" json:"detail"`
	// Generate raw, monotonic CPU time counters
	Time *bool `default:"false" json:"time"`
}

func (i InputSystemMetricsCPU) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsCPU) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsCPU) GetMode() *InputSystemMetricsCPUMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsCPU) GetPerCPU() *bool {
	if i == nil {
		return nil
	}
	return i.PerCPU
}

func (i *InputSystemMetricsCPU) GetDetail() *bool {
	if i == nil {
		return nil
	}
	return i.Detail
}

func (i *InputSystemMetricsCPU) GetTime() *bool {
	if i == nil {
		return nil
	}
	return i.Time
}

// InputSystemMetricsMemoryMode - Select the level of detail for memory metrics
type InputSystemMetricsMemoryMode string

const (
	// InputSystemMetricsMemoryModeBasic Basic
	InputSystemMetricsMemoryModeBasic InputSystemMetricsMemoryMode = "basic"
	// InputSystemMetricsMemoryModeAll All
	InputSystemMetricsMemoryModeAll InputSystemMetricsMemoryMode = "all"
	// InputSystemMetricsMemoryModeCustom Custom
	InputSystemMetricsMemoryModeCustom InputSystemMetricsMemoryMode = "custom"
	// InputSystemMetricsMemoryModeDisabled Disabled
	InputSystemMetricsMemoryModeDisabled InputSystemMetricsMemoryMode = "disabled"
)

func (e InputSystemMetricsMemoryMode) ToPointer() *InputSystemMetricsMemoryMode {
	return &e
}

type InputSystemMetricsMemory struct {
	// Select the level of detail for memory metrics
	Mode *InputSystemMetricsMemoryMode `default:"basic" json:"mode"`
	// Generate metrics for all memory states
	Detail *bool `default:"false" json:"detail"`
}

func (i InputSystemMetricsMemory) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsMemory) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsMemory) GetMode() *InputSystemMetricsMemoryMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsMemory) GetDetail() *bool {
	if i == nil {
		return nil
	}
	return i.Detail
}

// InputSystemMetricsNetworkMode - Select the level of detail for network metrics
type InputSystemMetricsNetworkMode string

const (
	// InputSystemMetricsNetworkModeBasic Basic
	InputSystemMetricsNetworkModeBasic InputSystemMetricsNetworkMode = "basic"
	// InputSystemMetricsNetworkModeAll All
	InputSystemMetricsNetworkModeAll InputSystemMetricsNetworkMode = "all"
	// InputSystemMetricsNetworkModeCustom Custom
	InputSystemMetricsNetworkModeCustom InputSystemMetricsNetworkMode = "custom"
	// InputSystemMetricsNetworkModeDisabled Disabled
	InputSystemMetricsNetworkModeDisabled InputSystemMetricsNetworkMode = "disabled"
)

func (e InputSystemMetricsNetworkMode) ToPointer() *InputSystemMetricsNetworkMode {
	return &e
}

type InputSystemMetricsNetwork struct {
	// Select the level of detail for network metrics
	Mode *InputSystemMetricsNetworkMode `default:"basic" json:"mode"`
	// Generate full network metrics
	Detail *bool `default:"false" json:"detail"`
	// Generate protocol metrics for ICMP, ICMPMsg, IP, TCP, UDP and UDPLite
	Protocols *bool `default:"false" json:"protocols"`
	// Network interfaces to include/exclude. Examples: eth0, !lo. All interfaces are included if this list is empty.
	Devices []string `json:"devices,omitempty"`
	// Generate separate metrics for each interface
	PerInterface *bool `default:"false" json:"perInterface"`
}

func (i InputSystemMetricsNetwork) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsNetwork) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsNetwork) GetMode() *InputSystemMetricsNetworkMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsNetwork) GetDetail() *bool {
	if i == nil {
		return nil
	}
	return i.Detail
}

func (i *InputSystemMetricsNetwork) GetProtocols() *bool {
	if i == nil {
		return nil
	}
	return i.Protocols
}

func (i *InputSystemMetricsNetwork) GetDevices() []string {
	if i == nil {
		return nil
	}
	return i.Devices
}

func (i *InputSystemMetricsNetwork) GetPerInterface() *bool {
	if i == nil {
		return nil
	}
	return i.PerInterface
}

// InputSystemMetricsDiskMode - Select the level of detail for disk metrics
type InputSystemMetricsDiskMode string

const (
	// InputSystemMetricsDiskModeBasic Basic
	InputSystemMetricsDiskModeBasic InputSystemMetricsDiskMode = "basic"
	// InputSystemMetricsDiskModeAll All
	InputSystemMetricsDiskModeAll InputSystemMetricsDiskMode = "all"
	// InputSystemMetricsDiskModeCustom Custom
	InputSystemMetricsDiskModeCustom InputSystemMetricsDiskMode = "custom"
	// InputSystemMetricsDiskModeDisabled Disabled
	InputSystemMetricsDiskModeDisabled InputSystemMetricsDiskMode = "disabled"
)

func (e InputSystemMetricsDiskMode) ToPointer() *InputSystemMetricsDiskMode {
	return &e
}

type InputSystemMetricsDisk struct {
	// Select the level of detail for disk metrics
	Mode *InputSystemMetricsDiskMode `default:"basic" json:"mode"`
	// Generate full disk metrics
	Detail *bool `default:"false" json:"detail"`
	// Generate filesystem inode metrics
	Inodes *bool `default:"false" json:"inodes"`
	// Block devices to include/exclude. Examples: sda*, !loop*. Wildcards and ! (not) operators are supported. All devices are included if this list is empty.
	Devices []string `json:"devices,omitempty"`
	// Filesystem mountpoints to include/exclude. Examples: /, /home, !/proc*, !/tmp. Wildcards and ! (not) operators are supported. All mountpoints are included if this list is empty.
	Mountpoints []string `json:"mountpoints,omitempty"`
	// Filesystem types to include/exclude. Examples: ext4, !*tmpfs, !squashfs. Wildcards and ! (not) operators are supported. All types are included if this list is empty.
	Fstypes []string `json:"fstypes,omitempty"`
	// Generate separate metrics for each device
	PerDevice *bool `default:"false" json:"perDevice"`
}

func (i InputSystemMetricsDisk) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsDisk) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsDisk) GetMode() *InputSystemMetricsDiskMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsDisk) GetDetail() *bool {
	if i == nil {
		return nil
	}
	return i.Detail
}

func (i *InputSystemMetricsDisk) GetInodes() *bool {
	if i == nil {
		return nil
	}
	return i.Inodes
}

func (i *InputSystemMetricsDisk) GetDevices() []string {
	if i == nil {
		return nil
	}
	return i.Devices
}

func (i *InputSystemMetricsDisk) GetMountpoints() []string {
	if i == nil {
		return nil
	}
	return i.Mountpoints
}

func (i *InputSystemMetricsDisk) GetFstypes() []string {
	if i == nil {
		return nil
	}
	return i.Fstypes
}

func (i *InputSystemMetricsDisk) GetPerDevice() *bool {
	if i == nil {
		return nil
	}
	return i.PerDevice
}

type InputSystemMetricsCustom struct {
	System  *InputSystemMetricsSystem  `json:"system,omitempty"`
	CPU     *InputSystemMetricsCPU     `json:"cpu,omitempty"`
	Memory  *InputSystemMetricsMemory  `json:"memory,omitempty"`
	Network *InputSystemMetricsNetwork `json:"network,omitempty"`
	Disk    *InputSystemMetricsDisk    `json:"disk,omitempty"`
}

func (i InputSystemMetricsCustom) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsCustom) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsCustom) GetSystem() *InputSystemMetricsSystem {
	if i == nil {
		return nil
	}
	return i.System
}

func (i *InputSystemMetricsCustom) GetCPU() *InputSystemMetricsCPU {
	if i == nil {
		return nil
	}
	return i.CPU
}

func (i *InputSystemMetricsCustom) GetMemory() *InputSystemMetricsMemory {
	if i == nil {
		return nil
	}
	return i.Memory
}

func (i *InputSystemMetricsCustom) GetNetwork() *InputSystemMetricsNetwork {
	if i == nil {
		return nil
	}
	return i.Network
}

func (i *InputSystemMetricsCustom) GetDisk() *InputSystemMetricsDisk {
	if i == nil {
		return nil
	}
	return i.Disk
}

type InputSystemMetricsHost struct {
	// Select level of detail for host metrics
	Mode   *InputSystemMetricsHostMode `default:"basic" json:"mode"`
	Custom *InputSystemMetricsCustom   `json:"custom,omitempty"`
}

func (i InputSystemMetricsHost) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsHost) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsHost) GetMode() *InputSystemMetricsHostMode {
	if i == nil {
		return nil
	}
	return i.Mode
}

func (i *InputSystemMetricsHost) GetCustom() *InputSystemMetricsCustom {
	if i == nil {
		return nil
	}
	return i.Custom
}

type InputSystemMetricsSet struct {
	Name            string `json:"name"`
	Filter          string `json:"filter"`
	IncludeChildren *bool  `default:"false" json:"includeChildren"`
}

func (i InputSystemMetricsSet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsSet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "filter"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsSet) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputSystemMetricsSet) GetFilter() string {
	if i == nil {
		return ""
	}
	return i.Filter
}

func (i *InputSystemMetricsSet) GetIncludeChildren() *bool {
	if i == nil {
		return nil
	}
	return i.IncludeChildren
}

type InputSystemMetricsProcess struct {
	// Configure sets to collect process metrics
	Sets []InputSystemMetricsSet `json:"sets,omitempty"`
}

func (i InputSystemMetricsProcess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsProcess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsProcess) GetSets() []InputSystemMetricsSet {
	if i == nil {
		return nil
	}
	return i.Sets
}

// ContainerMode - Select the level of detail for container metrics
type ContainerMode string

const (
	// ContainerModeBasic Basic
	ContainerModeBasic ContainerMode = "basic"
	// ContainerModeAll All
	ContainerModeAll ContainerMode = "all"
	// ContainerModeCustom Custom
	ContainerModeCustom ContainerMode = "custom"
	// ContainerModeDisabled Disabled
	ContainerModeDisabled ContainerMode = "disabled"
)

func (e ContainerMode) ToPointer() *ContainerMode {
	return &e
}

type InputSystemMetricsFilter struct {
	Expr string `json:"expr"`
}

func (i InputSystemMetricsFilter) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsFilter) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"expr"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsFilter) GetExpr() string {
	if i == nil {
		return ""
	}
	return i.Expr
}

type Container struct {
	// Select the level of detail for container metrics
	Mode *ContainerMode `default:"basic" json:"mode"`
	// Full paths for Docker's UNIX-domain socket
	DockerSocket []string `json:"dockerSocket,omitempty"`
	// Timeout, in seconds, for the Docker API
	DockerTimeout *float64 `default:"5" json:"dockerTimeout"`
	// Containers matching any of these will be included. All are included if no filters are added.
	Filters []InputSystemMetricsFilter `json:"filters,omitempty"`
	// Include stopped and paused containers
	AllContainers *bool `default:"false" json:"allContainers"`
	// Generate separate metrics for each device
	PerDevice *bool `default:"false" json:"perDevice"`
	// Generate full container metrics
	Detail *bool `default:"false" json:"detail"`
}

func (c Container) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Container) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *Container) GetMode() *ContainerMode {
	if c == nil {
		return nil
	}
	return c.Mode
}

func (c *Container) GetDockerSocket() []string {
	if c == nil {
		return nil
	}
	return c.DockerSocket
}

func (c *Container) GetDockerTimeout() *float64 {
	if c == nil {
		return nil
	}
	return c.DockerTimeout
}

func (c *Container) GetFilters() []InputSystemMetricsFilter {
	if c == nil {
		return nil
	}
	return c.Filters
}

func (c *Container) GetAllContainers() *bool {
	if c == nil {
		return nil
	}
	return c.AllContainers
}

func (c *Container) GetPerDevice() *bool {
	if c == nil {
		return nil
	}
	return c.PerDevice
}

func (c *Container) GetDetail() *bool {
	if c == nil {
		return nil
	}
	return c.Detail
}

type InputSystemMetricsMetadatum struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (i InputSystemMetricsMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"name", "value"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsMetadatum) GetName() string {
	if i == nil {
		return ""
	}
	return i.Name
}

func (i *InputSystemMetricsMetadatum) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type InputSystemMetricsDataCompressionFormat string

const (
	InputSystemMetricsDataCompressionFormatNone InputSystemMetricsDataCompressionFormat = "none"
	InputSystemMetricsDataCompressionFormatGzip InputSystemMetricsDataCompressionFormat = "gzip"
)

func (e InputSystemMetricsDataCompressionFormat) ToPointer() *InputSystemMetricsDataCompressionFormat {
	return &e
}

type InputSystemMetricsPersistence struct {
	// Spool metrics to disk for Cribl Edge and Search
	Enable *bool `default:"false" json:"enable"`
	// Time span for each file bucket
	TimeWindow *string `default:"10m" json:"timeWindow"`
	// Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
	MaxDataSize *string `default:"1GB" json:"maxDataSize"`
	// Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
	MaxDataTime *string                                  `default:"24h" json:"maxDataTime"`
	Compress    *InputSystemMetricsDataCompressionFormat `default:"gzip" json:"compress"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/system_metrics
	DestPath *string `default:"$CRIBL_HOME/state/system_metrics" json:"destPath"`
}

func (i InputSystemMetricsPersistence) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetricsPersistence) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetricsPersistence) GetEnable() *bool {
	if i == nil {
		return nil
	}
	return i.Enable
}

func (i *InputSystemMetricsPersistence) GetTimeWindow() *string {
	if i == nil {
		return nil
	}
	return i.TimeWindow
}

func (i *InputSystemMetricsPersistence) GetMaxDataSize() *string {
	if i == nil {
		return nil
	}
	return i.MaxDataSize
}

func (i *InputSystemMetricsPersistence) GetMaxDataTime() *string {
	if i == nil {
		return nil
	}
	return i.MaxDataTime
}

func (i *InputSystemMetricsPersistence) GetCompress() *InputSystemMetricsDataCompressionFormat {
	if i == nil {
		return nil
	}
	return i.Compress
}

func (i *InputSystemMetricsPersistence) GetDestPath() *string {
	if i == nil {
		return nil
	}
	return i.DestPath
}

type InputSystemMetrics struct {
	// Unique ID for this input
	ID       *string                `json:"id,omitempty"`
	Type     InputSystemMetricsType `json:"type"`
	Disabled *bool                  `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputSystemMetricsConnection `json:"connections,omitempty"`
	Pq          *InputSystemMetricsPq          `json:"pq,omitempty"`
	// Time, in seconds, between consecutive metric collections. Default is 10 seconds.
	Interval  *float64                   `default:"10" json:"interval"`
	Host      *InputSystemMetricsHost    `json:"host,omitempty"`
	Process   *InputSystemMetricsProcess `json:"process,omitempty"`
	Container *Container                 `json:"container,omitempty"`
	// Fields to add to events from this input
	Metadata    []InputSystemMetricsMetadatum  `json:"metadata,omitempty"`
	Persistence *InputSystemMetricsPersistence `json:"persistence,omitempty"`
	Description *string                        `json:"description,omitempty"`
}

func (i InputSystemMetrics) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSystemMetrics) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (i *InputSystemMetrics) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *InputSystemMetrics) GetType() InputSystemMetricsType {
	if i == nil {
		return InputSystemMetricsType("")
	}
	return i.Type
}

func (i *InputSystemMetrics) GetDisabled() *bool {
	if i == nil {
		return nil
	}
	return i.Disabled
}

func (i *InputSystemMetrics) GetPipeline() *string {
	if i == nil {
		return nil
	}
	return i.Pipeline
}

func (i *InputSystemMetrics) GetSendToRoutes() *bool {
	if i == nil {
		return nil
	}
	return i.SendToRoutes
}

func (i *InputSystemMetrics) GetEnvironment() *string {
	if i == nil {
		return nil
	}
	return i.Environment
}

func (i *InputSystemMetrics) GetPqEnabled() *bool {
	if i == nil {
		return nil
	}
	return i.PqEnabled
}

func (i *InputSystemMetrics) GetStreamtags() []string {
	if i == nil {
		return nil
	}
	return i.Streamtags
}

func (i *InputSystemMetrics) GetConnections() []InputSystemMetricsConnection {
	if i == nil {
		return nil
	}
	return i.Connections
}

func (i *InputSystemMetrics) GetPq() *InputSystemMetricsPq {
	if i == nil {
		return nil
	}
	return i.Pq
}

func (i *InputSystemMetrics) GetInterval() *float64 {
	if i == nil {
		return nil
	}
	return i.Interval
}

func (i *InputSystemMetrics) GetHost() *InputSystemMetricsHost {
	if i == nil {
		return nil
	}
	return i.Host
}

func (i *InputSystemMetrics) GetProcess() *InputSystemMetricsProcess {
	if i == nil {
		return nil
	}
	return i.Process
}

func (i *InputSystemMetrics) GetContainer() *Container {
	if i == nil {
		return nil
	}
	return i.Container
}

func (i *InputSystemMetrics) GetMetadata() []InputSystemMetricsMetadatum {
	if i == nil {
		return nil
	}
	return i.Metadata
}

func (i *InputSystemMetrics) GetPersistence() *InputSystemMetricsPersistence {
	if i == nil {
		return nil
	}
	return i.Persistence
}

func (i *InputSystemMetrics) GetDescription() *string {
	if i == nil {
		return nil
	}
	return i.Description
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

// ID - Unique function identifier.
type ID string

const (
	IDEval ID = "eval"
)

func (e ID) ToPointer() *ID {
	return &e
}

type Add struct {
	Name *string `json:"name,omitempty"`
	// JavaScript expression to compute the value (can be constant)
	Value string `json:"value"`
}

func (a Add) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Add) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"value"}); err != nil {
		return err
	}
	return nil
}

func (a *Add) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Add) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

type MappingRulesetEvalMappingFunctionConf struct {
	// Set of key-value pairs to evaluate and add/set
	Add []Add `json:"add,omitempty"`
}

func (m MappingRulesetEvalMappingFunctionConf) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MappingRulesetEvalMappingFunctionConf) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (m *MappingRulesetEvalMappingFunctionConf) GetAdd() []Add {
	if m == nil {
		return nil
	}
	return m.Add
}

type MappingRulesetEvalMappingFunction struct {
	// Unique function identifier.
	ID ID `json:"id"`
	// Filter expression controlling when this function runs
	Filter *string `json:"filter,omitempty"`
	// Optional function description
	Description *string `json:"description,omitempty"`
	// Indicates whether the function is disabled
	Disabled *bool                                  `json:"disabled,omitempty"`
	Final    *bool                                  `json:"final,omitempty"`
	Conf     *MappingRulesetEvalMappingFunctionConf `json:"conf,omitempty"`
}

func (m MappingRulesetEvalMappingFunction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MappingRulesetEvalMappingFunction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"id"}); err != nil {
		return err
	}
	return nil
}

func (m *MappingRulesetEvalMappingFunction) GetID() ID {
	if m == nil {
		return ID("")
	}
	return m.ID
}

func (m *MappingRulesetEvalMappingFunction) GetFilter() *string {
	if m == nil {
		return nil
	}
	return m.Filter
}

func (m *MappingRulesetEvalMappingFunction) GetDescription() *string {
	if m == nil {
		return nil
	}
	return m.Description
}

func (m *MappingRulesetEvalMappingFunction) GetDisabled() *bool {
	if m == nil {
		return nil
	}
	return m.Disabled
}

func (m *MappingRulesetEvalMappingFunction) GetFinal() *bool {
	if m == nil {
		return nil
	}
	return m.Final
}

func (m *MappingRulesetEvalMappingFunction) GetConf() *MappingRulesetEvalMappingFunctionConf {
	if m == nil {
		return nil
	}
	return m.Conf
}

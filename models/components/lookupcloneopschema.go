// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type AnyOf2 struct {
	Type string `json:"type"`
}

func (o *AnyOf2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type LookupCloneOpSchemaID struct {
	Type string `json:"type"`
}

func (o *LookupCloneOpSchemaID) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type LookupCloneOpSchemaType struct {
	Enum []string `json:"enum"`
	Type string   `json:"type"`
}

func (o *LookupCloneOpSchemaType) GetEnum() []string {
	if o == nil {
		return []string{}
	}
	return o.Enum
}

func (o *LookupCloneOpSchemaType) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type AnyOfProperties struct {
	ID   LookupCloneOpSchemaID   `json:"id"`
	Type LookupCloneOpSchemaType `json:"type"`
}

func (o *AnyOfProperties) GetID() LookupCloneOpSchemaID {
	if o == nil {
		return LookupCloneOpSchemaID{}
	}
	return o.ID
}

func (o *AnyOfProperties) GetType() LookupCloneOpSchemaType {
	if o == nil {
		return LookupCloneOpSchemaType{}
	}
	return o.Type
}

type AnyOf1 struct {
	AdditionalProperties bool            `json:"additionalProperties"`
	Properties           AnyOfProperties `json:"properties"`
	Required             []string        `json:"required"`
	Type                 string          `json:"type"`
}

func (o *AnyOf1) GetAdditionalProperties() bool {
	if o == nil {
		return false
	}
	return o.AdditionalProperties
}

func (o *AnyOf1) GetProperties() AnyOfProperties {
	if o == nil {
		return AnyOfProperties{}
	}
	return o.Properties
}

func (o *AnyOf1) GetRequired() []string {
	if o == nil {
		return []string{}
	}
	return o.Required
}

func (o *AnyOf1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type AnyOfUnionType string

const (
	AnyOfUnionTypeAnyOf1 AnyOfUnionType = "anyOf_1"
	AnyOfUnionTypeAnyOf2 AnyOfUnionType = "anyOf_2"
)

type AnyOfUnion struct {
	AnyOf1 *AnyOf1 `queryParam:"inline"`
	AnyOf2 *AnyOf2 `queryParam:"inline"`

	Type AnyOfUnionType
}

func CreateAnyOfUnionAnyOf1(anyOf1 AnyOf1) AnyOfUnion {
	typ := AnyOfUnionTypeAnyOf1

	return AnyOfUnion{
		AnyOf1: &anyOf1,
		Type:   typ,
	}
}

func CreateAnyOfUnionAnyOf2(anyOf2 AnyOf2) AnyOfUnion {
	typ := AnyOfUnionTypeAnyOf2

	return AnyOfUnion{
		AnyOf2: &anyOf2,
		Type:   typ,
	}
}

func (u *AnyOfUnion) UnmarshalJSON(data []byte) error {

	var anyOf2 AnyOf2 = AnyOf2{}
	if err := utils.UnmarshalJSON(data, &anyOf2, "", true, true); err == nil {
		u.AnyOf2 = &anyOf2
		u.Type = AnyOfUnionTypeAnyOf2
		return nil
	}

	var anyOf1 AnyOf1 = AnyOf1{}
	if err := utils.UnmarshalJSON(data, &anyOf1, "", true, true); err == nil {
		u.AnyOf1 = &anyOf1
		u.Type = AnyOfUnionTypeAnyOf1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AnyOfUnion", string(data))
}

func (u AnyOfUnion) MarshalJSON() ([]byte, error) {
	if u.AnyOf1 != nil {
		return utils.MarshalJSON(u.AnyOf1, "", true)
	}

	if u.AnyOf2 != nil {
		return utils.MarshalJSON(u.AnyOf2, "", true)
	}

	return nil, errors.New("could not marshal union type AnyOfUnion: all fields are null")
}

type Context struct {
	AnyOf []AnyOfUnion `json:"anyOf"`
}

func (o *Context) GetAnyOf() []AnyOfUnion {
	if o == nil {
		return []AnyOfUnion{}
	}
	return o.AnyOf
}

type NewID struct {
	Pattern string `json:"pattern"`
	Title   string `json:"title"`
	Type    string `json:"type"`
}

func (o *NewID) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

func (o *NewID) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *NewID) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type Properties struct {
	Context Context `json:"context"`
	NewID   NewID   `json:"newId"`
}

func (o *Properties) GetContext() Context {
	if o == nil {
		return Context{}
	}
	return o.Context
}

func (o *Properties) GetNewID() NewID {
	if o == nil {
		return NewID{}
	}
	return o.NewID
}

type LookupCloneOpSchema struct {
	Properties Properties `json:"properties"`
	Required   []string   `json:"required"`
	Type       string     `json:"type"`
}

func (o *LookupCloneOpSchema) GetProperties() Properties {
	if o == nil {
		return Properties{}
	}
	return o.Properties
}

func (o *LookupCloneOpSchema) GetRequired() []string {
	if o == nil {
		return []string{}
	}
	return o.Required
}

func (o *LookupCloneOpSchema) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

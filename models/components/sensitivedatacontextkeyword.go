// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Placement string

const (
	PlacementBefore Placement = "before"
	PlacementAfter  Placement = "after"
)

func (e Placement) ToPointer() *Placement {
	return &e
}
func (e *Placement) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "before":
		fallthrough
	case "after":
		*e = Placement(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Placement: %v", v)
	}
}

type SensitiveDataContextKeyword struct {
	Distance  float64   `json:"distance"`
	Keyword   string    `json:"keyword"`
	Placement Placement `json:"placement"`
}

func (o *SensitiveDataContextKeyword) GetDistance() float64 {
	if o == nil {
		return 0.0
	}
	return o.Distance
}

func (o *SensitiveDataContextKeyword) GetKeyword() string {
	if o == nil {
		return ""
	}
	return o.Keyword
}

func (o *SensitiveDataContextKeyword) GetPlacement() Placement {
	if o == nil {
		return Placement("")
	}
	return o.Placement
}

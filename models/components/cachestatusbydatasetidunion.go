// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
)

type CacheStatusByDatasetID2 struct {
	Reason    string `json:"reason"`
	UsedCache bool   `json:"usedCache"`
}

func (c CacheStatusByDatasetID2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CacheStatusByDatasetID2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"reason", "usedCache"}); err != nil {
		return err
	}
	return nil
}

func (c *CacheStatusByDatasetID2) GetReason() string {
	if c == nil {
		return ""
	}
	return c.Reason
}

func (c *CacheStatusByDatasetID2) GetUsedCache() bool {
	if c == nil {
		return false
	}
	return c.UsedCache
}

type CacheStatusByDatasetID1 struct {
	UsedCache bool `json:"usedCache"`
}

func (c CacheStatusByDatasetID1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CacheStatusByDatasetID1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"usedCache"}); err != nil {
		return err
	}
	return nil
}

func (c *CacheStatusByDatasetID1) GetUsedCache() bool {
	if c == nil {
		return false
	}
	return c.UsedCache
}

type CacheStatusByDatasetIDUnionType string

const (
	CacheStatusByDatasetIDUnionTypeCacheStatusByDatasetID1 CacheStatusByDatasetIDUnionType = "CacheStatusByDatasetId_1"
	CacheStatusByDatasetIDUnionTypeCacheStatusByDatasetID2 CacheStatusByDatasetIDUnionType = "CacheStatusByDatasetId_2"
)

type CacheStatusByDatasetIDUnion struct {
	CacheStatusByDatasetID1 *CacheStatusByDatasetID1 `queryParam:"inline,name=CacheStatusByDatasetId"`
	CacheStatusByDatasetID2 *CacheStatusByDatasetID2 `queryParam:"inline,name=CacheStatusByDatasetId"`

	Type CacheStatusByDatasetIDUnionType
}

func CreateCacheStatusByDatasetIDUnionCacheStatusByDatasetID1(cacheStatusByDatasetID1 CacheStatusByDatasetID1) CacheStatusByDatasetIDUnion {
	typ := CacheStatusByDatasetIDUnionTypeCacheStatusByDatasetID1

	return CacheStatusByDatasetIDUnion{
		CacheStatusByDatasetID1: &cacheStatusByDatasetID1,
		Type:                    typ,
	}
}

func CreateCacheStatusByDatasetIDUnionCacheStatusByDatasetID2(cacheStatusByDatasetID2 CacheStatusByDatasetID2) CacheStatusByDatasetIDUnion {
	typ := CacheStatusByDatasetIDUnionTypeCacheStatusByDatasetID2

	return CacheStatusByDatasetIDUnion{
		CacheStatusByDatasetID2: &cacheStatusByDatasetID2,
		Type:                    typ,
	}
}

func (u *CacheStatusByDatasetIDUnion) UnmarshalJSON(data []byte) error {

	var cacheStatusByDatasetID2 CacheStatusByDatasetID2 = CacheStatusByDatasetID2{}
	if err := utils.UnmarshalJSON(data, &cacheStatusByDatasetID2, "", true, nil); err == nil {
		u.CacheStatusByDatasetID2 = &cacheStatusByDatasetID2
		u.Type = CacheStatusByDatasetIDUnionTypeCacheStatusByDatasetID2
		return nil
	}

	var cacheStatusByDatasetID1 CacheStatusByDatasetID1 = CacheStatusByDatasetID1{}
	if err := utils.UnmarshalJSON(data, &cacheStatusByDatasetID1, "", true, nil); err == nil {
		u.CacheStatusByDatasetID1 = &cacheStatusByDatasetID1
		u.Type = CacheStatusByDatasetIDUnionTypeCacheStatusByDatasetID1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CacheStatusByDatasetIDUnion", string(data))
}

func (u CacheStatusByDatasetIDUnion) MarshalJSON() ([]byte, error) {
	if u.CacheStatusByDatasetID1 != nil {
		return utils.MarshalJSON(u.CacheStatusByDatasetID1, "", true)
	}

	if u.CacheStatusByDatasetID2 != nil {
		return utils.MarshalJSON(u.CacheStatusByDatasetID2, "", true)
	}

	return nil, errors.New("could not marshal union type CacheStatusByDatasetIDUnion: all fields are null")
}

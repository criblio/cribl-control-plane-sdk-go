// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

type GetVersionRequest struct {
	// The <code>id</code> of the Worker Group or Edge Fleet to get the commit history for.
	Group *string `queryParam:"style=form,explode=true,name=group"`
	// Maximum number of commits to return in the response for this request.
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
}

func (o *GetVersionRequest) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *GetVersionRequest) GetCount() *float64 {
	if o == nil {
		return nil
	}
	return o.Count
}

// GetVersionResponseBody - a list of GitLogResult objects
type GetVersionResponseBody struct {
	// number of items present in the items array
	Count *int64                    `json:"count,omitempty"`
	Items []components.GitLogResult `json:"items,omitempty"`
}

func (o *GetVersionResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetVersionResponseBody) GetItems() []components.GitLogResult {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetVersionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of GitLogResult objects
	Object *GetVersionResponseBody
}

func (o *GetVersionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetVersionResponse) GetObject() *GetVersionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

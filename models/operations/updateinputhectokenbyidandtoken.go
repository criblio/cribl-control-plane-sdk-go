// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

type UpdateInputHecTokenByIDAndTokenRequest struct {
	// The <code>id</code> of the Splunk HEC Source.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The <code>id</code> of the HEC token to update.
	Token string `pathParam:"style=simple,explode=false,name=token"`
	// UpdateHecTokenRequest object
	UpdateHecTokenRequest components.UpdateHecTokenRequest `request:"mediaType=application/json"`
}

func (u *UpdateInputHecTokenByIDAndTokenRequest) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UpdateInputHecTokenByIDAndTokenRequest) GetToken() string {
	if u == nil {
		return ""
	}
	return u.Token
}

func (u *UpdateInputHecTokenByIDAndTokenRequest) GetUpdateHecTokenRequest() components.UpdateHecTokenRequest {
	if u == nil {
		return components.UpdateHecTokenRequest{}
	}
	return u.UpdateHecTokenRequest
}

// UpdateInputHecTokenByIDAndTokenResponseBody - a list of any objects
type UpdateInputHecTokenByIDAndTokenResponseBody struct {
	// number of items present in the items array
	Count *int64           `json:"count,omitempty"`
	Items []map[string]any `json:"items,omitempty"`
}

func (u *UpdateInputHecTokenByIDAndTokenResponseBody) GetCount() *int64 {
	if u == nil {
		return nil
	}
	return u.Count
}

func (u *UpdateInputHecTokenByIDAndTokenResponseBody) GetItems() []map[string]any {
	if u == nil {
		return nil
	}
	return u.Items
}

type UpdateInputHecTokenByIDAndTokenResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of any objects
	Object *UpdateInputHecTokenByIDAndTokenResponseBody
}

func (u *UpdateInputHecTokenByIDAndTokenResponse) GetHTTPMeta() components.HTTPMetadata {
	if u == nil {
		return components.HTTPMetadata{}
	}
	return u.HTTPMeta
}

func (u *UpdateInputHecTokenByIDAndTokenResponse) GetObject() *UpdateInputHecTokenByIDAndTokenResponseBody {
	if u == nil {
		return nil
	}
	return u.Object
}

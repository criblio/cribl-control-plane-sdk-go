// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

// DeleteConfigGroupByProductAndIDProduct - Name of the Cribl product to get the Worker Groups or Edge Fleets for.
type DeleteConfigGroupByProductAndIDProduct string

const (
	DeleteConfigGroupByProductAndIDProductStream DeleteConfigGroupByProductAndIDProduct = "stream"
	DeleteConfigGroupByProductAndIDProductEdge   DeleteConfigGroupByProductAndIDProduct = "edge"
)

func (e DeleteConfigGroupByProductAndIDProduct) ToPointer() *DeleteConfigGroupByProductAndIDProduct {
	return &e
}
func (e *DeleteConfigGroupByProductAndIDProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		*e = DeleteConfigGroupByProductAndIDProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteConfigGroupByProductAndIDProduct: %v", v)
	}
}

type DeleteConfigGroupByProductAndIDRequest struct {
	// Name of the Cribl product to get the Worker Groups or Edge Fleets for.
	Product DeleteConfigGroupByProductAndIDProduct `pathParam:"style=simple,explode=false,name=product"`
	// The <code>id</code> of the Worker Group or Edge Fleet to delete.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

func (o *DeleteConfigGroupByProductAndIDRequest) GetProduct() DeleteConfigGroupByProductAndIDProduct {
	if o == nil {
		return DeleteConfigGroupByProductAndIDProduct("")
	}
	return o.Product
}

func (o *DeleteConfigGroupByProductAndIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// DeleteConfigGroupByProductAndIDResponseBody - a list of ConfigGroup objects
type DeleteConfigGroupByProductAndIDResponseBody struct {
	// number of items present in the items array
	Count *int64                   `json:"count,omitempty"`
	Items []components.ConfigGroup `json:"items,omitempty"`
}

func (o *DeleteConfigGroupByProductAndIDResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *DeleteConfigGroupByProductAndIDResponseBody) GetItems() []components.ConfigGroup {
	if o == nil {
		return nil
	}
	return o.Items
}

type DeleteConfigGroupByProductAndIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of ConfigGroup objects
	Object *DeleteConfigGroupByProductAndIDResponseBody
}

func (o *DeleteConfigGroupByProductAndIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DeleteConfigGroupByProductAndIDResponse) GetObject() *DeleteConfigGroupByProductAndIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

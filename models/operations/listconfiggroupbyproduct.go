// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

// ListConfigGroupByProductProduct - Name of the Cribl product to get the Worker Groups or Edge Fleets for.
type ListConfigGroupByProductProduct string

const (
	ListConfigGroupByProductProductStream ListConfigGroupByProductProduct = "stream"
	ListConfigGroupByProductProductEdge   ListConfigGroupByProductProduct = "edge"
)

func (e ListConfigGroupByProductProduct) ToPointer() *ListConfigGroupByProductProduct {
	return &e
}
func (e *ListConfigGroupByProductProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		*e = ListConfigGroupByProductProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListConfigGroupByProductProduct: %v", v)
	}
}

type ListConfigGroupByProductRequest struct {
	// Comma-separated list of additional properties to include in the response. Available values are <code>git.commit</code>, <code>git.localChanges</code>, and <code>git.log</code>.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Name of the Cribl product to get the Worker Groups or Edge Fleets for.
	Product ListConfigGroupByProductProduct `pathParam:"style=simple,explode=false,name=product"`
}

func (o *ListConfigGroupByProductRequest) GetFields() *string {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *ListConfigGroupByProductRequest) GetProduct() ListConfigGroupByProductProduct {
	if o == nil {
		return ListConfigGroupByProductProduct("")
	}
	return o.Product
}

// ListConfigGroupByProductResponseBody - a list of ConfigGroup objects
type ListConfigGroupByProductResponseBody struct {
	// number of items present in the items array
	Count *int64                   `json:"count,omitempty"`
	Items []components.ConfigGroup `json:"items,omitempty"`
}

func (o *ListConfigGroupByProductResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListConfigGroupByProductResponseBody) GetItems() []components.ConfigGroup {
	if o == nil {
		return nil
	}
	return o.Items
}

type ListConfigGroupByProductResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of ConfigGroup objects
	Object *ListConfigGroupByProductResponseBody
}

func (o *ListConfigGroupByProductResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListConfigGroupByProductResponse) GetObject() *ListConfigGroupByProductResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

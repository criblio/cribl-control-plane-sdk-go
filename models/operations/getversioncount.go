// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

type GetVersionCountRequest struct {
	// The <code>id</code> of the Worker Group or Edge Fleet to get the count for.
	GroupID *string `queryParam:"style=form,explode=true,name=groupId"`
	// The Git commit hash to use as the starting point for the count.
	ID *string `queryParam:"style=form,explode=true,name=ID"`
}

func (g *GetVersionCountRequest) GetGroupID() *string {
	if g == nil {
		return nil
	}
	return g.GroupID
}

func (g *GetVersionCountRequest) GetID() *string {
	if g == nil {
		return nil
	}
	return g.ID
}

// GetVersionCountResponseBody - a list of GitCountResult objects
type GetVersionCountResponseBody struct {
	// number of items present in the items array
	Count *int64                      `json:"count,omitempty"`
	Items []components.GitCountResult `json:"items,omitempty"`
}

func (g *GetVersionCountResponseBody) GetCount() *int64 {
	if g == nil {
		return nil
	}
	return g.Count
}

func (g *GetVersionCountResponseBody) GetItems() []components.GitCountResult {
	if g == nil {
		return nil
	}
	return g.Items
}

type GetVersionCountResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of GitCountResult objects
	Object *GetVersionCountResponseBody
}

func (g *GetVersionCountResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetVersionCountResponse) GetObject() *GetVersionCountResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}

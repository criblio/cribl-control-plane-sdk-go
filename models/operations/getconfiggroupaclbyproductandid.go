// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

// GetConfigGroupACLByProductAndIDProduct - Name of the Cribl product to get the Worker Groups or Edge Fleets for.
type GetConfigGroupACLByProductAndIDProduct string

const (
	GetConfigGroupACLByProductAndIDProductStream GetConfigGroupACLByProductAndIDProduct = "stream"
	GetConfigGroupACLByProductAndIDProductEdge   GetConfigGroupACLByProductAndIDProduct = "edge"
)

func (e GetConfigGroupACLByProductAndIDProduct) ToPointer() *GetConfigGroupACLByProductAndIDProduct {
	return &e
}
func (e *GetConfigGroupACLByProductAndIDProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		*e = GetConfigGroupACLByProductAndIDProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigGroupACLByProductAndIDProduct: %v", v)
	}
}

// GetConfigGroupACLByProductAndIDType - Filter for limiting the response to ACL entries for the specified RBAC resource type.
type GetConfigGroupACLByProductAndIDType string

const (
	GetConfigGroupACLByProductAndIDTypeGroups           GetConfigGroupACLByProductAndIDType = "groups"
	GetConfigGroupACLByProductAndIDTypeDatasets         GetConfigGroupACLByProductAndIDType = "datasets"
	GetConfigGroupACLByProductAndIDTypeDatasetProviders GetConfigGroupACLByProductAndIDType = "dataset-providers"
	GetConfigGroupACLByProductAndIDTypeProjects         GetConfigGroupACLByProductAndIDType = "projects"
	GetConfigGroupACLByProductAndIDTypeDashboards       GetConfigGroupACLByProductAndIDType = "dashboards"
	GetConfigGroupACLByProductAndIDTypeMacros           GetConfigGroupACLByProductAndIDType = "macros"
	GetConfigGroupACLByProductAndIDTypeNotebooks        GetConfigGroupACLByProductAndIDType = "notebooks"
	GetConfigGroupACLByProductAndIDTypeInsights         GetConfigGroupACLByProductAndIDType = "insights"
)

func (e GetConfigGroupACLByProductAndIDType) ToPointer() *GetConfigGroupACLByProductAndIDType {
	return &e
}
func (e *GetConfigGroupACLByProductAndIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "groups":
		fallthrough
	case "datasets":
		fallthrough
	case "dataset-providers":
		fallthrough
	case "projects":
		fallthrough
	case "dashboards":
		fallthrough
	case "macros":
		fallthrough
	case "notebooks":
		fallthrough
	case "insights":
		*e = GetConfigGroupACLByProductAndIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigGroupACLByProductAndIDType: %v", v)
	}
}

type GetConfigGroupACLByProductAndIDRequest struct {
	// Name of the Cribl product to get the Worker Groups or Edge Fleets for.
	Product GetConfigGroupACLByProductAndIDProduct `pathParam:"style=simple,explode=false,name=product"`
	// The <code>id</code> of the Worker Group or Edge Fleet to get the ACL for.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Filter for limiting the response to ACL entries for the specified RBAC resource type.
	Type *GetConfigGroupACLByProductAndIDType `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetConfigGroupACLByProductAndIDRequest) GetProduct() GetConfigGroupACLByProductAndIDProduct {
	if o == nil {
		return GetConfigGroupACLByProductAndIDProduct("")
	}
	return o.Product
}

func (o *GetConfigGroupACLByProductAndIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigGroupACLByProductAndIDRequest) GetType() *GetConfigGroupACLByProductAndIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetConfigGroupACLByProductAndIDResponseBody - a list of UserAccessControlList objects
type GetConfigGroupACLByProductAndIDResponseBody struct {
	// number of items present in the items array
	Count *int64                             `json:"count,omitempty"`
	Items []components.UserAccessControlList `json:"items,omitempty"`
}

func (o *GetConfigGroupACLByProductAndIDResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetConfigGroupACLByProductAndIDResponseBody) GetItems() []components.UserAccessControlList {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetConfigGroupACLByProductAndIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of UserAccessControlList objects
	Object *GetConfigGroupACLByProductAndIDResponseBody
}

func (o *GetConfigGroupACLByProductAndIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConfigGroupACLByProductAndIDResponse) GetObject() *GetConfigGroupACLByProductAndIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

// UpdateConfigGroupByProductAndIDProduct - Name of the Cribl product to get the Worker Groups or Edge Fleets for.
type UpdateConfigGroupByProductAndIDProduct string

const (
	UpdateConfigGroupByProductAndIDProductStream UpdateConfigGroupByProductAndIDProduct = "stream"
	UpdateConfigGroupByProductAndIDProductEdge   UpdateConfigGroupByProductAndIDProduct = "edge"
)

func (e UpdateConfigGroupByProductAndIDProduct) ToPointer() *UpdateConfigGroupByProductAndIDProduct {
	return &e
}
func (e *UpdateConfigGroupByProductAndIDProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		*e = UpdateConfigGroupByProductAndIDProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateConfigGroupByProductAndIDProduct: %v", v)
	}
}

type UpdateConfigGroupByProductAndIDRequest struct {
	// Name of the Cribl product to get the Worker Groups or Edge Fleets for.
	Product UpdateConfigGroupByProductAndIDProduct `pathParam:"style=simple,explode=false,name=product"`
	// The <code>id</code> of the Worker Group or Edge Fleet to update.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// ConfigGroup object
	ConfigGroup components.ConfigGroup `request:"mediaType=application/json"`
}

func (o *UpdateConfigGroupByProductAndIDRequest) GetProduct() UpdateConfigGroupByProductAndIDProduct {
	if o == nil {
		return UpdateConfigGroupByProductAndIDProduct("")
	}
	return o.Product
}

func (o *UpdateConfigGroupByProductAndIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateConfigGroupByProductAndIDRequest) GetConfigGroup() components.ConfigGroup {
	if o == nil {
		return components.ConfigGroup{}
	}
	return o.ConfigGroup
}

// UpdateConfigGroupByProductAndIDResponseBody - a list of ConfigGroup objects
type UpdateConfigGroupByProductAndIDResponseBody struct {
	// number of items present in the items array
	Count *int64                   `json:"count,omitempty"`
	Items []components.ConfigGroup `json:"items,omitempty"`
}

func (o *UpdateConfigGroupByProductAndIDResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *UpdateConfigGroupByProductAndIDResponseBody) GetItems() []components.ConfigGroup {
	if o == nil {
		return nil
	}
	return o.Items
}

type UpdateConfigGroupByProductAndIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of ConfigGroup objects
	Object *UpdateConfigGroupByProductAndIDResponseBody
}

func (o *UpdateConfigGroupByProductAndIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateConfigGroupByProductAndIDResponse) GetObject() *UpdateConfigGroupByProductAndIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

// CreateConfigGroupByProductProduct - Name of the Cribl product to add the Worker Group or Edge Fleet to.
type CreateConfigGroupByProductProduct string

const (
	CreateConfigGroupByProductProductStream CreateConfigGroupByProductProduct = "stream"
	CreateConfigGroupByProductProductEdge   CreateConfigGroupByProductProduct = "edge"
)

func (e CreateConfigGroupByProductProduct) ToPointer() *CreateConfigGroupByProductProduct {
	return &e
}
func (e *CreateConfigGroupByProductProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		*e = CreateConfigGroupByProductProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigGroupByProductProduct: %v", v)
	}
}

type CreateConfigGroupByProductRequest struct {
	// Name of the Cribl product to add the Worker Group or Edge Fleet to.
	Product CreateConfigGroupByProductProduct `pathParam:"style=simple,explode=false,name=product"`
	// ConfigGroup object
	ConfigGroup components.ConfigGroup `request:"mediaType=application/json"`
}

func (o *CreateConfigGroupByProductRequest) GetProduct() CreateConfigGroupByProductProduct {
	if o == nil {
		return CreateConfigGroupByProductProduct("")
	}
	return o.Product
}

func (o *CreateConfigGroupByProductRequest) GetConfigGroup() components.ConfigGroup {
	if o == nil {
		return components.ConfigGroup{}
	}
	return o.ConfigGroup
}

// CreateConfigGroupByProductResponseBody - a list of ConfigGroup objects
type CreateConfigGroupByProductResponseBody struct {
	// number of items present in the items array
	Count *int64                   `json:"count,omitempty"`
	Items []components.ConfigGroup `json:"items,omitempty"`
}

func (o *CreateConfigGroupByProductResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *CreateConfigGroupByProductResponseBody) GetItems() []components.ConfigGroup {
	if o == nil {
		return nil
	}
	return o.Items
}

type CreateConfigGroupByProductResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of ConfigGroup objects
	Object *CreateConfigGroupByProductResponseBody
}

func (o *CreateConfigGroupByProductResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateConfigGroupByProductResponse) GetObject() *CreateConfigGroupByProductResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
)

// Mode - Filter for limiting the response by Cribl product: Cribl Stream (<code>worker</code>) or Cribl Edge (<code>managed-edge</code>).
type Mode string

const (
	ModeWorker      Mode = "worker"
	ModeManagedEdge Mode = "managed-edge"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "worker":
		fallthrough
	case "managed-edge":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type GetSummaryRequest struct {
	// Filter for limiting the response by Cribl product: Cribl Stream (<code>worker</code>) or Cribl Edge (<code>managed-edge</code>).
	Mode *Mode `queryParam:"style=form,explode=true,name=mode"`
}

func (o *GetSummaryRequest) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

// GetSummaryResponseBody - a list of DistributedSummary objects
type GetSummaryResponseBody struct {
	// number of items present in the items array
	Count *int64                          `json:"count,omitempty"`
	Items []components.DistributedSummary `json:"items,omitempty"`
}

func (o *GetSummaryResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetSummaryResponseBody) GetItems() []components.DistributedSummary {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetSummaryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of DistributedSummary objects
	Object *GetSummaryResponseBody
}

func (o *GetSummaryResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSummaryResponse) GetObject() *GetSummaryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestPipelines_ListPipeline(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listPipeline")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.ListPipeline(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListPipelineResponseBody{}, res.Object)

}

func TestPipelines_CreatePipeline(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createPipeline")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.CreatePipeline(ctx, components.Pipeline{
		ID:   "<id>",
		Conf: components.PipelineConf{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreatePipelineResponseBody{}, res.Object)

}

func TestPipelines_GetPipelineByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPipelineById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.GetPipelineByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetPipelineByIDResponseBody{}, res.Object)

}

func TestPipelines_UpdatePipelineByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updatePipelineById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.UpdatePipelineByID(ctx, "<id>", components.Pipeline{
		ID:   "<id>",
		Conf: components.PipelineConf{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdatePipelineByIDResponseBody{}, res.Object)

}

func TestPipelines_DeletePipelineByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deletePipelineById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.DeletePipelineByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeletePipelineByIDResponseBody{}, res.Object)

}

func TestPipelines_GetPipelineByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPipelineByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.GetPipelineByPack(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetPipelineByPackResponseBody{}, res.Object)

}

func TestPipelines_CreatePipelineByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createPipelineByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.CreatePipelineByPack(ctx, "<value>", components.Pipeline{
		ID:   "<id>",
		Conf: components.PipelineConf{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreatePipelineByPackResponseBody{}, res.Object)

}

func TestPipelines_GetPipelineByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPipelineByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.GetPipelineByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetPipelineByPackAndIDResponseBody{}, res.Object)

}

func TestPipelines_UpdatePipelineByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updatePipelineByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.UpdatePipelineByPackAndID(ctx, "<id>", "<value>", components.Pipeline{
		ID:   "<id>",
		Conf: components.PipelineConf{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdatePipelineByPackAndIDResponseBody{}, res.Object)

}

func TestPipelines_DeletePipelineByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deletePipelineByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Pipelines.DeletePipelineByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeletePipelineByPackAndIDResponseBody{}, res.Object)

}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestLookups_ListLookupFile(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listLookupFile")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.ListLookupFile(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListLookupFileResponseBody{}, res.Object)

}

func TestLookups_CreateLookupFile(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createLookupFile")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.CreateLookupFile(ctx, components.CreateLookupFileInputUnionLookupFileInput1(
		components.LookupFileInput1{
			ID: "<id>",
		},
	))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateLookupFileResponseBody{}, res.Object)

}

func TestLookups_UpdateLookupFile(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateLookupFile")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.UpdateLookupFile(ctx, "<value>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.LookupFileInfoResponse)
	assert.Equal(t, &components.LookupFileInfoResponse{
		Filename: "example.file",
		Rows:     8202.91,
		Size:     3894.55,
	}, res.LookupFileInfoResponse)

}

func TestLookups_GetLookupFileByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getLookupFileById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.GetLookupFileByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetLookupFileByIDResponseBody{}, res.Object)

}

func TestLookups_UpdateLookupFileByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateLookupFileById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.UpdateLookupFileByID(ctx, "<id>", components.CreateLookupFileInputUnionLookupFileInput1(
		components.LookupFileInput1{
			ID: "<id>",
		},
	))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateLookupFileByIDResponseBody{}, res.Object)

}

func TestLookups_DeleteLookupFileByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteLookupFileById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.DeleteLookupFileByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteLookupFileByIDResponseBody{}, res.Object)

}

func TestLookups_UpdateLookupFileCloneByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateLookupFileCloneById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Lookups.UpdateLookupFileCloneByID(ctx, "<id>", components.LookupCloneOpSchema{
		Properties: components.Properties{
			Context: components.Context{
				AnyOf: []components.AnyOfUnion{},
			},
			NewID: components.NewID{
				Pattern: "<value>",
				Title:   "<value>",
				Type:    "<value>",
			},
		},
		Required: []string{},
		Type:     "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateLookupFileCloneByIDResponseBody{}, res.Object)

}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDashboards_ListSearchDashboard(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listSearchDashboard")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Dashboards.ListSearchDashboard(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListSearchDashboardResponseBody{}, res.Object)

}

func TestDashboards_CreateSearchDashboard(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchDashboard")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Dashboards.CreateSearchDashboard(ctx, components.SearchDashboard{
		Created:   9377.15,
		CreatedBy: "<value>",
		Elements: []components.DashboardElement{
			components.CreateDashboardElementDashboardElementMarkdown(
				components.DashboardElementMarkdown{
					ID:      "<id>",
					Type:    components.DashboardElementTypeMarkdownDefault,
					Variant: components.VariantMarkdownMarkdown,
				},
			),
		},
		ID:       "<id>",
		Modified: 5003.17,
		Name:     "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSearchDashboardResponseBody{}, res.Object)

}

func TestDashboards_GetSearchDashboardByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchDashboardById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Dashboards.GetSearchDashboardByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSearchDashboardByIDResponseBody{}, res.Object)

}

func TestDashboards_UpdateSearchDashboardByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSearchDashboardById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Dashboards.UpdateSearchDashboardByID(ctx, "<id>", components.SearchDashboard{
		Created:   9322.04,
		CreatedBy: "<value>",
		Elements: []components.DashboardElement{
			components.CreateDashboardElementDashboardElementVisualization(
				components.DashboardElementVisualization{
					ID: "<id>",
					Search: components.CreateSearchQuerySearchQuerySaved(
						components.SearchQuerySaved{
							QueryID: "<id>",
							Type:    components.TypeSavedSaved,
						},
					),
					Type: components.CreateVisualizationElementTypeVisualizationElementTypeEnum2(
						components.VisualizationElementTypeEnum2ListEvents,
					),
				},
			),
		},
		ID:       "<id>",
		Modified: 2991.89,
		Name:     "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSearchDashboardByIDResponseBody{}, res.Object)

}

func TestDashboards_DeleteSearchDashboardByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteSearchDashboardById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Dashboards.DeleteSearchDashboardByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteSearchDashboardByIDResponseBody{}, res.Object)

}

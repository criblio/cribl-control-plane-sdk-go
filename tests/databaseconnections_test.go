// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDatabaseConnections_GetDatabaseConnectionConfig(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getDatabaseConnectionConfig")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.DatabaseConnections.GetDatabaseConnectionConfig(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetDatabaseConnectionConfigResponseBody{}, res.Object)

}

func TestDatabaseConnections_CreateDatabaseConnectionConfig(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createDatabaseConnectionConfig")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.DatabaseConnections.CreateDatabaseConnectionConfig(ctx, components.DatabaseConnectionConfig{
		AuthType:     "<value>",
		DatabaseType: components.DatabaseConnectionTypePostgres,
		Description:  "besides investigate yowza skyline promptly daintily afore contravene meanwhile",
		ID:           "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateDatabaseConnectionConfigResponseBody{}, res.Object)

}

func TestDatabaseConnections_GetDatabaseConnectionConfigByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getDatabaseConnectionConfigById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.DatabaseConnections.GetDatabaseConnectionConfigByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetDatabaseConnectionConfigByIDResponseBody{}, res.Object)

}

func TestDatabaseConnections_UpdateDatabaseConnectionConfigByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateDatabaseConnectionConfigById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.DatabaseConnections.UpdateDatabaseConnectionConfigByID(ctx, "<id>", components.DatabaseConnectionConfig{
		AuthType:     "<value>",
		DatabaseType: components.DatabaseConnectionTypeOracle,
		Description:  "developmental oof hourly",
		ID:           "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateDatabaseConnectionConfigByIDResponseBody{}, res.Object)

}

func TestDatabaseConnections_DeleteDatabaseConnectionConfigByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteDatabaseConnectionConfigById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.DatabaseConnections.DeleteDatabaseConnectionConfigByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteDatabaseConnectionConfigByIDResponseBody{}, res.Object)

}

func TestDatabaseConnections_CreateLibDatabaseConnectionsTest(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createLibDatabaseConnectionsTest")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.DatabaseConnections.CreateLibDatabaseConnectionsTest(ctx, components.DatabaseConnectionTest{
		AuthType:     "<value>",
		DatabaseType: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateLibDatabaseConnectionsTestResponseBody{}, res.Object)

}

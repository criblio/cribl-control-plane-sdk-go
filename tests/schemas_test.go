// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSchemas_ListLibSchemas(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listLibSchemas")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.ListLibSchemas(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListLibSchemasResponseBody{}, res.Object)

}

func TestSchemas_CreateLibSchemas(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createLibSchemas")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.CreateLibSchemas(ctx, components.SchemaLibEntry{
		ID:     "<id>",
		Schema: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateLibSchemasResponseBody{}, res.Object)

}

func TestSchemas_GetLibSchemasByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getLibSchemasById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.GetLibSchemasByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetLibSchemasByIDResponseBody{}, res.Object)

}

func TestSchemas_UpdateLibSchemasByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateLibSchemasById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.UpdateLibSchemasByID(ctx, "<id>", components.SchemaLibEntry{
		ID:     "<id>",
		Schema: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateLibSchemasByIDResponseBody{}, res.Object)

}

func TestSchemas_DeleteLibSchemasByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteLibSchemasById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.DeleteLibSchemasByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteLibSchemasByIDResponseBody{}, res.Object)

}

func TestSchemas_GetSchemaLibByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSchemaLibByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.GetSchemaLibByPack(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSchemaLibByPackResponseBody{}, res.Object)

}

func TestSchemas_CreateSchemaLibByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSchemaLibByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.CreateSchemaLibByPack(ctx, "<value>", components.SchemaLibEntry{
		ID:     "<id>",
		Schema: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSchemaLibByPackResponseBody{}, res.Object)

}

func TestSchemas_GetSchemaLibByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSchemaLibByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.GetSchemaLibByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSchemaLibByPackAndIDResponseBody{}, res.Object)

}

func TestSchemas_UpdateSchemaLibByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSchemaLibByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.UpdateSchemaLibByPackAndID(ctx, "<id>", "<value>", components.SchemaLibEntry{
		ID:     "<id>",
		Schema: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSchemaLibByPackAndIDResponseBody{}, res.Object)

}

func TestSchemas_DeleteSchemaLibByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteSchemaLibByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Schemas.DeleteSchemaLibByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteSchemaLibByPackAndIDResponseBody{}, res.Object)

}

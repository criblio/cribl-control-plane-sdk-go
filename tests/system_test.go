// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSystem_UpdateChangelogViewed(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateChangelogViewed")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.UpdateChangelogViewed(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateChangelogViewedResponseBody{}, res.Object)

}

func TestSystem_CreateSystemDistributedUpgradeCancelByGroup(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemDistributedUpgradeCancelByGroup")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.CreateSystemDistributedUpgradeCancelByGroup(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemDistributedUpgradeCancelByGroupResponseBody{}, res.Object)

}

func TestSystem_CreateSystemDistributedUpgradeStageByGroup(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemDistributedUpgradeStageByGroup")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.CreateSystemDistributedUpgradeStageByGroup(ctx, "<value>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemDistributedUpgradeStageByGroupResponseBody{}, res.Object)

}

func TestSystem_CreateSystemDistributedUpgradeByGroup(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemDistributedUpgradeByGroup")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.CreateSystemDistributedUpgradeByGroup(ctx, "<value>", components.DistributedUpgradeRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemDistributedUpgradeByGroupResponseBody{}, res.Object)

}

func TestSystem_GetSystemDistributedUpgradeDownloadByFile(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemDistributedUpgradeDownloadByFile")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemDistributedUpgradeDownloadByFile(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemDistributedUpgradeDownloadByFileResponseBody{}, res.Object)

}

func TestSystem_ReloadSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("reloadSettings")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.ReloadSettings(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestSystem_TriggerRestart(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("triggerRestart")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.TriggerRestart(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestSystem_GetSystemSettingsAuth(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemSettingsAuth")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemSettingsAuth(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemSettingsAuthResponseBody{}, res.Object)

}

func TestSystem_UpdateSystemSettingsAuth(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSystemSettingsAuth")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.UpdateSystemSettingsAuth(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSystemSettingsAuthResponseBody{}, res.Object)

}

func TestSystem_GetSystemSettingsConf(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemSettingsConf")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemSettingsConf(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemSettingsConfResponseBody{}, res.Object)

}

func TestSystem_UpdateSystemSettingsConf(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSystemSettingsConf")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.UpdateSystemSettingsConf(ctx, components.SystemSettingsConf{
		API: components.SystemSettingsConfAPI{
			Disabled: true,
			Host:     "both-draw.com",
			Port:     3795.06,
			Protocol: "<value>",
			Ssl: components.SystemSettingsConfSsl{
				CertPath:    "<value>",
				Disabled:    false,
				Passphrase:  "<value>",
				PrivKeyPath: "<value>",
			},
			WorkerRemoteAccess: false,
		},
		Backups: components.SystemSettingsConfBackups{
			BackupPersistence: "<value>",
			BackupsDirectory:  "<value>",
		},
		CustomLogo: components.SystemSettingsConfCustomLogo{
			Enabled:         false,
			LogoDescription: "<value>",
			LogoImage:       "<value>",
		},
		Pii: components.SystemSettingsConfPii{
			EnablePiiDetection: true,
		},
		Proxy: components.SystemSettingsConfProxy{
			UseEnvVars: true,
		},
		Rollback: components.SystemSettingsConfRollback{
			RollbackEnabled: true,
		},
		Shutdown: components.SystemSettingsConfShutdown{
			DrainTimeout: 2424.38,
		},
		Sni: components.SystemSettingsConfSni{
			DisableSNIRouting: true,
		},
		System: components.SystemSettingsConfSystem{
			Intercom: false,
			Upgrade:  components.SystemSettingsConfUpgradeFalse,
		},
		TLS: components.SystemSettingsConfTLS{
			DefaultCipherList:  "<value>",
			DefaultEcdhCurve:   "<value>",
			MaxVersion:         "<value>",
			MinVersion:         "<value>",
			RejectUnauthorized: true,
		},
		UpgradeGroupSettings: components.UpgradeGroupSettings{},
		UpgradeSettings: components.UpgradeSettings{
			DisableAutomaticUpgrade: false,
			EnableLegacyEdgeUpgrade: false,
			UpgradeSource:           "<value>",
		},
		Workers: components.SystemSettingsConfWorkers{
			Count:   1297.29,
			Memory:  5944.19,
			Minimum: 3174.73,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSystemSettingsConfResponseBody{}, res.Object)

}

func TestSystem_GetSystemSettingsSearchLimits(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemSettingsSearchLimits")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemSettingsSearchLimits(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemSettingsSearchLimitsResponseBody{}, res.Object)

}

func TestSystem_GetSystemSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemSettings")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemSettings(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemSettingsResponseBody{}, res.Object)

}

func TestSystem_UpdateSystemSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSystemSettings")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.UpdateSystemSettings(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSystemSettingsResponseBody{}, res.Object)

}

func TestSystem_GetSystemSettingsCribl(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemSettingsCribl")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemSettingsCribl(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemSettingsCriblResponseBody{}, res.Object)

}

func TestSystem_GetSystemSettingsUpgrade(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemSettingsUpgrade")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.GetSystemSettingsUpgrade(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemSettingsUpgradeResponseBody{}, res.Object)

}

func TestSystem_CreateSystemSettingsUpgradeByVersion(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemSettingsUpgradeByVersion")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.CreateSystemSettingsUpgradeByVersion(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemSettingsUpgradeByVersionResponseBody{}, res.Object)

}

func TestSystem_CreateSystemSettingsUpgradeFromPackage(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemSettingsUpgradeFromPackage")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.System.CreateSystemSettingsUpgradeFromPackage(ctx, components.UpgradeMasterRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemSettingsUpgradeFromPackageResponseBody{}, res.Object)

}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestPreview_CreateSystemCapture(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemCapture")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Preview.CreateSystemCapture(ctx, components.CaptureParams{
		Duration:  5717.32,
		Filter:    "<value>",
		Level:     components.CaptureLevelTwo,
		MaxEvents: 9941.84,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemCaptureResponseBody{}, res.Object)

}

func TestPreview_CreateSystemProjectsCaptureByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsCaptureByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Preview.CreateSystemProjectsCaptureByProjectID(ctx, "<id>", components.CaptureParams{
		Duration:  4855.02,
		Filter:    "<value>",
		Level:     components.CaptureLevelThree,
		MaxEvents: 5475.12,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsCaptureByProjectIDResponseBody{}, res.Object)

}

func TestPreview_CreateSystemProjectsSubscriptionsCaptureByProjectIDAndSubscriptionID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsSubscriptionsCaptureByProjectIdAndSubscriptionId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Preview.CreateSystemProjectsSubscriptionsCaptureByProjectIDAndSubscriptionID(ctx, "<id>", "<id>", components.CaptureParams{
		Duration:  9984.14,
		Filter:    "<value>",
		Level:     components.CaptureLevelThree,
		MaxEvents: 502.1,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsSubscriptionsCaptureByProjectIDAndSubscriptionIDResponseBody{}, res.Object)

}

func TestPreview_CreatePreview(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createPreview")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Preview.CreatePreview(ctx, components.PreviewDataParams{
		Mode:       components.PreviewDataParamsModePipe,
		PipelineID: "<id>",
		SampleID:   "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreatePreviewResponseBody{}, res.Object)

}

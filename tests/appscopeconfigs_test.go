// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestAppscopeConfigs_ListAppscopeLibEntry(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listAppscopeLibEntry")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.AppscopeConfigs.ListAppscopeLibEntry(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListAppscopeLibEntryResponseBody{}, res.Object)

}

func TestAppscopeConfigs_CreateAppscopeLibEntry(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createAppscopeLibEntry")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.AppscopeConfigs.CreateAppscopeLibEntry(ctx, components.AppscopeLibEntry{
		Config:      components.AppscopeConfigWithCustom{},
		Description: "neatly floodlight athwart fearless scamper dispose",
		ID:          "<id>",
		Lib:         components.CriblLibCribl,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateAppscopeLibEntryResponseBody{}, res.Object)

}

func TestAppscopeConfigs_GetAppscopeLibEntryByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getAppscopeLibEntryById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.AppscopeConfigs.GetAppscopeLibEntryByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetAppscopeLibEntryByIDResponseBody{}, res.Object)

}

func TestAppscopeConfigs_UpdateAppscopeLibEntryByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateAppscopeLibEntryById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.AppscopeConfigs.UpdateAppscopeLibEntryByID(ctx, "<id>", components.AppscopeLibEntry{
		Config:      components.AppscopeConfigWithCustom{},
		Description: "blaspheme failing smug yet part diver dramatize",
		ID:          "<id>",
		Lib:         components.CriblLibCribl,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateAppscopeLibEntryByIDResponseBody{}, res.Object)

}

func TestAppscopeConfigs_DeleteAppscopeLibEntryByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteAppscopeLibEntryById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.AppscopeConfigs.DeleteAppscopeLibEntryByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteAppscopeLibEntryByIDResponseBody{}, res.Object)

}

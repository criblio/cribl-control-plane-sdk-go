// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSearch_ListSearchJob(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listSearchJob")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.ListSearchJob(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListSearchJobResponseBody{}, res.Object)

}

func TestSearch_CreateSearchJob(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchJob")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.CreateSearchJob(ctx, components.SearchJob{
		DisplayUsername: "<value>",
		Group:           "<value>",
		ID:              "<id>",
		Query:           "<value>",
		Status:          components.SearchJobStatusCanceled,
		TimeCreated:     328.87,
		User:            "Janessa95",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSearchJobResponseBody{}, res.Object)

}

func TestSearch_GetSearchJobByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSearchJobByIDResponseBody{}, res.Object)

}

func TestSearch_UpdateSearchJobByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSearchJobById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.UpdateSearchJobByID(ctx, "<id>", components.SearchJob{
		DisplayUsername: "<value>",
		Group:           "<value>",
		ID:              "<id>",
		Query:           "<value>",
		Status:          components.SearchJobStatusRunning,
		TimeCreated:     6068.64,
		User:            "Lexi.Lemke",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSearchJobByIDResponseBody{}, res.Object)

}

func TestSearch_DeleteSearchJobByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteSearchJobById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.DeleteSearchJobByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteSearchJobByIDResponseBody{}, res.Object)

}

func TestSearch_CreateSearchJobDispatchExecutorsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchJobDispatchExecutorsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.CreateSearchJobDispatchExecutorsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSearchJobDispatchExecutorsByIDResponseBody{}, res.Object)

}

func TestSearch_GetSearchJobSettingsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobSettingsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobSettingsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.SearchJobSettings)
	assert.Equal(t, &components.SearchJobSettings{}, res.SearchJobSettings)

}

func TestSearch_CreateSearchJobSettingsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchJobSettingsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.CreateSearchJobSettingsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.SearchJobSettings)
	assert.Equal(t, &components.SearchJobSettings{}, res.SearchJobSettings)

}

func TestSearch_GetSearchJobStatusByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobStatusById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobStatusByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.StatusResponse)
	assert.Equal(t, &components.StatusResponse{
		Status:      components.StatusResponseStatusCompleted,
		TimeCreated: 722.29,
	}, res.StatusResponse)

}

func TestSearch_GetSearchJobTimelineByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobTimelineById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobTimelineByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.SearchTimeline)
	assert.Equal(t, &components.SearchTimeline{
		Buckets: []components.Bucket{
			components.Bucket{
				Duration:   8639.75,
				Earliest:   1076.08,
				EventCount: 3949.64,
			},
		},
		TotalEventCount: 5534.69,
	}, res.SearchTimeline)

}

func TestSearch_GetSearchJobFieldSummariesByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobFieldSummariesById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobFieldSummariesByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.FieldSummaries)
	assert.Equal(t, &components.FieldSummaries{
		Fields:          []components.Field{},
		TotalEventCount: 6327.1,
	}, res.FieldSummaries)

}

func TestSearch_GetSearchJobLogsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobLogsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobLogsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSearchJobLogsByIDResponseBody{}, res.Object)

}

func TestSearch_CreateSearchEventBreakerPreview(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchEventBreakerPreview")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.CreateSearchEventBreakerPreview(ctx, components.DatatypePreviewRequestBody{
		Input: components.CreateDatatypePreviewInputDatatypePreviewInputDataset(
			components.DatatypePreviewInputDataset{
				Dataset: "<value>",
				Type:    components.DatatypePreviewInputTypeDatasetDataset,
			},
		),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSearchEventBreakerPreviewResponseBody{}, res.Object)

}

func TestSearch_GetSearchDocs(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchDocs")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchDocs(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_GetSearchHealthcheck(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchHealthcheck")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchHealthcheck(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSearchHealthcheckResponseBody{}, res.Object)

}

func TestSearch_GetSearchJobsMetricsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobsMetricsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobsMetricsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_GetSearchJobMetrics(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobMetrics")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobMetrics(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_CreateSearchPreview(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchPreview")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.CreateSearchPreview(ctx, components.PreviewRequestBody{
		Events: []any{},
		Query:  "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSearchPreviewResponseBody{}, res.Object)

}

func TestSearch_CreateSearchUIMetrics(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSearchUiMetrics")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.CreateSearchUIMetrics(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_GetSearchJobsDiagByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobsDiagById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobsDiagByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_GetSearchJobsLogsByIDAndFilename(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobsLogsByIdAndFilename")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobsLogsByIDAndFilename(ctx, "<id>", "example.file")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_GetSearchJobsStagesResultsByIDAndStageID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobsStagesResultsByIdAndStageId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobsStagesResultsByIDAndStageID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.String)
	assert.Equal(t, criblcontrolplanesdkgo.String("<value>"), res.String)

}

func TestSearch_GetSearchJobsResultsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobsResultsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobsResultsByID(ctx, operations.GetSearchJobsResultsByIDRequest{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestSearch_GetSearchJobsResultsPollByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSearchJobsResultsPollById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Search.GetSearchJobsResultsPollByID(ctx, operations.GetSearchJobsResultsPollByIDRequest{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

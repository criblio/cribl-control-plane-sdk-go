// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSdsRules_ListSensitiveDataRule(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listSensitiveDataRule")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SdsRules.ListSensitiveDataRule(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListSensitiveDataRuleResponseBody{}, res.Object)

}

func TestSdsRules_CreateSensitiveDataRule(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSensitiveDataRule")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SdsRules.CreateSensitiveDataRule(ctx, components.SensitiveDataRule{
		ID:    "<id>",
		Regex: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSensitiveDataRuleResponseBody{}, res.Object)

}

func TestSdsRules_GetSensitiveDataRuleByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSensitiveDataRuleById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SdsRules.GetSensitiveDataRuleByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSensitiveDataRuleByIDResponseBody{}, res.Object)

}

func TestSdsRules_UpdateSensitiveDataRuleByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSensitiveDataRuleById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SdsRules.UpdateSensitiveDataRuleByID(ctx, "<id>", components.SensitiveDataRule{
		ID:    "<id>",
		Regex: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSensitiveDataRuleByIDResponseBody{}, res.Object)

}

func TestSdsRules_DeleteSensitiveDataRuleByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteSensitiveDataRuleById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SdsRules.DeleteSensitiveDataRuleByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteSensitiveDataRuleByIDResponseBody{}, res.Object)

}

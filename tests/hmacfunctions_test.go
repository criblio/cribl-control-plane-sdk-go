// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestHmacFunctions_ListHmacFunction(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listHmacFunction")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.HmacFunctions.ListHmacFunction(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListHmacFunctionResponseBody{}, res.Object)

}

func TestHmacFunctions_CreateHmacFunction(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createHmacFunction")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.HmacFunctions.CreateHmacFunction(ctx, components.HmacFunction{
		HeaderExpression: "<value>",
		HeaderName:       "<value>",
		ID:               "<id>",
		Lib:              components.CriblLibCustom,
		StringBuilders: []string{
			"<value 1>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateHmacFunctionResponseBody{}, res.Object)

}

func TestHmacFunctions_GetHmacFunctionByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getHmacFunctionById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.HmacFunctions.GetHmacFunctionByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetHmacFunctionByIDResponseBody{}, res.Object)

}

func TestHmacFunctions_UpdateHmacFunctionByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateHmacFunctionById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.HmacFunctions.UpdateHmacFunctionByID(ctx, "<id>", components.HmacFunction{
		HeaderExpression: "<value>",
		HeaderName:       "<value>",
		ID:               "<id>",
		Lib:              components.CriblLibCribl,
		StringBuilders: []string{
			"<value 1>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateHmacFunctionByIDResponseBody{}, res.Object)

}

func TestHmacFunctions_DeleteHmacFunctionByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteHmacFunctionById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.HmacFunctions.DeleteHmacFunctionByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteHmacFunctionByIDResponseBody{}, res.Object)

}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestGlobalVariables_GetGlobalVariable(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGlobalVariable")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.GetGlobalVariable(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGlobalVariableResponseBody{}, res.Object)

}

func TestGlobalVariables_CreateGlobalVariable(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createGlobalVariable")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.CreateGlobalVariable(ctx, components.GlobalVar{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateGlobalVariableResponseBody{}, res.Object)

}

func TestGlobalVariables_GetGlobalVariableByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGlobalVariableById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.GetGlobalVariableByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGlobalVariableByIDResponseBody{}, res.Object)

}

func TestGlobalVariables_UpdateGlobalVariableByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateGlobalVariableById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.UpdateGlobalVariableByID(ctx, "<id>", components.GlobalVar{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateGlobalVariableByIDResponseBody{}, res.Object)

}

func TestGlobalVariables_DeleteGlobalVariableByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteGlobalVariableById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.DeleteGlobalVariableByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteGlobalVariableByIDResponseBody{}, res.Object)

}

func TestGlobalVariables_GetGlobalVariableLibVarsByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGlobalVariableLibVarsByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.GetGlobalVariableLibVarsByPack(ctx, "<value>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGlobalVariableLibVarsByPackResponseBody{}, res.Object)

}

func TestGlobalVariables_CreateGlobalVariableLibVarsByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createGlobalVariableLibVarsByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.CreateGlobalVariableLibVarsByPack(ctx, "<value>", components.GlobalVar{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateGlobalVariableLibVarsByPackResponseBody{}, res.Object)

}

func TestGlobalVariables_GetGlobalVariableLibVarsByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGlobalVariableLibVarsByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.GetGlobalVariableLibVarsByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGlobalVariableLibVarsByPackAndIDResponseBody{}, res.Object)

}

func TestGlobalVariables_UpdateGlobalVariableLibVarsByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateGlobalVariableLibVarsByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.UpdateGlobalVariableLibVarsByPackAndID(ctx, "<id>", "<value>", components.GlobalVar{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateGlobalVariableLibVarsByPackAndIDResponseBody{}, res.Object)

}

func TestGlobalVariables_DeleteGlobalVariableLibVarsByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteGlobalVariableLibVarsByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.GlobalVariables.DeleteGlobalVariableLibVarsByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteGlobalVariableLibVarsByPackAndIDResponseBody{}, res.Object)

}

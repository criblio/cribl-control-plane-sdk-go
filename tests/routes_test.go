// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestRoutes_ListRoutes(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listRoutes")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.ListRoutes(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListRoutesResponseBody{}, res.Object)

}

func TestRoutes_GetRoutesByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getRoutesById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.GetRoutesByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetRoutesByIDResponseBody{}, res.Object)

}

func TestRoutes_UpdateRoutesByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateRoutesById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.UpdateRoutesByID(ctx, "<id>", components.RoutesInput{
		Routes: []components.RoutesRouteInput{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateRoutesByIDResponseBody{}, res.Object)

}

func TestRoutes_CreateRoutesAppendByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createRoutesAppendById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.CreateRoutesAppendByID(ctx, "<id>", []components.RouteConf{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateRoutesAppendByIDResponseBody{}, res.Object)

}

func TestRoutes_GetRoutesByPack(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getRoutesByPack")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.GetRoutesByPack(ctx, "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetRoutesByPackResponseBody{}, res.Object)

}

func TestRoutes_GetRoutesByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getRoutesByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.GetRoutesByPackAndID(ctx, "<id>", "<value>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetRoutesByPackAndIDResponseBody{}, res.Object)

}

func TestRoutes_UpdateRoutesByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateRoutesByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.UpdateRoutesByPackAndID(ctx, "<id>", "<value>", components.RoutesInput{
		Routes: []components.RoutesRouteInput{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateRoutesByPackAndIDResponseBody{}, res.Object)

}

func TestRoutes_CreateRoutesAppendByPackAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createRoutesAppendByPackAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Routes.CreateRoutesAppendByPackAndID(ctx, "<id>", "<value>", []components.RouteConf{
		components.RouteConf{
			Final:    true,
			ID:       "<id>",
			Name:     "<value>",
			Pipeline: "<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateRoutesAppendByPackAndIDResponseBody{}, res.Object)

}

// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestMetrics_CreateSystemMetricsEnum(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemMetricsEnum")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Metrics.CreateSystemMetricsEnum(ctx, components.SystemMetricsEnum{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemMetricsEnumResponseBody{}, res.Object)

}

func TestMetrics_GetSystemMetrics(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemMetrics")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Metrics.GetSystemMetrics(ctx, operations.GetSystemMetricsRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemMetricsResponseBody{}, res.Object)

}

func TestMetrics_CreateSystemMetricsQuery(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemMetricsQuery")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Metrics.CreateSystemMetricsQuery(ctx, components.MetricsAggOpts{
		Aggs: components.AggregationMgrOptions{
			Aggregations:        []string{},
			Cumulative:          false,
			FlushEventLimit:     9835.34,
			FlushMemLimit:       7220.64,
			Hostname:            "handy-kielbasa.info",
			MetricsMode:         false,
			SufficientStatsOnly: true,
			TimeWindowSeconds:   7794.15,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemMetricsQueryResponseBody{}, res.Object)

}

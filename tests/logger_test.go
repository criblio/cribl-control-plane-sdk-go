// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestLogger_ListLoggerConfig(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listLoggerConfig")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Logger.ListLoggerConfig(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListLoggerConfigResponseBody{}, res.Object)

}

func TestLogger_GetLoggerConfigByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getLoggerConfigById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Logger.GetLoggerConfigByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetLoggerConfigByIDResponseBody{}, res.Object)

}

func TestLogger_UpdateLoggerConfigByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateLoggerConfigById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Logger.UpdateLoggerConfigByID(ctx, "<id>", components.LoggerConfig{
		Channels: []components.LoggerEntry{
			components.LoggerEntry{
				ID:    "<id>",
				Level: "<value>",
			},
		},
		ID:           "<id>",
		LimitRate:    1569.58,
		MaxSizeBytes: 3692.39,
		RedactFields: []string{
			"<value 1>",
			"<value 2>",
		},
		RedactLabel: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateLoggerConfigByIDResponseBody{}, res.Object)

}

func TestLogger_DeleteLoggerConfigByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteLoggerConfigById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Logger.DeleteLoggerConfigByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteLoggerConfigByIDResponseBody{}, res.Object)

}

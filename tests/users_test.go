// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestUsers_ListUser(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listUser")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.ListUser(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListUserResponseBody{}, res.Object)

}

func TestUsers_CreateUser(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createUser")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.CreateUser(ctx, components.User{
		Disabled: true,
		Email:    "Aliya_Gorczany97@gmail.com",
		First:    "<value>",
		ID:       "<id>",
		Last:     "<value>",
		Username: "Virginie47",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateUserResponseBody{}, res.Object)

}

func TestUsers_GetUserByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getUserById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.GetUserByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetUserByIDResponseBody{}, res.Object)

}

func TestUsers_UpdateUserByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateUserById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.UpdateUserByID(ctx, "<id>", components.UserProfile{
		Disabled: false,
		Email:    "Gladys_Kohler@hotmail.com",
		First:    "<value>",
		ID:       "<id>",
		Last:     "<value>",
		Username: "Deondre.Hilll",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateUserByIDResponseBody{}, res.Object)

}

func TestUsers_DeleteUserByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteUserById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.DeleteUserByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteUserByIDResponseBody{}, res.Object)

}

func TestUsers_UpdateUserInfoByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateUserInfoById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.UpdateUserInfoByID(ctx, "<id>", components.UserInfo{
		Disabled: false,
		Email:    "Devan_Aufderhar@yahoo.com",
		First:    "<value>",
		ID:       "<id>",
		Last:     "<value>",
		Username: "Eliane85",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateUserInfoByIDResponseBody{}, res.Object)

}

func TestUsers_GetProductsUsersACLByProductAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProductsUsersAclByProductAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.GetProductsUsersACLByProductAndID(ctx, operations.GetProductsUsersACLByProductAndIDProductEdge, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProductsUsersACLByProductAndIDResponseBody{}, res.Object)

}

func TestUsers_GetProductsUsersByProduct(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProductsUsersByProduct")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.GetProductsUsersByProduct(ctx, operations.GetProductsUsersByProductProductStream, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProductsUsersByProductResponseBody{}, res.Object)

}

func TestUsers_DeleteProductsUsersCacheByProduct(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteProductsUsersCacheByProduct")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Users.DeleteProductsUsersCacheByProduct(ctx, operations.DeleteProductsUsersCacheByProductProductLake)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteProductsUsersCacheByProductResponseBody{}, res.Object)

}

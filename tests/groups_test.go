// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestGroups_GetGroupsConfigVersionByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGroupsConfigVersionById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.GetGroupsConfigVersionByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGroupsConfigVersionByIDResponseBody{}, res.Object)

}

func TestGroups_CreateProductsGroupsByProduct(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createProductsGroupsByProduct")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.CreateProductsGroupsByProduct(ctx, operations.CreateProductsGroupsByProductProductStream, components.ConfigGroup{
		ConfigVersion: "<value>",
		ID:            "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateProductsGroupsByProductResponseBody{}, res.Object)

}

func TestGroups_GetProductsGroupsByProduct(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProductsGroupsByProduct")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.GetProductsGroupsByProduct(ctx, operations.GetProductsGroupsByProductProductStream, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProductsGroupsByProductResponseBody{}, res.Object)

}

func TestGroups_UpdateGroupsDeployByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateGroupsDeployById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.UpdateGroupsDeployByID(ctx, "<id>", components.DeployRequest{
		Version: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateGroupsDeployByIDResponseBody{}, res.Object)

}

func TestGroups_GetGroupsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGroupsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.GetGroupsByID(ctx, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGroupsByIDResponseBody{}, res.Object)

}

func TestGroups_GetGroupsACLByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getGroupsAclById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.GetGroupsACLByID(ctx, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetGroupsACLByIDResponseBody{}, res.Object)

}

func TestGroups_DeleteGroupsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteGroupsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.DeleteGroupsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteGroupsByIDResponseBody{}, res.Object)

}

func TestGroups_UpdateGroupsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateGroupsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Groups.UpdateGroupsByID(ctx, "<id>", components.ConfigGroup{
		ConfigVersion: "<value>",
		ID:            "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateGroupsByIDResponseBody{}, res.Object)

}

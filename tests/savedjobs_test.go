// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSavedJobs_ListSavedJob(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listSavedJob")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SavedJobs.ListSavedJob(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListSavedJobResponseBody{}, res.Object)

}

func TestSavedJobs_CreateSavedJob(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSavedJob")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SavedJobs.CreateSavedJob(ctx, components.CreateSavedJobSavedJobCollection(
		components.SavedJobCollection{
			Type: components.SavedJobCollectionJobTypeCollection,
			Collector: components.SavedJobCollectionCollector{
				Type: "<value>",
				Conf: components.SavedJobCollectionCollectorSpecificSettings{},
			},
		},
	))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSavedJobResponseBody{}, res.Object)

}

func TestSavedJobs_GetSavedJobByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSavedJobById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SavedJobs.GetSavedJobByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSavedJobByIDResponseBody{}, res.Object)

}

func TestSavedJobs_UpdateSavedJobByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSavedJobById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SavedJobs.UpdateSavedJobByID(ctx, "<id>", components.CreateSavedJobSavedJobCollection(
		components.SavedJobCollection{
			Type: components.SavedJobCollectionJobTypeCollection,
			Collector: components.SavedJobCollectionCollector{
				Type: "<value>",
				Conf: components.SavedJobCollectionCollectorSpecificSettings{},
			},
		},
	))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSavedJobByIDResponseBody{}, res.Object)

}

func TestSavedJobs_DeleteSavedJobByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteSavedJobById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.SavedJobs.DeleteSavedJobByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteSavedJobByIDResponseBody{}, res.Object)

}

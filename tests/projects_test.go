// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestProjects_GetSystemProjectsSubscriptionsByGroupIDByAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsSubscriptionsByGroupIdByAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsSubscriptionsByGroupIDByAndProjectID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsSubscriptionsByGroupIDByAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionCountByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionCountByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionCountByGroupIDAndProjectID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionCountByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionDiffByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionDiffByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionDiffByGroupIDAndProjectID(ctx, "<id>", "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionDiffByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionFilesByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionFilesByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionFilesByGroupIDAndProjectID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionFilesByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsVersionCommitByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsVersionCommitByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsVersionCommitByGroupIDAndProjectID(ctx, "<id>", "<id>", components.ProjectGitCommitParams{
		Message: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsVersionCommitByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsSubscriptionsCaptureByGroupIDAndSubscriptionID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsSubscriptionsCaptureByGroupIdAndSubscriptionId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsSubscriptionsCaptureByGroupIDAndSubscriptionID(ctx, "<id>", "<id>", "<id>", components.CaptureParams{
		Duration:  9977.94,
		Filter:    "<value>",
		Level:     components.CaptureLevelTwo,
		MaxEvents: 5232.64,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsSubscriptionsCaptureByGroupIDAndSubscriptionIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsCaptureByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsCaptureByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsCaptureByGroupIDAndProjectID(ctx, "<id>", "<id>", components.CaptureParams{
		Duration:  7020.88,
		Filter:    "<value>",
		Level:     components.CaptureLevelOne,
		MaxEvents: 7103.16,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsCaptureByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsPreviewByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsPreviewByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsPreviewByGroupIDAndProjectID(ctx, "<id>", "<id>", components.PreviewDataParams{
		Mode:       components.PreviewDataParamsModeRoute,
		PipelineID: "<id>",
		SampleID:   "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsPreviewByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsPipelinesByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsPipelinesByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsPipelinesByGroupIDAndProjectID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsPipelinesByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsPipelinesByGroupIDAndProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsPipelinesByGroupIdAndProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsPipelinesByGroupIDAndProjectID(ctx, "<id>", "<id>", components.Pipeline{
		ID:   "<id>",
		Conf: components.PipelineConf{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsPipelinesByGroupIDAndProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsPipelinesByGroupIdAndProjectIdAndPipelineId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineID(ctx, "<id>", "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineIDResponseBody{}, res.Object)

}

func TestProjects_UpdateSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateSystemProjectsPipelinesByGroupIdAndProjectIdAndPipelineId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.UpdateSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineID(ctx, "<id>", "<id>", "<id>", components.Pipeline{
		ID:   "<id>",
		Conf: components.PipelineConf{},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineIDResponseBody{}, res.Object)

}

func TestProjects_DeleteSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteSystemProjectsPipelinesByGroupIdAndProjectIdAndPipelineId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.DeleteSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineID(ctx, "<id>", "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteSystemProjectsPipelinesByGroupIDAndProjectIDAndPipelineIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsVersionCommitByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsVersionCommitByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsVersionCommitByProjectID(ctx, "<id>", components.ProjectGitCommitParams{
		Message: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsVersionCommitByProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionCountByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionCountByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionCountByProjectID(ctx, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionCountByProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionDiffByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionDiffByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionDiffByProjectID(ctx, "<id>", nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionDiffByProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionFilesByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionFilesByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionFilesByProjectID(ctx, "<id>", nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionFilesByProjectIDResponseBody{}, res.Object)

}

func TestProjects_CreateSystemProjectsVersionRevertByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createSystemProjectsVersionRevertByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateSystemProjectsVersionRevertByProjectID(ctx, "<id>", components.ProjectGitCommitParams{
		Message: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateSystemProjectsVersionRevertByProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSystemProjectsVersionShowByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSystemProjectsVersionShowByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSystemProjectsVersionShowByProjectID(ctx, "<id>", nil, nil, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSystemProjectsVersionShowByProjectIDResponseBody{}, res.Object)

}

func TestProjects_ListProject(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listProject")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.ListProject(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListProjectResponseBody{}, res.Object)

}

func TestProjects_CreateProject(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createProject")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateProject(ctx, components.ProjectConfig{
		Destinations: []string{
			"<value 1>",
			"<value 2>",
			"<value 3>",
		},
		ID: "<id>",
		Subscriptions: []string{
			"<value 1>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateProjectResponseBody{}, res.Object)

}

func TestProjects_GetProjectByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProjectById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetProjectByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProjectByIDResponseBody{}, res.Object)

}

func TestProjects_UpdateProjectByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateProjectById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.UpdateProjectByID(ctx, "<id>", components.ProjectConfig{
		Destinations: []string{
			"<value 1>",
			"<value 2>",
		},
		ID: "<id>",
		Subscriptions: []string{
			"<value 1>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateProjectByIDResponseBody{}, res.Object)

}

func TestProjects_DeleteProjectByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteProjectById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.DeleteProjectByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteProjectByIDResponseBody{}, res.Object)

}

func TestProjects_GetProjectACLByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProjectAclById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetProjectACLByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProjectACLByIDResponseBody{}, res.Object)

}

func TestProjects_CreateProjectACLApplyByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createProjectAclApplyById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateProjectACLApplyByID(ctx, "<id>", components.AccessControlSchema{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestProjects_GetProjectACLTeamsByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProjectAclTeamsById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetProjectACLTeamsByID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProjectACLTeamsByIDResponseBody{}, res.Object)

}

func TestProjects_CreateProjectACLTeamsApplyByID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createProjectAclTeamsApplyById")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.CreateProjectACLTeamsApplyByID(ctx, "<id>", components.AccessControlSchema{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestProjects_GetProjectDestinationsByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getProjectDestinationsByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetProjectDestinationsByProjectID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetProjectDestinationsByProjectIDResponseBody{}, res.Object)

}

func TestProjects_GetSubscriptionByProjectID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getSubscriptionByProjectId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
	)

	res, err := s.Projects.GetSubscriptionByProjectID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetSubscriptionByProjectIDResponseBody{}, res.Object)

}

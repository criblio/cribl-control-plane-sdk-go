// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	criblcontrolplanesdkgo "github.com/criblio/cribl-control-plane-sdk-go"
	"github.com/criblio/cribl-control-plane-sdk-go/internal/utils"
	"github.com/criblio/cribl-control-plane-sdk-go/models/components"
	"github.com/criblio/cribl-control-plane-sdk-go/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestLake_CreateCriblLakeDatasetByLakeID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createCriblLakeDatasetByLakeId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Lake.CreateCriblLakeDatasetByLakeID(ctx, "<id>", components.CriblLakeDataset{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.CreateCriblLakeDatasetByLakeIDResponseBody{}, res.Object)

}

func TestLake_GetCriblLakeDatasetByLakeID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getCriblLakeDatasetByLakeId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Lake.GetCriblLakeDatasetByLakeID(ctx, "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetCriblLakeDatasetByLakeIDResponseBody{}, res.Object)

}

func TestLake_DeleteCriblLakeDatasetByLakeIDAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteCriblLakeDatasetByLakeIdAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Lake.DeleteCriblLakeDatasetByLakeIDAndID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.DeleteCriblLakeDatasetByLakeIDAndIDResponseBody{}, res.Object)

}

func TestLake_GetCriblLakeDatasetByLakeIDAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getCriblLakeDatasetByLakeIdAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Lake.GetCriblLakeDatasetByLakeIDAndID(ctx, "<id>", "<id>")
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetCriblLakeDatasetByLakeIDAndIDResponseBody{}, res.Object)

}

func TestLake_UpdateCriblLakeDatasetByLakeIDAndID(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateCriblLakeDatasetByLakeIdAndId")

	s := criblcontrolplanesdkgo.New(
		utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080"),
		criblcontrolplanesdkgo.WithClient(testHTTPClient),
		criblcontrolplanesdkgo.WithSecurity(components.Security{
			BearerAuth: criblcontrolplanesdkgo.String(utils.GetEnv("CRIBLCONTROLPLANE_BEARER_AUTH", "value")),
		}),
	)

	res, err := s.Lake.UpdateCriblLakeDatasetByLakeIDAndID(ctx, "<id>", "<id>", components.CriblLakeDataset{
		ID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.UpdateCriblLakeDatasetByLakeIDAndIDResponseBody{}, res.Object)

}
